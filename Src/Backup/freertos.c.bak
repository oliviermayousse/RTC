/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */     
#include "string.h"
#include "stdio.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define SLAVE_ADRESS 0b1101000<<1
#define MASQUE_CHBit 0b10000000
#define MASQUE_CHBit_0 0b01111111
#define MASQUE_UNITEES 0b00001111
#define MASQUE_DIZAINES 0b01110000
#define MASQUE_DIZAINES_JOUR 0b00110000
#define MASQUE_DIZAINES_MOIS 0b00010000
#define MASQUE_DIZAINES_ANNEE 0b11110000

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
uint8_t transmission_I2C1[1];
uint8_t reception_I2C1[3];
uint8_t * p_transmission_I2C1 = transmission_I2C1;
uint8_t * p_reception_I2C1 = reception_I2C1;

/* USER CODE END Variables */
osThreadId defaultTaskHandle;
osThreadId myTaskModeHandle;
osThreadId myTaskChampsHandle;
osThreadId myTaskSensReglaHandle;
osThreadId myTaskValeurSuiHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
   
/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void const * argument);
void StartTaskMode(void const * argument);
void StartTaskChamps(void const * argument);
void StartTaskSensReglage(void const * argument);
void StartTaskValeurSuivante(void const * argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  /* place for user code */
}                   
/* USER CODE END GET_IDLE_TASK_MEMORY */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of myTaskMode */
  osThreadDef(myTaskMode, StartTaskMode, osPriorityNormal, 0, 128);
  myTaskModeHandle = osThreadCreate(osThread(myTaskMode), NULL);

  /* definition and creation of myTaskChamps */
  osThreadDef(myTaskChamps, StartTaskChamps, osPriorityNormal, 0, 128);
  myTaskChampsHandle = osThreadCreate(osThread(myTaskChamps), NULL);

  /* definition and creation of myTaskSensRegla */
  osThreadDef(myTaskSensRegla, StartTaskSensReglage, osPriorityNormal, 0, 128);
  myTaskSensReglaHandle = osThreadCreate(osThread(myTaskSensRegla), NULL);

  /* definition and creation of myTaskValeurSui */
  osThreadDef(myTaskValeurSui, StartTaskValeurSuivante, osPriorityNormal, 0, 128);
  myTaskValeurSuiHandle = osThreadCreate(osThread(myTaskValeurSui), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartDefaultTask */
}

/* USER CODE BEGIN Header_StartTaskMode */
/**
* @brief Function implementing the myTaskMode thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMode */
void StartTaskMode(void const * argument)
{
  /* USER CODE BEGIN StartTaskMode */
  /* Infinite loop */
  for(;;)
  {
	  
    osDelay(1);
  }
  /* USER CODE END StartTaskMode */
}

/* USER CODE BEGIN Header_StartTaskChamps */
/**
* @brief Function implementing the myTaskChamps thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskChamps */
void StartTaskChamps(void const * argument)
{
  /* USER CODE BEGIN StartTaskChamps */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartTaskChamps */
}

/* USER CODE BEGIN Header_StartTaskSensReglage */
/**
* @brief Function implementing the myTaskSensRegla thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSensReglage */
void StartTaskSensReglage(void const * argument)
{
  /* USER CODE BEGIN StartTaskSensReglage */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartTaskSensReglage */
}

/* USER CODE BEGIN Header_StartTaskValeurSuivante */
/**
* @brief Function implementing the myTaskValeurSui thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskValeurSuivante */
void StartTaskValeurSuivante(void const * argument)
{
  /* USER CODE BEGIN StartTaskValeurSuivante */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartTaskValeurSuivante */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
     
/* USER CODE END Application */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
