
reglageRTCviaBoutonTactile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004578  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08004728  08004728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000000  080048f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
  8 .bss          00004538  2000001c  2000001c  0002001c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004554  20004554  0002001c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00022e2c  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000044d4  00000000  00000000  00042e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00011bfe  00000000  00000000  0004734c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017b8  00000000  00000000  00058f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001760  00000000  00000000  0005a708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b284  00000000  00000000  0005be68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00007f91  00000000  00000000  000670ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0006f07d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000041a4  00000000  00000000  0006f0fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004710 	.word	0x08004710

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000020 	.word	0x20000020
 80001ec:	08004710 	.word	0x08004710

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b97a 	b.w	800050c <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	468c      	mov	ip, r1
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	9e08      	ldr	r6, [sp, #32]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d151      	bne.n	80002e4 <__udivmoddi4+0xb4>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d96d      	bls.n	8000322 <__udivmoddi4+0xf2>
 8000246:	fab2 fe82 	clz	lr, r2
 800024a:	f1be 0f00 	cmp.w	lr, #0
 800024e:	d00b      	beq.n	8000268 <__udivmoddi4+0x38>
 8000250:	f1ce 0c20 	rsb	ip, lr, #32
 8000254:	fa01 f50e 	lsl.w	r5, r1, lr
 8000258:	fa20 fc0c 	lsr.w	ip, r0, ip
 800025c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000260:	ea4c 0c05 	orr.w	ip, ip, r5
 8000264:	fa00 f40e 	lsl.w	r4, r0, lr
 8000268:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800026c:	0c25      	lsrs	r5, r4, #16
 800026e:	fbbc f8fa 	udiv	r8, ip, sl
 8000272:	fa1f f987 	uxth.w	r9, r7
 8000276:	fb0a cc18 	mls	ip, sl, r8, ip
 800027a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800027e:	fb08 f309 	mul.w	r3, r8, r9
 8000282:	42ab      	cmp	r3, r5
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x6c>
 8000286:	19ed      	adds	r5, r5, r7
 8000288:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800028c:	f080 8123 	bcs.w	80004d6 <__udivmoddi4+0x2a6>
 8000290:	42ab      	cmp	r3, r5
 8000292:	f240 8120 	bls.w	80004d6 <__udivmoddi4+0x2a6>
 8000296:	f1a8 0802 	sub.w	r8, r8, #2
 800029a:	443d      	add	r5, r7
 800029c:	1aed      	subs	r5, r5, r3
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ac:	fb00 f909 	mul.w	r9, r0, r9
 80002b0:	45a1      	cmp	r9, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x98>
 80002b4:	19e4      	adds	r4, r4, r7
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ba:	f080 810a 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80002be:	45a1      	cmp	r9, r4
 80002c0:	f240 8107 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80002c4:	3802      	subs	r0, #2
 80002c6:	443c      	add	r4, r7
 80002c8:	eba4 0409 	sub.w	r4, r4, r9
 80002cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d0:	2100      	movs	r1, #0
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d061      	beq.n	800039a <__udivmoddi4+0x16a>
 80002d6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002da:	2300      	movs	r3, #0
 80002dc:	6034      	str	r4, [r6, #0]
 80002de:	6073      	str	r3, [r6, #4]
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xc8>
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d054      	beq.n	8000396 <__udivmoddi4+0x166>
 80002ec:	2100      	movs	r1, #0
 80002ee:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f2:	4608      	mov	r0, r1
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	fab3 f183 	clz	r1, r3
 80002fc:	2900      	cmp	r1, #0
 80002fe:	f040 808e 	bne.w	800041e <__udivmoddi4+0x1ee>
 8000302:	42ab      	cmp	r3, r5
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xdc>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2d0>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb65 0503 	sbc.w	r5, r5, r3
 8000312:	2001      	movs	r0, #1
 8000314:	46ac      	mov	ip, r5
 8000316:	2e00      	cmp	r6, #0
 8000318:	d03f      	beq.n	800039a <__udivmoddi4+0x16a>
 800031a:	e886 1010 	stmia.w	r6, {r4, ip}
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	b912      	cbnz	r2, 800032a <__udivmoddi4+0xfa>
 8000324:	2701      	movs	r7, #1
 8000326:	fbb7 f7f2 	udiv	r7, r7, r2
 800032a:	fab7 fe87 	clz	lr, r7
 800032e:	f1be 0f00 	cmp.w	lr, #0
 8000332:	d134      	bne.n	800039e <__udivmoddi4+0x16e>
 8000334:	1beb      	subs	r3, r5, r7
 8000336:	0c3a      	lsrs	r2, r7, #16
 8000338:	fa1f fc87 	uxth.w	ip, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000342:	0c25      	lsrs	r5, r4, #16
 8000344:	fb02 3318 	mls	r3, r2, r8, r3
 8000348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800034c:	fb0c f308 	mul.w	r3, ip, r8
 8000350:	42ab      	cmp	r3, r5
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x134>
 8000354:	19ed      	adds	r5, r5, r7
 8000356:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x132>
 800035c:	42ab      	cmp	r3, r5
 800035e:	f200 80d1 	bhi.w	8000504 <__udivmoddi4+0x2d4>
 8000362:	4680      	mov	r8, r0
 8000364:	1aed      	subs	r5, r5, r3
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb5 f0f2 	udiv	r0, r5, r2
 800036c:	fb02 5510 	mls	r5, r2, r0, r5
 8000370:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000374:	fb0c fc00 	mul.w	ip, ip, r0
 8000378:	45a4      	cmp	ip, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x15c>
 800037c:	19e4      	adds	r4, r4, r7
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x15a>
 8000384:	45a4      	cmp	ip, r4
 8000386:	f200 80b8 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 040c 	sub.w	r4, r4, ip
 8000390:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000394:	e79d      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000396:	4631      	mov	r1, r6
 8000398:	4630      	mov	r0, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	f1ce 0420 	rsb	r4, lr, #32
 80003a2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003aa:	fa20 f804 	lsr.w	r8, r0, r4
 80003ae:	0c3a      	lsrs	r2, r7, #16
 80003b0:	fa25 f404 	lsr.w	r4, r5, r4
 80003b4:	ea48 0803 	orr.w	r8, r8, r3
 80003b8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c0:	fb02 4411 	mls	r4, r2, r1, r4
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003cc:	fb01 f30c 	mul.w	r3, r1, ip
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x1bc>
 80003d8:	19ed      	adds	r5, r5, r7
 80003da:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003de:	f080 808a 	bcs.w	80004f6 <__udivmoddi4+0x2c6>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	f240 8087 	bls.w	80004f6 <__udivmoddi4+0x2c6>
 80003e8:	3902      	subs	r1, #2
 80003ea:	443d      	add	r5, r7
 80003ec:	1aeb      	subs	r3, r5, r3
 80003ee:	fa1f f588 	uxth.w	r5, r8
 80003f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003f6:	fb02 3310 	mls	r3, r2, r0, r3
 80003fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fe:	fb00 f30c 	mul.w	r3, r0, ip
 8000402:	42ab      	cmp	r3, r5
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1e6>
 8000406:	19ed      	adds	r5, r5, r7
 8000408:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800040c:	d26f      	bcs.n	80004ee <__udivmoddi4+0x2be>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d96d      	bls.n	80004ee <__udivmoddi4+0x2be>
 8000412:	3802      	subs	r0, #2
 8000414:	443d      	add	r5, r7
 8000416:	1aeb      	subs	r3, r5, r3
 8000418:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041c:	e78f      	b.n	800033e <__udivmoddi4+0x10e>
 800041e:	f1c1 0720 	rsb	r7, r1, #32
 8000422:	fa22 f807 	lsr.w	r8, r2, r7
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 f401 	lsl.w	r4, r5, r1
 800042c:	ea48 0303 	orr.w	r3, r8, r3
 8000430:	fa20 fe07 	lsr.w	lr, r0, r7
 8000434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000438:	40fd      	lsrs	r5, r7
 800043a:	ea4e 0e04 	orr.w	lr, lr, r4
 800043e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000442:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000446:	fb0c 5519 	mls	r5, ip, r9, r5
 800044a:	fa1f f883 	uxth.w	r8, r3
 800044e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000452:	fb09 f408 	mul.w	r4, r9, r8
 8000456:	42ac      	cmp	r4, r5
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x244>
 8000462:	18ed      	adds	r5, r5, r3
 8000464:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000468:	d243      	bcs.n	80004f2 <__udivmoddi4+0x2c2>
 800046a:	42ac      	cmp	r4, r5
 800046c:	d941      	bls.n	80004f2 <__udivmoddi4+0x2c2>
 800046e:	f1a9 0902 	sub.w	r9, r9, #2
 8000472:	441d      	add	r5, r3
 8000474:	1b2d      	subs	r5, r5, r4
 8000476:	fa1f fe8e 	uxth.w	lr, lr
 800047a:	fbb5 f0fc 	udiv	r0, r5, ip
 800047e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000482:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000486:	fb00 f808 	mul.w	r8, r0, r8
 800048a:	45a0      	cmp	r8, r4
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x26e>
 800048e:	18e4      	adds	r4, r4, r3
 8000490:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000494:	d229      	bcs.n	80004ea <__udivmoddi4+0x2ba>
 8000496:	45a0      	cmp	r8, r4
 8000498:	d927      	bls.n	80004ea <__udivmoddi4+0x2ba>
 800049a:	3802      	subs	r0, #2
 800049c:	441c      	add	r4, r3
 800049e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a2:	eba4 0408 	sub.w	r4, r4, r8
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	454c      	cmp	r4, r9
 80004ac:	46c6      	mov	lr, r8
 80004ae:	464d      	mov	r5, r9
 80004b0:	d315      	bcc.n	80004de <__udivmoddi4+0x2ae>
 80004b2:	d012      	beq.n	80004da <__udivmoddi4+0x2aa>
 80004b4:	b156      	cbz	r6, 80004cc <__udivmoddi4+0x29c>
 80004b6:	ebba 030e 	subs.w	r3, sl, lr
 80004ba:	eb64 0405 	sbc.w	r4, r4, r5
 80004be:	fa04 f707 	lsl.w	r7, r4, r7
 80004c2:	40cb      	lsrs	r3, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	40cc      	lsrs	r4, r1
 80004c8:	6037      	str	r7, [r6, #0]
 80004ca:	6074      	str	r4, [r6, #4]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	4618      	mov	r0, r3
 80004d4:	e6f8      	b.n	80002c8 <__udivmoddi4+0x98>
 80004d6:	4690      	mov	r8, r2
 80004d8:	e6e0      	b.n	800029c <__udivmoddi4+0x6c>
 80004da:	45c2      	cmp	sl, r8
 80004dc:	d2ea      	bcs.n	80004b4 <__udivmoddi4+0x284>
 80004de:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e2:	eb69 0503 	sbc.w	r5, r9, r3
 80004e6:	3801      	subs	r0, #1
 80004e8:	e7e4      	b.n	80004b4 <__udivmoddi4+0x284>
 80004ea:	4628      	mov	r0, r5
 80004ec:	e7d7      	b.n	800049e <__udivmoddi4+0x26e>
 80004ee:	4640      	mov	r0, r8
 80004f0:	e791      	b.n	8000416 <__udivmoddi4+0x1e6>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e7be      	b.n	8000474 <__udivmoddi4+0x244>
 80004f6:	4601      	mov	r1, r0
 80004f8:	e778      	b.n	80003ec <__udivmoddi4+0x1bc>
 80004fa:	3802      	subs	r0, #2
 80004fc:	443c      	add	r4, r7
 80004fe:	e745      	b.n	800038c <__udivmoddi4+0x15c>
 8000500:	4608      	mov	r0, r1
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xe6>
 8000504:	f1a8 0802 	sub.w	r8, r8, #2
 8000508:	443d      	add	r5, r7
 800050a:	e72b      	b.n	8000364 <__udivmoddi4+0x134>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x30>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000522:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f82f 	bl	8000590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f003 fe40 	bl	80041b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f003 fe1c 	bl	8004174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_IncTick+0x10>)
 8000546:	6811      	ldr	r1, [r2, #0]
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_IncTick+0x14>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	440b      	add	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20003fdc 	.word	0x20003fdc
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <HAL_GetTick+0x8>)
 800055e:	6818      	ldr	r0, [r3, #0]
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20003fdc 	.word	0x20003fdc

08000568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
 800056a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff fff6 	bl	800055c <HAL_GetTick>
 8000570:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000572:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000576:	d002      	beq.n	800057e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_Delay+0x24>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800057e:	f7ff ffed 	bl	800055c <HAL_GetTick>
 8000582:	1b40      	subs	r0, r0, r5
 8000584:	4284      	cmp	r4, r0
 8000586:	d8fa      	bhi.n	800057e <HAL_Delay+0x16>
  {
  }
}
 8000588:	bd38      	pop	{r3, r4, r5, pc}
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000592:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000594:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800059c:	0200      	lsls	r0, r0, #8
 800059e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80005a4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80005a8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005ac:	60d0      	str	r0, [r2, #12]
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005b4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_NVIC_SetPriority+0x5c>)
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005be:	f1c3 0407 	rsb	r4, r3, #7
 80005c2:	2c04      	cmp	r4, #4
 80005c4:	bf28      	it	cs
 80005c6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c8:	1d1d      	adds	r5, r3, #4
 80005ca:	2d06      	cmp	r5, #6
 80005cc:	d917      	bls.n	80005fe <HAL_NVIC_SetPriority+0x4a>
 80005ce:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	2501      	movs	r5, #1
 80005d2:	fa05 f404 	lsl.w	r4, r5, r4
 80005d6:	3c01      	subs	r4, #1
 80005d8:	4021      	ands	r1, r4
 80005da:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005dc:	fa05 f303 	lsl.w	r3, r5, r3
 80005e0:	3b01      	subs	r3, #1
 80005e2:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e4:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80005e6:	2800      	cmp	r0, #0
 80005e8:	db0b      	blt.n	8000602 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	0109      	lsls	r1, r1, #4
 80005ec:	b2c9      	uxtb	r1, r1
 80005ee:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005f2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005f6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005fa:	bc30      	pop	{r4, r5}
 80005fc:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	2300      	movs	r3, #0
 8000600:	e7e6      	b.n	80005d0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	f000 000f 	and.w	r0, r0, #15
 8000606:	0109      	lsls	r1, r1, #4
 8000608:	b2c9      	uxtb	r1, r1
 800060a:	4b02      	ldr	r3, [pc, #8]	; (8000614 <HAL_NVIC_SetPriority+0x60>)
 800060c:	5419      	strb	r1, [r3, r0]
 800060e:	e7f4      	b.n	80005fa <HAL_NVIC_SetPriority+0x46>
 8000610:	e000ed00 	.word	0xe000ed00
 8000614:	e000ed14 	.word	0xe000ed14

08000618 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000618:	2800      	cmp	r0, #0
 800061a:	db08      	blt.n	800062e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061c:	0942      	lsrs	r2, r0, #5
 800061e:	f000 001f 	and.w	r0, r0, #31
 8000622:	2301      	movs	r3, #1
 8000624:	fa03 f000 	lsl.w	r0, r3, r0
 8000628:	4b01      	ldr	r3, [pc, #4]	; (8000630 <HAL_NVIC_EnableIRQ+0x18>)
 800062a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800062e:	4770      	bx	lr
 8000630:	e000e100 	.word	0xe000e100

08000634 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000634:	7950      	ldrb	r0, [r2, #5]
 8000636:	7913      	ldrb	r3, [r2, #4]
 8000638:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <ETH_MACAddressConfig+0x28>)
 800063e:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000640:	78d0      	ldrb	r0, [r2, #3]
 8000642:	7893      	ldrb	r3, [r2, #2]
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800064a:	7850      	ldrb	r0, [r2, #1]
 800064c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000650:	7812      	ldrb	r2, [r2, #0]
 8000652:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000654:	4a02      	ldr	r2, [pc, #8]	; (8000660 <ETH_MACAddressConfig+0x2c>)
 8000656:	508b      	str	r3, [r1, r2]
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40028040 	.word	0x40028040
 8000660:	40028044 	.word	0x40028044

08000664 <ETH_MACDMAConfig>:
{
 8000664:	b570      	push	{r4, r5, r6, lr}
 8000666:	b09e      	sub	sp, #120	; 0x78
 8000668:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800066a:	b129      	cbz	r1, 8000678 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800066c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000670:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000672:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000676:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000678:	69e3      	ldr	r3, [r4, #28]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d16a      	bne.n	8000754 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800067e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000682:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000684:	6821      	ldr	r1, [r4, #0]
 8000686:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000688:	4a39      	ldr	r2, [pc, #228]	; (8000770 <ETH_MACDMAConfig+0x10c>)
 800068a:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 800068c:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 800068e:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8000690:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8000692:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8000694:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8000696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800069a:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800069c:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800069e:	6823      	ldr	r3, [r4, #0]
 80006a0:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff ff60 	bl	8000568 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80006ac:	6823      	ldr	r3, [r4, #0]
 80006ae:	2240      	movs	r2, #64	; 0x40
 80006b0:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 80006b2:	6823      	ldr	r3, [r4, #0]
 80006b4:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f7ff ff56 	bl	8000568 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80006bc:	6823      	ldr	r3, [r4, #0]
 80006be:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80006c0:	6823      	ldr	r3, [r4, #0]
 80006c2:	2500      	movs	r5, #0
 80006c4:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80006c6:	6823      	ldr	r3, [r4, #0]
 80006c8:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 80006ca:	6822      	ldr	r2, [r4, #0]
 80006cc:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80006ce:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 80006d2:	041b      	lsls	r3, r3, #16
 80006d4:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80006d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80006da:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 80006dc:	6823      	ldr	r3, [r4, #0]
 80006de:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006e0:	2001      	movs	r0, #1
 80006e2:	f7ff ff41 	bl	8000568 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80006e6:	6823      	ldr	r3, [r4, #0]
 80006e8:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80006ea:	6823      	ldr	r3, [r4, #0]
 80006ec:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80006ee:	6823      	ldr	r3, [r4, #0]
 80006f0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff ff38 	bl	8000568 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80006f8:	6823      	ldr	r3, [r4, #0]
 80006fa:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80006fc:	6822      	ldr	r2, [r4, #0]
 80006fe:	f241 0518 	movw	r5, #4120	; 0x1018
 8000702:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <ETH_MACDMAConfig+0x110>)
 8000706:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000708:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800070c:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000710:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000712:	6823      	ldr	r3, [r4, #0]
 8000714:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000716:	2001      	movs	r0, #1
 8000718:	f7ff ff26 	bl	8000568 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800071c:	6823      	ldr	r3, [r4, #0]
 800071e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000726:	4a14      	ldr	r2, [pc, #80]	; (8000778 <ETH_MACDMAConfig+0x114>)
 8000728:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 800072a:	6823      	ldr	r3, [r4, #0]
 800072c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000730:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000732:	2001      	movs	r0, #1
 8000734:	f7ff ff18 	bl	8000568 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8000738:	6823      	ldr	r3, [r4, #0]
 800073a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073e:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000740:	69a3      	ldr	r3, [r4, #24]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d009      	beq.n	800075a <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000746:	6962      	ldr	r2, [r4, #20]
 8000748:	2100      	movs	r1, #0
 800074a:	4620      	mov	r0, r4
 800074c:	f7ff ff72 	bl	8000634 <ETH_MACAddressConfig>
}
 8000750:	b01e      	add	sp, #120	; 0x78
 8000752:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	9307      	str	r3, [sp, #28]
 8000758:	e794      	b.n	8000684 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800075a:	6821      	ldr	r1, [r4, #0]
 800075c:	f241 021c 	movw	r2, #4124	; 0x101c
 8000760:	588b      	ldr	r3, [r1, r2]
 8000762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076a:	508b      	str	r3, [r1, r2]
 800076c:	e7eb      	b.n	8000746 <ETH_MACDMAConfig+0xe2>
 800076e:	bf00      	nop
 8000770:	ff20810f 	.word	0xff20810f
 8000774:	f8de3f23 	.word	0xf8de3f23
 8000778:	02c12080 	.word	0x02c12080

0800077c <HAL_ETH_ReadPHYRegister>:
{
 800077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800077e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b82      	cmp	r3, #130	; 0x82
 8000786:	d101      	bne.n	800078c <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8000788:	2002      	movs	r0, #2
}
 800078a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800078c:	4616      	mov	r6, r2
 800078e:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000790:	2382      	movs	r3, #130	; 0x82
 8000792:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000796:	6802      	ldr	r2, [r0, #0]
 8000798:	6914      	ldr	r4, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800079a:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800079e:	8a03      	ldrh	r3, [r0, #16]
 80007a0:	02db      	lsls	r3, r3, #11
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80007a6:	0189      	lsls	r1, r1, #6
 80007a8:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80007ac:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80007ae:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 80007b2:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 80007b4:	f7ff fed2 	bl	800055c <HAL_GetTick>
 80007b8:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80007ba:	f014 0f01 	tst.w	r4, #1
 80007be:	d010      	beq.n	80007e2 <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80007c0:	f7ff fecc 	bl	800055c <HAL_GetTick>
 80007c4:	1bc0      	subs	r0, r0, r7
 80007c6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80007ca:	d202      	bcs.n	80007d2 <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 80007cc:	682b      	ldr	r3, [r5, #0]
 80007ce:	691c      	ldr	r4, [r3, #16]
 80007d0:	e7f3      	b.n	80007ba <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 80007d2:	2301      	movs	r3, #1
 80007d4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80007d8:	2300      	movs	r3, #0
 80007da:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80007de:	2003      	movs	r0, #3
 80007e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80007e2:	682b      	ldr	r3, [r5, #0]
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80007ea:	2301      	movs	r3, #1
 80007ec:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 80007f0:	2000      	movs	r0, #0
 80007f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080007f4 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80007f4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b42      	cmp	r3, #66	; 0x42
 80007fc:	d101      	bne.n	8000802 <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 80007fe:	2002      	movs	r0, #2
 8000800:	4770      	bx	lr
{
 8000802:	b570      	push	{r4, r5, r6, lr}
 8000804:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000806:	2342      	movs	r3, #66	; 0x42
 8000808:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 800080c:	6800      	ldr	r0, [r0, #0]
 800080e:	6904      	ldr	r4, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000810:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000814:	8a2b      	ldrh	r3, [r5, #16]
 8000816:	02db      	lsls	r3, r3, #11
 8000818:	b29b      	uxth	r3, r3
 800081a:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800081c:	0189      	lsls	r1, r1, #6
 800081e:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8000822:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000824:	f044 0403 	orr.w	r4, r4, #3
 8000828:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800082a:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 800082c:	682b      	ldr	r3, [r5, #0]
 800082e:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000830:	f7ff fe94 	bl	800055c <HAL_GetTick>
 8000834:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000836:	f014 0f01 	tst.w	r4, #1
 800083a:	d010      	beq.n	800085e <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800083c:	f7ff fe8e 	bl	800055c <HAL_GetTick>
 8000840:	1b80      	subs	r0, r0, r6
 8000842:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000846:	d202      	bcs.n	800084e <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000848:	682b      	ldr	r3, [r5, #0]
 800084a:	691c      	ldr	r4, [r3, #16]
 800084c:	e7f3      	b.n	8000836 <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 800084e:	2301      	movs	r3, #1
 8000850:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000854:	2300      	movs	r3, #0
 8000856:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 800085a:	2003      	movs	r0, #3
 800085c:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 800085e:	2301      	movs	r3, #1
 8000860:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8000864:	2000      	movs	r0, #0
 8000866:	bd70      	pop	{r4, r5, r6, pc}

08000868 <HAL_ETH_Init>:
{
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800086c:	2300      	movs	r3, #0
 800086e:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8000870:	2800      	cmp	r0, #0
 8000872:	f000 810e 	beq.w	8000a92 <HAL_ETH_Init+0x22a>
 8000876:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8000878:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800087c:	2b00      	cmp	r3, #0
 800087e:	d034      	beq.n	80008ea <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	4b84      	ldr	r3, [pc, #528]	; (8000a98 <HAL_ETH_Init+0x230>)
 8000886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000888:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800088c:	645a      	str	r2, [r3, #68]	; 0x44
 800088e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000898:	4b80      	ldr	r3, [pc, #512]	; (8000a9c <HAL_ETH_Init+0x234>)
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80008a0:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	6a21      	ldr	r1, [r4, #32]
 80008a6:	430a      	orrs	r2, r1
 80008a8:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	f042 0201 	orr.w	r2, r2, #1
 80008b6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80008b8:	f7ff fe50 	bl	800055c <HAL_GetTick>
 80008bc:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008be:	6823      	ldr	r3, [r4, #0]
 80008c0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80008c4:	6812      	ldr	r2, [r2, #0]
 80008c6:	f012 0f01 	tst.w	r2, #1
 80008ca:	d013      	beq.n	80008f4 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80008cc:	f7ff fe46 	bl	800055c <HAL_GetTick>
 80008d0:	1b40      	subs	r0, r0, r5
 80008d2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80008d6:	d9f2      	bls.n	80008be <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80008d8:	2503      	movs	r5, #3
 80008da:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80008de:	2300      	movs	r3, #0
 80008e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80008e4:	4628      	mov	r0, r5
 80008e6:	b002      	add	sp, #8
 80008e8:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 80008ea:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80008ee:	f002 feb3 	bl	8003658 <HAL_ETH_MspInit>
 80008f2:	e7c5      	b.n	8000880 <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80008f4:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80008f6:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 80008fa:	f001 fa8f 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80008fe:	4b68      	ldr	r3, [pc, #416]	; (8000aa0 <HAL_ETH_Init+0x238>)
 8000900:	4403      	add	r3, r0
 8000902:	4a68      	ldr	r2, [pc, #416]	; (8000aa4 <HAL_ETH_Init+0x23c>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d855      	bhi.n	80009b4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000908:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000910:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000914:	2100      	movs	r1, #0
 8000916:	4620      	mov	r0, r4
 8000918:	f7ff ff6c 	bl	80007f4 <HAL_ETH_WritePHYRegister>
 800091c:	4605      	mov	r5, r0
 800091e:	2800      	cmp	r0, #0
 8000920:	d160      	bne.n	80009e4 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8000922:	20ff      	movs	r0, #255	; 0xff
 8000924:	f7ff fe20 	bl	8000568 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000928:	6863      	ldr	r3, [r4, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	f000 8091 	beq.w	8000a52 <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8000930:	f7ff fe14 	bl	800055c <HAL_GetTick>
 8000934:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000936:	aa01      	add	r2, sp, #4
 8000938:	2101      	movs	r1, #1
 800093a:	4620      	mov	r0, r4
 800093c:	f7ff ff1e 	bl	800077c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000940:	f7ff fe0c 	bl	800055c <HAL_GetTick>
 8000944:	1b80      	subs	r0, r0, r6
 8000946:	f241 3388 	movw	r3, #5000	; 0x1388
 800094a:	4298      	cmp	r0, r3
 800094c:	d852      	bhi.n	80009f4 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800094e:	9b01      	ldr	r3, [sp, #4]
 8000950:	f013 0f04 	tst.w	r3, #4
 8000954:	d0ef      	beq.n	8000936 <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000956:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800095a:	2100      	movs	r1, #0
 800095c:	4620      	mov	r0, r4
 800095e:	f7ff ff49 	bl	80007f4 <HAL_ETH_WritePHYRegister>
 8000962:	2800      	cmp	r0, #0
 8000964:	d152      	bne.n	8000a0c <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8000966:	f7ff fdf9 	bl	800055c <HAL_GetTick>
 800096a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800096c:	aa01      	add	r2, sp, #4
 800096e:	2101      	movs	r1, #1
 8000970:	4620      	mov	r0, r4
 8000972:	f7ff ff03 	bl	800077c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000976:	f7ff fdf1 	bl	800055c <HAL_GetTick>
 800097a:	1b80      	subs	r0, r0, r6
 800097c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000980:	4298      	cmp	r0, r3
 8000982:	d84b      	bhi.n	8000a1c <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000984:	9b01      	ldr	r3, [sp, #4]
 8000986:	f013 0f20 	tst.w	r3, #32
 800098a:	d0ef      	beq.n	800096c <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800098c:	aa01      	add	r2, sp, #4
 800098e:	211f      	movs	r1, #31
 8000990:	4620      	mov	r0, r4
 8000992:	f7ff fef3 	bl	800077c <HAL_ETH_ReadPHYRegister>
 8000996:	2800      	cmp	r0, #0
 8000998:	d14c      	bne.n	8000a34 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800099a:	9b01      	ldr	r3, [sp, #4]
 800099c:	f013 0f10 	tst.w	r3, #16
 80009a0:	d050      	beq.n	8000a44 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80009a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009a6:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80009a8:	f013 0f04 	tst.w	r3, #4
 80009ac:	d04d      	beq.n	8000a4a <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 80009ae:	2300      	movs	r3, #0
 80009b0:	60a3      	str	r3, [r4, #8]
 80009b2:	e05e      	b.n	8000a72 <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80009b4:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <HAL_ETH_Init+0x240>)
 80009b6:	4403      	add	r3, r0
 80009b8:	4a3c      	ldr	r2, [pc, #240]	; (8000aac <HAL_ETH_Init+0x244>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d802      	bhi.n	80009c4 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80009be:	f045 050c 	orr.w	r5, r5, #12
 80009c2:	e7a3      	b.n	800090c <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80009c4:	4b3a      	ldr	r3, [pc, #232]	; (8000ab0 <HAL_ETH_Init+0x248>)
 80009c6:	4403      	add	r3, r0
 80009c8:	4a3a      	ldr	r2, [pc, #232]	; (8000ab4 <HAL_ETH_Init+0x24c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d99e      	bls.n	800090c <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80009ce:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <HAL_ETH_Init+0x250>)
 80009d0:	4403      	add	r3, r0
 80009d2:	4a3a      	ldr	r2, [pc, #232]	; (8000abc <HAL_ETH_Init+0x254>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d802      	bhi.n	80009de <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80009d8:	f045 0504 	orr.w	r5, r5, #4
 80009dc:	e796      	b.n	800090c <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80009de:	f045 0510 	orr.w	r5, r5, #16
 80009e2:	e793      	b.n	800090c <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 80009e4:	2101      	movs	r1, #1
 80009e6:	4620      	mov	r0, r4
 80009e8:	f7ff fe3c 	bl	8000664 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 80009ec:	2501      	movs	r5, #1
 80009ee:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 80009f2:	e777      	b.n	80008e4 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 80009f4:	2101      	movs	r1, #1
 80009f6:	4620      	mov	r0, r4
 80009f8:	f7ff fe34 	bl	8000664 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80009fc:	2301      	movs	r3, #1
 80009fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000a02:	2300      	movs	r3, #0
 8000a04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000a08:	2503      	movs	r5, #3
 8000a0a:	e76b      	b.n	80008e4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4620      	mov	r0, r4
 8000a10:	f7ff fe28 	bl	8000664 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000a14:	2501      	movs	r5, #1
 8000a16:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000a1a:	e763      	b.n	80008e4 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f7ff fe20 	bl	8000664 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000a24:	2301      	movs	r3, #1
 8000a26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000a30:	2503      	movs	r5, #3
 8000a32:	e757      	b.n	80008e4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000a34:	2101      	movs	r1, #1
 8000a36:	4620      	mov	r0, r4
 8000a38:	f7ff fe14 	bl	8000664 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000a3c:	2501      	movs	r5, #1
 8000a3e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000a42:	e74f      	b.n	80008e4 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000a44:	2200      	movs	r2, #0
 8000a46:	60e2      	str	r2, [r4, #12]
 8000a48:	e7ae      	b.n	80009a8 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 8000a4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a4e:	60a3      	str	r3, [r4, #8]
 8000a50:	e00f      	b.n	8000a72 <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000a52:	68e3      	ldr	r3, [r4, #12]
 8000a54:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000a58:	68a3      	ldr	r3, [r4, #8]
 8000a5a:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	2100      	movs	r1, #0
 8000a62:	4620      	mov	r0, r4
 8000a64:	f7ff fec6 	bl	80007f4 <HAL_ETH_WritePHYRegister>
 8000a68:	b958      	cbnz	r0, 8000a82 <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000a6a:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000a6e:	f7ff fd7b 	bl	8000568 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8000a72:	2100      	movs	r1, #0
 8000a74:	4620      	mov	r0, r4
 8000a76:	f7ff fdf5 	bl	8000664 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000a80:	e730      	b.n	80008e4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000a82:	2101      	movs	r1, #1
 8000a84:	4620      	mov	r0, r4
 8000a86:	f7ff fded 	bl	8000664 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000a8a:	2501      	movs	r5, #1
 8000a8c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000a90:	e728      	b.n	80008e4 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 8000a92:	2501      	movs	r5, #1
 8000a94:	e726      	b.n	80008e4 <HAL_ETH_Init+0x7c>
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40013800 	.word	0x40013800
 8000aa0:	feced300 	.word	0xfeced300
 8000aa4:	00e4e1bf 	.word	0x00e4e1bf
 8000aa8:	fde9f140 	.word	0xfde9f140
 8000aac:	017d783f 	.word	0x017d783f
 8000ab0:	fc6c7900 	.word	0xfc6c7900
 8000ab4:	026259ff 	.word	0x026259ff
 8000ab8:	fa0a1f00 	.word	0xfa0a1f00
 8000abc:	02faf07f 	.word	0x02faf07f

08000ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ac2:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ac4:	2400      	movs	r4, #0
 8000ac6:	e04b      	b.n	8000b60 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ac8:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000acc:	f10e 0e08 	add.w	lr, lr, #8
 8000ad0:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ad4:	f004 0607 	and.w	r6, r4, #7
 8000ad8:	00b6      	lsls	r6, r6, #2
 8000ada:	270f      	movs	r7, #15
 8000adc:	40b7      	lsls	r7, r6
 8000ade:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ae2:	690f      	ldr	r7, [r1, #16]
 8000ae4:	fa07 f606 	lsl.w	r6, r7, r6
 8000ae8:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000aea:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000aee:	e046      	b.n	8000b7e <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000af0:	2609      	movs	r6, #9
 8000af2:	e000      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000af4:	2600      	movs	r6, #0
 8000af6:	fa06 f60e 	lsl.w	r6, r6, lr
 8000afa:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000afc:	3302      	adds	r3, #2
 8000afe:	4e64      	ldr	r6, [pc, #400]	; (8000c90 <HAL_GPIO_Init+0x1d0>)
 8000b00:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b04:	4b63      	ldr	r3, [pc, #396]	; (8000c94 <HAL_GPIO_Init+0x1d4>)
 8000b06:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b08:	43eb      	mvns	r3, r5
 8000b0a:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b0e:	684f      	ldr	r7, [r1, #4]
 8000b10:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000b14:	d001      	beq.n	8000b1a <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8000b16:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000b1a:	4a5e      	ldr	r2, [pc, #376]	; (8000c94 <HAL_GPIO_Init+0x1d4>)
 8000b1c:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000b1e:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000b20:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b24:	684f      	ldr	r7, [r1, #4]
 8000b26:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000b2a:	d001      	beq.n	8000b30 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8000b2c:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000b30:	4a58      	ldr	r2, [pc, #352]	; (8000c94 <HAL_GPIO_Init+0x1d4>)
 8000b32:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b34:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b36:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b3a:	684f      	ldr	r7, [r1, #4]
 8000b3c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000b40:	d001      	beq.n	8000b46 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8000b42:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8000b46:	4a53      	ldr	r2, [pc, #332]	; (8000c94 <HAL_GPIO_Init+0x1d4>)
 8000b48:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000b4a:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000b4c:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b4e:	684e      	ldr	r6, [r1, #4]
 8000b50:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000b54:	d001      	beq.n	8000b5a <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8000b56:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8000b5a:	4a4e      	ldr	r2, [pc, #312]	; (8000c94 <HAL_GPIO_Init+0x1d4>)
 8000b5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b5e:	3401      	adds	r4, #1
 8000b60:	2c0f      	cmp	r4, #15
 8000b62:	f200 8092 	bhi.w	8000c8a <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8000b66:	2301      	movs	r3, #1
 8000b68:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6a:	680a      	ldr	r2, [r1, #0]
 8000b6c:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d1f4      	bne.n	8000b5e <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b74:	684a      	ldr	r2, [r1, #4]
 8000b76:	2a02      	cmp	r2, #2
 8000b78:	d0a6      	beq.n	8000ac8 <HAL_GPIO_Init+0x8>
 8000b7a:	2a12      	cmp	r2, #18
 8000b7c:	d0a4      	beq.n	8000ac8 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000b7e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b80:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b8a:	43d2      	mvns	r2, r2
 8000b8c:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b8e:	684f      	ldr	r7, [r1, #4]
 8000b90:	f007 0703 	and.w	r7, r7, #3
 8000b94:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b98:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000b9a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b9c:	684e      	ldr	r6, [r1, #4]
 8000b9e:	1e77      	subs	r7, r6, #1
 8000ba0:	2f01      	cmp	r7, #1
 8000ba2:	d903      	bls.n	8000bac <HAL_GPIO_Init+0xec>
 8000ba4:	2e11      	cmp	r6, #17
 8000ba6:	d001      	beq.n	8000bac <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba8:	2e12      	cmp	r6, #18
 8000baa:	d10f      	bne.n	8000bcc <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8000bac:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bae:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bb0:	68cf      	ldr	r7, [r1, #12]
 8000bb2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bb6:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000bb8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bba:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bbc:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bc0:	684e      	ldr	r6, [r1, #4]
 8000bc2:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000bc6:	40a6      	lsls	r6, r4
 8000bc8:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000bca:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8000bcc:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bce:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bd0:	688b      	ldr	r3, [r1, #8]
 8000bd2:	fa03 f30e 	lsl.w	r3, r3, lr
 8000bd6:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8000bd8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bda:	684b      	ldr	r3, [r1, #4]
 8000bdc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000be0:	d0bd      	beq.n	8000b5e <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <HAL_GPIO_Init+0x1d8>)
 8000be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bee:	645a      	str	r2, [r3, #68]	; 0x44
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bfa:	08a3      	lsrs	r3, r4, #2
 8000bfc:	1c9e      	adds	r6, r3, #2
 8000bfe:	4a24      	ldr	r2, [pc, #144]	; (8000c90 <HAL_GPIO_Init+0x1d0>)
 8000c00:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c04:	f004 0603 	and.w	r6, r4, #3
 8000c08:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8000c0c:	260f      	movs	r6, #15
 8000c0e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c12:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c16:	4f21      	ldr	r7, [pc, #132]	; (8000c9c <HAL_GPIO_Init+0x1dc>)
 8000c18:	42b8      	cmp	r0, r7
 8000c1a:	f43f af6b 	beq.w	8000af4 <HAL_GPIO_Init+0x34>
 8000c1e:	4e20      	ldr	r6, [pc, #128]	; (8000ca0 <HAL_GPIO_Init+0x1e0>)
 8000c20:	42b0      	cmp	r0, r6
 8000c22:	d022      	beq.n	8000c6a <HAL_GPIO_Init+0x1aa>
 8000c24:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c28:	42b0      	cmp	r0, r6
 8000c2a:	d020      	beq.n	8000c6e <HAL_GPIO_Init+0x1ae>
 8000c2c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c30:	42b0      	cmp	r0, r6
 8000c32:	d01e      	beq.n	8000c72 <HAL_GPIO_Init+0x1b2>
 8000c34:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c38:	42b0      	cmp	r0, r6
 8000c3a:	d01c      	beq.n	8000c76 <HAL_GPIO_Init+0x1b6>
 8000c3c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c40:	42b0      	cmp	r0, r6
 8000c42:	d01a      	beq.n	8000c7a <HAL_GPIO_Init+0x1ba>
 8000c44:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c48:	42b0      	cmp	r0, r6
 8000c4a:	d018      	beq.n	8000c7e <HAL_GPIO_Init+0x1be>
 8000c4c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c50:	42b0      	cmp	r0, r6
 8000c52:	d016      	beq.n	8000c82 <HAL_GPIO_Init+0x1c2>
 8000c54:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c58:	42b0      	cmp	r0, r6
 8000c5a:	d014      	beq.n	8000c86 <HAL_GPIO_Init+0x1c6>
 8000c5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c60:	42b0      	cmp	r0, r6
 8000c62:	f43f af45 	beq.w	8000af0 <HAL_GPIO_Init+0x30>
 8000c66:	260a      	movs	r6, #10
 8000c68:	e745      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c6a:	2601      	movs	r6, #1
 8000c6c:	e743      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c6e:	2602      	movs	r6, #2
 8000c70:	e741      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c72:	2603      	movs	r6, #3
 8000c74:	e73f      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c76:	2604      	movs	r6, #4
 8000c78:	e73d      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c7a:	2605      	movs	r6, #5
 8000c7c:	e73b      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c7e:	2606      	movs	r6, #6
 8000c80:	e739      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c82:	2607      	movs	r6, #7
 8000c84:	e737      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c86:	2608      	movs	r6, #8
 8000c88:	e735      	b.n	8000af6 <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 8000c8a:	b003      	add	sp, #12
 8000c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40013800 	.word	0x40013800
 8000c94:	40013c00 	.word	0x40013c00
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020400 	.word	0x40020400

08000ca4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ca4:	6903      	ldr	r3, [r0, #16]
 8000ca6:	4219      	tst	r1, r3
 8000ca8:	d101      	bne.n	8000cae <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000caa:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000cac:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4770      	bx	lr

08000cb2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cb2:	b912      	cbnz	r2, 8000cba <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cb4:	0409      	lsls	r1, r1, #16
 8000cb6:	6181      	str	r1, [r0, #24]
 8000cb8:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000cba:	6181      	str	r1, [r0, #24]
 8000cbc:	4770      	bx	lr

08000cbe <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000cbe:	6803      	ldr	r3, [r0, #0]
 8000cc0:	695a      	ldr	r2, [r3, #20]
 8000cc2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000cc6:	d011      	beq.n	8000cec <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000ccc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cd8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000cdc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000cde:	f042 0204 	orr.w	r2, r2, #4
 8000ce2:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ce4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8000ce8:	2001      	movs	r0, #1
 8000cea:	4770      	bx	lr
  }
  return HAL_OK;
 8000cec:	2000      	movs	r0, #0
}
 8000cee:	4770      	bx	lr

08000cf0 <I2C_WaitOnFlagUntilTimeout>:
{
 8000cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	460c      	mov	r4, r1
 8000cf6:	4617      	mov	r7, r2
 8000cf8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000cfa:	e022      	b.n	8000d42 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000cfc:	f7ff fc2e 	bl	800055c <HAL_GetTick>
 8000d00:	9b06      	ldr	r3, [sp, #24]
 8000d02:	1ac0      	subs	r0, r0, r3
 8000d04:	4285      	cmp	r5, r0
 8000d06:	d300      	bcc.n	8000d0a <I2C_WaitOnFlagUntilTimeout+0x1a>
 8000d08:	b9dd      	cbnz	r5, 8000d42 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000d0e:	2220      	movs	r2, #32
 8000d10:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000d14:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000d18:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8000d1a:	f042 0220 	orr.w	r2, r2, #32
 8000d1e:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000d20:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8000d24:	2001      	movs	r0, #1
 8000d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d28:	6833      	ldr	r3, [r6, #0]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	ea24 0303 	bic.w	r3, r4, r3
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	fab3 f383 	clz	r3, r3
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	42bb      	cmp	r3, r7
 8000d3a:	d10f      	bne.n	8000d5c <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8000d3c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8000d40:	d1dc      	bne.n	8000cfc <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d42:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d0ee      	beq.n	8000d28 <I2C_WaitOnFlagUntilTimeout+0x38>
 8000d4a:	6833      	ldr	r3, [r6, #0]
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	ea24 0303 	bic.w	r3, r4, r3
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	fab3 f383 	clz	r3, r3
 8000d58:	095b      	lsrs	r3, r3, #5
 8000d5a:	e7ed      	b.n	8000d38 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8000d5c:	2000      	movs	r0, #0
}
 8000d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d62:	4604      	mov	r4, r0
 8000d64:	460d      	mov	r5, r1
 8000d66:	4616      	mov	r6, r2
 8000d68:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000d6a:	e03c      	b.n	8000de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d72:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000d7a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d80:	2220      	movs	r2, #32
 8000d82:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d86:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000d8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d8c:	f042 0204 	orr.w	r2, r2, #4
 8000d90:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000d92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8000d96:	2001      	movs	r0, #1
 8000d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d9a:	f7ff fbdf 	bl	800055c <HAL_GetTick>
 8000d9e:	1bc0      	subs	r0, r0, r7
 8000da0:	4286      	cmp	r6, r0
 8000da2:	d300      	bcc.n	8000da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8000da4:	b9fe      	cbnz	r6, 8000de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000daa:	2220      	movs	r2, #32
 8000dac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000db0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000db4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000db6:	f042 0220 	orr.w	r2, r2, #32
 8000dba:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000dbc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	ea25 0303 	bic.w	r3, r5, r3
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3300      	adds	r3, #0
 8000dd0:	bf18      	it	ne
 8000dd2:	2301      	movne	r3, #1
 8000dd4:	b1a3      	cbz	r3, 8000e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	695a      	ldr	r2, [r3, #20]
 8000dda:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000dde:	d1c5      	bne.n	8000d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8000de0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8000de4:	d1d9      	bne.n	8000d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000de6:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d0ea      	beq.n	8000dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	ea25 0303 	bic.w	r3, r5, r3
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	3300      	adds	r3, #0
 8000dfa:	bf18      	it	ne
 8000dfc:	2301      	movne	r3, #1
 8000dfe:	e7e9      	b.n	8000dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8000e00:	2000      	movs	r0, #0
}
 8000e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000e04 <I2C_MasterRequestWrite>:
{
 8000e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e06:	b083      	sub	sp, #12
 8000e08:	4604      	mov	r4, r0
 8000e0a:	460f      	mov	r7, r1
 8000e0c:	4615      	mov	r5, r2
 8000e0e:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000e10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000e12:	2b08      	cmp	r3, #8
 8000e14:	d00d      	beq.n	8000e32 <I2C_MasterRequestWrite+0x2e>
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d00b      	beq.n	8000e32 <I2C_MasterRequestWrite+0x2e>
 8000e1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e1e:	d008      	beq.n	8000e32 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000e20:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000e22:	2b12      	cmp	r3, #18
 8000e24:	d10a      	bne.n	8000e3c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000e26:	6802      	ldr	r2, [r0, #0]
 8000e28:	6813      	ldr	r3, [r2, #0]
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e004      	b.n	8000e3c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000e32:	6822      	ldr	r2, [r4, #0]
 8000e34:	6813      	ldr	r3, [r2, #0]
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e3c:	9600      	str	r6, [sp, #0]
 8000e3e:	462b      	mov	r3, r5
 8000e40:	2200      	movs	r2, #0
 8000e42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000e46:	4620      	mov	r0, r4
 8000e48:	f7ff ff52 	bl	8000cf0 <I2C_WaitOnFlagUntilTimeout>
 8000e4c:	bb18      	cbnz	r0, 8000e96 <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e4e:	6923      	ldr	r3, [r4, #16]
 8000e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e54:	d011      	beq.n	8000e7a <I2C_MasterRequestWrite+0x76>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000e56:	6822      	ldr	r2, [r4, #0]
 8000e58:	11fb      	asrs	r3, r7, #7
 8000e5a:	f003 0306 	and.w	r3, r3, #6
 8000e5e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000e62:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000e64:	4633      	mov	r3, r6
 8000e66:	462a      	mov	r2, r5
 8000e68:	490e      	ldr	r1, [pc, #56]	; (8000ea4 <I2C_MasterRequestWrite+0xa0>)
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f7ff ff78 	bl	8000d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000e70:	b9a8      	cbnz	r0, 8000e9e <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	b2ff      	uxtb	r7, r7
 8000e76:	611f      	str	r7, [r3, #16]
 8000e78:	e003      	b.n	8000e82 <I2C_MasterRequestWrite+0x7e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000e80:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000e82:	4633      	mov	r3, r6
 8000e84:	462a      	mov	r2, r5
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <I2C_MasterRequestWrite+0xa4>)
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff ff69 	bl	8000d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	b110      	cbz	r0, 8000e98 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e000      	b.n	8000e98 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	b003      	add	sp, #12
 8000e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e7fa      	b.n	8000e98 <I2C_MasterRequestWrite+0x94>
 8000ea2:	bf00      	nop
 8000ea4:	00010008 	.word	0x00010008
 8000ea8:	00010002 	.word	0x00010002

08000eac <I2C_MasterRequestRead>:
{
 8000eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	460d      	mov	r5, r1
 8000eb6:	4616      	mov	r6, r2
 8000eb8:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000eba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000ebc:	6801      	ldr	r1, [r0, #0]
 8000ebe:	680b      	ldr	r3, [r1, #0]
 8000ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec4:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000ec6:	2a08      	cmp	r2, #8
 8000ec8:	d00d      	beq.n	8000ee6 <I2C_MasterRequestRead+0x3a>
 8000eca:	2a01      	cmp	r2, #1
 8000ecc:	d00b      	beq.n	8000ee6 <I2C_MasterRequestRead+0x3a>
 8000ece:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000ed2:	d008      	beq.n	8000ee6 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8000ed4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000ed6:	2b11      	cmp	r3, #17
 8000ed8:	d10a      	bne.n	8000ef0 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000eda:	6802      	ldr	r2, [r0, #0]
 8000edc:	6813      	ldr	r3, [r2, #0]
 8000ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e004      	b.n	8000ef0 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ee6:	6822      	ldr	r2, [r4, #0]
 8000ee8:	6813      	ldr	r3, [r2, #0]
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ef0:	9700      	str	r7, [sp, #0]
 8000ef2:	4633      	mov	r3, r6
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff fef8 	bl	8000cf0 <I2C_WaitOnFlagUntilTimeout>
 8000f00:	2800      	cmp	r0, #0
 8000f02:	d148      	bne.n	8000f96 <I2C_MasterRequestRead+0xea>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f04:	6923      	ldr	r3, [r4, #16]
 8000f06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f0a:	d010      	beq.n	8000f2e <I2C_MasterRequestRead+0x82>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000f0c:	6823      	ldr	r3, [r4, #0]
 8000f0e:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8000f12:	f008 0806 	and.w	r8, r8, #6
 8000f16:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8000f1a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4632      	mov	r2, r6
 8000f20:	4920      	ldr	r1, [pc, #128]	; (8000fa4 <I2C_MasterRequestRead+0xf8>)
 8000f22:	4620      	mov	r0, r4
 8000f24:	f7ff ff1c 	bl	8000d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f28:	b180      	cbz	r0, 8000f4c <I2C_MasterRequestRead+0xa0>
      return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e034      	b.n	8000f98 <I2C_MasterRequestRead+0xec>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000f2e:	6823      	ldr	r3, [r4, #0]
 8000f30:	f045 0501 	orr.w	r5, r5, #1
 8000f34:	b2ed      	uxtb	r5, r5
 8000f36:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4632      	mov	r2, r6
 8000f3c:	491a      	ldr	r1, [pc, #104]	; (8000fa8 <I2C_MasterRequestRead+0xfc>)
 8000f3e:	4620      	mov	r0, r4
 8000f40:	f7ff ff0e 	bl	8000d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b338      	cbz	r0, 8000f98 <I2C_MasterRequestRead+0xec>
    return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e025      	b.n	8000f98 <I2C_MasterRequestRead+0xec>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	b2ed      	uxtb	r5, r5
 8000f50:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4632      	mov	r2, r6
 8000f56:	4914      	ldr	r1, [pc, #80]	; (8000fa8 <I2C_MasterRequestRead+0xfc>)
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f7ff ff01 	bl	8000d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f5e:	b108      	cbz	r0, 8000f64 <I2C_MasterRequestRead+0xb8>
      return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e019      	b.n	8000f98 <I2C_MasterRequestRead+0xec>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f64:	2200      	movs	r2, #0
 8000f66:	9203      	str	r2, [sp, #12]
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	6959      	ldr	r1, [r3, #20]
 8000f6c:	9103      	str	r1, [sp, #12]
 8000f6e:	6999      	ldr	r1, [r3, #24]
 8000f70:	9103      	str	r1, [sp, #12]
 8000f72:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f74:	6819      	ldr	r1, [r3, #0]
 8000f76:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000f7a:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f7c:	9700      	str	r7, [sp, #0]
 8000f7e:	4633      	mov	r3, r6
 8000f80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f84:	4620      	mov	r0, r4
 8000f86:	f7ff feb3 	bl	8000cf0 <I2C_WaitOnFlagUntilTimeout>
 8000f8a:	b948      	cbnz	r0, 8000fa0 <I2C_MasterRequestRead+0xf4>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8000f8c:	6822      	ldr	r2, [r4, #0]
 8000f8e:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8000f92:	6113      	str	r3, [r2, #16]
 8000f94:	e7d0      	b.n	8000f38 <I2C_MasterRequestRead+0x8c>
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	b004      	add	sp, #16
 8000f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e7f9      	b.n	8000f98 <I2C_MasterRequestRead+0xec>
 8000fa4:	00010008 	.word	0x00010008
 8000fa8:	00010002 	.word	0x00010002

08000fac <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000fac:	b570      	push	{r4, r5, r6, lr}
 8000fae:	4604      	mov	r4, r0
 8000fb0:	460d      	mov	r5, r1
 8000fb2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000fbc:	d11c      	bne.n	8000ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f7ff fe7d 	bl	8000cbe <I2C_IsAcknowledgeFailed>
 8000fc4:	b9d0      	cbnz	r0, 8000ffc <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000fc6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8000fca:	d0f3      	beq.n	8000fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fcc:	f7ff fac6 	bl	800055c <HAL_GetTick>
 8000fd0:	1b80      	subs	r0, r0, r6
 8000fd2:	4285      	cmp	r5, r0
 8000fd4:	d301      	bcc.n	8000fda <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d1ec      	bne.n	8000fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000fde:	2220      	movs	r2, #32
 8000fe0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000fe4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000fe8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fea:	f042 0220 	orr.w	r2, r2, #32
 8000fee:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000ff0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000ffc:	2001      	movs	r0, #1
}
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}

08001000 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001000:	b570      	push	{r4, r5, r6, lr}
 8001002:	4604      	mov	r4, r0
 8001004:	460d      	mov	r5, r1
 8001006:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	f013 0f04 	tst.w	r3, #4
 8001010:	d11c      	bne.n	800104c <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001012:	4620      	mov	r0, r4
 8001014:	f7ff fe53 	bl	8000cbe <I2C_IsAcknowledgeFailed>
 8001018:	b9d0      	cbnz	r0, 8001050 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800101a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800101e:	d0f3      	beq.n	8001008 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001020:	f7ff fa9c 	bl	800055c <HAL_GetTick>
 8001024:	1b80      	subs	r0, r0, r6
 8001026:	4285      	cmp	r5, r0
 8001028:	d301      	bcc.n	800102e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800102a:	2d00      	cmp	r5, #0
 800102c:	d1ec      	bne.n	8001008 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800102e:	2300      	movs	r3, #0
 8001030:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001032:	2220      	movs	r2, #32
 8001034:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001038:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800103c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800103e:	f042 0220 	orr.w	r2, r2, #32
 8001042:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001044:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001048:	2001      	movs	r0, #1
 800104a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800104c:	2000      	movs	r0, #0
 800104e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001050:	2001      	movs	r0, #1
}
 8001052:	bd70      	pop	{r4, r5, r6, pc}

08001054 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001054:	b570      	push	{r4, r5, r6, lr}
 8001056:	4605      	mov	r5, r0
 8001058:	460c      	mov	r4, r1
 800105a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800105c:	682b      	ldr	r3, [r5, #0]
 800105e:	695a      	ldr	r2, [r3, #20]
 8001060:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001064:	d129      	bne.n	80010ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	f012 0f10 	tst.w	r2, #16
 800106c:	d115      	bne.n	800109a <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800106e:	f7ff fa75 	bl	800055c <HAL_GetTick>
 8001072:	1b80      	subs	r0, r0, r6
 8001074:	42a0      	cmp	r0, r4
 8001076:	d801      	bhi.n	800107c <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8001078:	2c00      	cmp	r4, #0
 800107a:	d1ef      	bne.n	800105c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001080:	2220      	movs	r2, #32
 8001082:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001086:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800108a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800108c:	f042 0220 	orr.w	r2, r2, #32
 8001090:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001092:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8001096:	2001      	movs	r0, #1
 8001098:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800109a:	f06f 0210 	mvn.w	r2, #16
 800109e:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80010a4:	2220      	movs	r2, #32
 80010a6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010aa:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80010ae:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80010b0:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80010b2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80010b6:	2001      	movs	r0, #1
 80010b8:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80010ba:	2000      	movs	r0, #0
}
 80010bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080010c0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80010c0:	2800      	cmp	r0, #0
 80010c2:	f000 80be 	beq.w	8001242 <HAL_I2C_Init+0x182>
{
 80010c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d06b      	beq.n	80011aa <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80010d2:	2324      	movs	r3, #36	; 0x24
 80010d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80010d8:	6822      	ldr	r2, [r4, #0]
 80010da:	6813      	ldr	r3, [r2, #0]
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010e2:	f000 fea1 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010e6:	6862      	ldr	r2, [r4, #4]
 80010e8:	4b58      	ldr	r3, [pc, #352]	; (800124c <HAL_I2C_Init+0x18c>)
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d862      	bhi.n	80011b4 <HAL_I2C_Init+0xf4>
 80010ee:	4b58      	ldr	r3, [pc, #352]	; (8001250 <HAL_I2C_Init+0x190>)
 80010f0:	4298      	cmp	r0, r3
 80010f2:	bf8c      	ite	hi
 80010f4:	2300      	movhi	r3, #0
 80010f6:	2301      	movls	r3, #1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f040 80a4 	bne.w	8001246 <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 80010fe:	4b55      	ldr	r3, [pc, #340]	; (8001254 <HAL_I2C_Init+0x194>)
 8001100:	fba3 2300 	umull	r2, r3, r3, r0
 8001104:	0c9a      	lsrs	r2, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001106:	6821      	ldr	r1, [r4, #0]
 8001108:	684b      	ldr	r3, [r1, #4]
 800110a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800110e:	4313      	orrs	r3, r2
 8001110:	604b      	str	r3, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001112:	6825      	ldr	r5, [r4, #0]
 8001114:	6a29      	ldr	r1, [r5, #32]
 8001116:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800111a:	6866      	ldr	r6, [r4, #4]
 800111c:	4b4b      	ldr	r3, [pc, #300]	; (800124c <HAL_I2C_Init+0x18c>)
 800111e:	429e      	cmp	r6, r3
 8001120:	d84e      	bhi.n	80011c0 <HAL_I2C_Init+0x100>
 8001122:	1c53      	adds	r3, r2, #1
 8001124:	430b      	orrs	r3, r1
 8001126:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001128:	6822      	ldr	r2, [r4, #0]
 800112a:	69d1      	ldr	r1, [r2, #28]
 800112c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001130:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001134:	6863      	ldr	r3, [r4, #4]
 8001136:	4d45      	ldr	r5, [pc, #276]	; (800124c <HAL_I2C_Init+0x18c>)
 8001138:	42ab      	cmp	r3, r5
 800113a:	d84b      	bhi.n	80011d4 <HAL_I2C_Init+0x114>
 800113c:	3801      	subs	r0, #1
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fbb0 f3f3 	udiv	r3, r0, r3
 8001144:	3301      	adds	r3, #1
 8001146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf38      	it	cc
 800114e:	2304      	movcc	r3, #4
 8001150:	430b      	orrs	r3, r1
 8001152:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001154:	6821      	ldr	r1, [r4, #0]
 8001156:	680b      	ldr	r3, [r1, #0]
 8001158:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800115c:	69e2      	ldr	r2, [r4, #28]
 800115e:	6a20      	ldr	r0, [r4, #32]
 8001160:	4302      	orrs	r2, r0
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001166:	6821      	ldr	r1, [r4, #0]
 8001168:	688b      	ldr	r3, [r1, #8]
 800116a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800116e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001172:	6922      	ldr	r2, [r4, #16]
 8001174:	68e0      	ldr	r0, [r4, #12]
 8001176:	4302      	orrs	r2, r0
 8001178:	4313      	orrs	r3, r2
 800117a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800117c:	6821      	ldr	r1, [r4, #0]
 800117e:	68cb      	ldr	r3, [r1, #12]
 8001180:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001184:	6962      	ldr	r2, [r4, #20]
 8001186:	69a0      	ldr	r0, [r4, #24]
 8001188:	4302      	orrs	r2, r0
 800118a:	4313      	orrs	r3, r2
 800118c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800118e:	6822      	ldr	r2, [r4, #0]
 8001190:	6813      	ldr	r3, [r2, #0]
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001198:	2000      	movs	r0, #0
 800119a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800119c:	2320      	movs	r3, #32
 800119e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011a2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80011a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80011aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80011ae:	f002 ff0d 	bl	8003fcc <HAL_I2C_MspInit>
 80011b2:	e78e      	b.n	80010d2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <HAL_I2C_Init+0x198>)
 80011b6:	4298      	cmp	r0, r3
 80011b8:	bf8c      	ite	hi
 80011ba:	2300      	movhi	r3, #0
 80011bc:	2301      	movls	r3, #1
 80011be:	e79b      	b.n	80010f8 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011c0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80011c4:	fb03 f302 	mul.w	r3, r3, r2
 80011c8:	4a24      	ldr	r2, [pc, #144]	; (800125c <HAL_I2C_Init+0x19c>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	099b      	lsrs	r3, r3, #6
 80011d0:	3301      	adds	r3, #1
 80011d2:	e7a7      	b.n	8001124 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011d4:	68a6      	ldr	r6, [r4, #8]
 80011d6:	b9be      	cbnz	r6, 8001208 <HAL_I2C_Init+0x148>
 80011d8:	1e45      	subs	r5, r0, #1
 80011da:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80011de:	fbb5 f5f7 	udiv	r5, r5, r7
 80011e2:	3501      	adds	r5, #1
 80011e4:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80011e8:	fab5 f585 	clz	r5, r5
 80011ec:	096d      	lsrs	r5, r5, #5
 80011ee:	bb35      	cbnz	r5, 800123e <HAL_I2C_Init+0x17e>
 80011f0:	b9c6      	cbnz	r6, 8001224 <HAL_I2C_Init+0x164>
 80011f2:	3801      	subs	r0, #1
 80011f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80011fc:	3301      	adds	r3, #1
 80011fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001206:	e7a3      	b.n	8001150 <HAL_I2C_Init+0x90>
 8001208:	1e45      	subs	r5, r0, #1
 800120a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800120e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001212:	fbb5 f5f7 	udiv	r5, r5, r7
 8001216:	3501      	adds	r5, #1
 8001218:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800121c:	fab5 f585 	clz	r5, r5
 8001220:	096d      	lsrs	r5, r5, #5
 8001222:	e7e4      	b.n	80011ee <HAL_I2C_Init+0x12e>
 8001224:	3801      	subs	r0, #1
 8001226:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800122a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800122e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001232:	3301      	adds	r3, #1
 8001234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800123c:	e788      	b.n	8001150 <HAL_I2C_Init+0x90>
 800123e:	2301      	movs	r3, #1
 8001240:	e786      	b.n	8001150 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8001242:	2001      	movs	r0, #1
 8001244:	4770      	bx	lr
    return HAL_ERROR;
 8001246:	2001      	movs	r0, #1
}
 8001248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800124a:	bf00      	nop
 800124c:	000186a0 	.word	0x000186a0
 8001250:	001e847f 	.word	0x001e847f
 8001254:	431bde83 	.word	0x431bde83
 8001258:	003d08ff 	.word	0x003d08ff
 800125c:	10624dd3 	.word	0x10624dd3

08001260 <HAL_I2C_Master_Transmit>:
{
 8001260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	4604      	mov	r4, r0
 8001268:	460d      	mov	r5, r1
 800126a:	4690      	mov	r8, r2
 800126c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800126e:	f7ff f975 	bl	800055c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001272:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b20      	cmp	r3, #32
 800127a:	d004      	beq.n	8001286 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 800127c:	2502      	movs	r5, #2
}
 800127e:	4628      	mov	r0, r5
 8001280:	b004      	add	sp, #16
 8001282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001286:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001288:	9000      	str	r0, [sp, #0]
 800128a:	2319      	movs	r3, #25
 800128c:	2201      	movs	r2, #1
 800128e:	494f      	ldr	r1, [pc, #316]	; (80013cc <HAL_I2C_Master_Transmit+0x16c>)
 8001290:	4620      	mov	r0, r4
 8001292:	f7ff fd2d 	bl	8000cf0 <I2C_WaitOnFlagUntilTimeout>
 8001296:	b108      	cbz	r0, 800129c <HAL_I2C_Master_Transmit+0x3c>
      return HAL_BUSY;
 8001298:	2502      	movs	r5, #2
 800129a:	e7f0      	b.n	800127e <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 800129c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	f000 808e 	beq.w	80013c2 <HAL_I2C_Master_Transmit+0x162>
 80012a6:	2301      	movs	r3, #1
 80012a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	f012 0f01 	tst.w	r2, #1
 80012b4:	d103      	bne.n	80012be <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	f042 0201 	orr.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012be:	6822      	ldr	r2, [r4, #0]
 80012c0:	6813      	ldr	r3, [r2, #0]
 80012c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012c6:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80012c8:	2321      	movs	r3, #33	; 0x21
 80012ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80012ce:	2310      	movs	r3, #16
 80012d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80012d8:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012dc:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012e0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012e2:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <HAL_I2C_Master_Transmit+0x170>)
 80012e4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80012e6:	4633      	mov	r3, r6
 80012e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80012ea:	4629      	mov	r1, r5
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff fd89 	bl	8000e04 <I2C_MasterRequestWrite>
 80012f2:	4605      	mov	r5, r0
 80012f4:	2800      	cmp	r0, #0
 80012f6:	d166      	bne.n	80013c6 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012f8:	2300      	movs	r3, #0
 80012fa:	9303      	str	r3, [sp, #12]
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	695a      	ldr	r2, [r3, #20]
 8001300:	9203      	str	r2, [sp, #12]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	9303      	str	r3, [sp, #12]
 8001306:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001308:	e012      	b.n	8001330 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800130a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800130c:	2b04      	cmp	r3, #4
 800130e:	d001      	beq.n	8001314 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 8001310:	2501      	movs	r5, #1
 8001312:	e7b4      	b.n	800127e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001314:	6822      	ldr	r2, [r4, #0]
 8001316:	6813      	ldr	r3, [r2, #0]
 8001318:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131c:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800131e:	2501      	movs	r5, #1
 8001320:	e7ad      	b.n	800127e <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001322:	4632      	mov	r2, r6
 8001324:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001326:	4620      	mov	r0, r4
 8001328:	f7ff fe6a 	bl	8001000 <I2C_WaitOnBTFFlagUntilTimeout>
 800132c:	2800      	cmp	r0, #0
 800132e:	d12e      	bne.n	800138e <HAL_I2C_Master_Transmit+0x12e>
    while (hi2c->XferSize > 0U)
 8001330:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001332:	2b00      	cmp	r3, #0
 8001334:	d037      	beq.n	80013a6 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001336:	4632      	mov	r2, r6
 8001338:	990a      	ldr	r1, [sp, #40]	; 0x28
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff fe36 	bl	8000fac <I2C_WaitOnTXEFlagUntilTimeout>
 8001340:	2800      	cmp	r0, #0
 8001342:	d1e2      	bne.n	800130a <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001348:	7812      	ldrb	r2, [r2, #0]
 800134a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800134c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800134e:	1c4b      	adds	r3, r1, #1
 8001350:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001352:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001354:	b29b      	uxth	r3, r3
 8001356:	3b01      	subs	r3, #1
 8001358:	b29b      	uxth	r3, r3
 800135a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800135c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800135e:	3b01      	subs	r3, #1
 8001360:	b29b      	uxth	r3, r3
 8001362:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001364:	6822      	ldr	r2, [r4, #0]
 8001366:	6950      	ldr	r0, [r2, #20]
 8001368:	f010 0f04 	tst.w	r0, #4
 800136c:	d0d9      	beq.n	8001322 <HAL_I2C_Master_Transmit+0xc2>
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0d7      	beq.n	8001322 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001372:	784b      	ldrb	r3, [r1, #1]
 8001374:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001378:	3301      	adds	r3, #1
 800137a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800137c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800137e:	b29b      	uxth	r3, r3
 8001380:	3b01      	subs	r3, #1
 8001382:	b29b      	uxth	r3, r3
 8001384:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001386:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001388:	3b01      	subs	r3, #1
 800138a:	8523      	strh	r3, [r4, #40]	; 0x28
 800138c:	e7c9      	b.n	8001322 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800138e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001390:	2b04      	cmp	r3, #4
 8001392:	d001      	beq.n	8001398 <HAL_I2C_Master_Transmit+0x138>
        return HAL_ERROR;
 8001394:	2501      	movs	r5, #1
 8001396:	e772      	b.n	800127e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001398:	6822      	ldr	r2, [r4, #0]
 800139a:	6813      	ldr	r3, [r2, #0]
 800139c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80013a2:	2501      	movs	r5, #1
 80013a4:	e76b      	b.n	800127e <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013a6:	6822      	ldr	r2, [r4, #0]
 80013a8:	6813      	ldr	r3, [r2, #0]
 80013aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ae:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80013b0:	2320      	movs	r3, #32
 80013b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80013bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80013c0:	e75d      	b.n	800127e <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 80013c2:	2502      	movs	r5, #2
 80013c4:	e75b      	b.n	800127e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 80013c6:	2501      	movs	r5, #1
 80013c8:	e759      	b.n	800127e <HAL_I2C_Master_Transmit+0x1e>
 80013ca:	bf00      	nop
 80013cc:	00100002 	.word	0x00100002
 80013d0:	ffff0000 	.word	0xffff0000

080013d4 <HAL_I2C_Master_Receive>:
{
 80013d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	4604      	mov	r4, r0
 80013dc:	460d      	mov	r5, r1
 80013de:	4690      	mov	r8, r2
 80013e0:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80013e2:	f7ff f8bb 	bl	800055c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013e6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b20      	cmp	r3, #32
 80013ee:	d004      	beq.n	80013fa <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 80013f0:	2502      	movs	r5, #2
}
 80013f2:	4628      	mov	r0, r5
 80013f4:	b006      	add	sp, #24
 80013f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013fa:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013fc:	9000      	str	r0, [sp, #0]
 80013fe:	2319      	movs	r3, #25
 8001400:	2201      	movs	r2, #1
 8001402:	4988      	ldr	r1, [pc, #544]	; (8001624 <HAL_I2C_Master_Receive+0x250>)
 8001404:	4620      	mov	r0, r4
 8001406:	f7ff fc73 	bl	8000cf0 <I2C_WaitOnFlagUntilTimeout>
 800140a:	b108      	cbz	r0, 8001410 <HAL_I2C_Master_Receive+0x3c>
      return HAL_BUSY;
 800140c:	2502      	movs	r5, #2
 800140e:	e7f0      	b.n	80013f2 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001410:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001414:	2b01      	cmp	r3, #1
 8001416:	f000 813d 	beq.w	8001694 <HAL_I2C_Master_Receive+0x2c0>
 800141a:	2301      	movs	r3, #1
 800141c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	f012 0f01 	tst.w	r2, #1
 8001428:	d103      	bne.n	8001432 <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	f042 0201 	orr.w	r2, r2, #1
 8001430:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001432:	6822      	ldr	r2, [r4, #0]
 8001434:	6813      	ldr	r3, [r2, #0]
 8001436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800143a:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800143c:	2322      	movs	r3, #34	; 0x22
 800143e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001442:	2310      	movs	r3, #16
 8001444:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001448:	2300      	movs	r3, #0
 800144a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800144c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001450:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001452:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001454:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001456:	4b74      	ldr	r3, [pc, #464]	; (8001628 <HAL_I2C_Master_Receive+0x254>)
 8001458:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800145a:	4633      	mov	r3, r6
 800145c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800145e:	4629      	mov	r1, r5
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff fd23 	bl	8000eac <I2C_MasterRequestRead>
 8001466:	4605      	mov	r5, r0
 8001468:	2800      	cmp	r0, #0
 800146a:	f040 8115 	bne.w	8001698 <HAL_I2C_Master_Receive+0x2c4>
    if (hi2c->XferSize == 0U)
 800146e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001470:	b95b      	cbnz	r3, 800148a <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	695a      	ldr	r2, [r3, #20]
 8001478:	9202      	str	r2, [sp, #8]
 800147a:	699a      	ldr	r2, [r3, #24]
 800147c:	9202      	str	r2, [sp, #8]
 800147e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e07a      	b.n	8001580 <HAL_I2C_Master_Receive+0x1ac>
    else if (hi2c->XferSize == 1U)
 800148a:	2b01      	cmp	r3, #1
 800148c:	d00f      	beq.n	80014ae <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 800148e:	2b02      	cmp	r3, #2
 8001490:	d01f      	beq.n	80014d2 <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001492:	6822      	ldr	r2, [r4, #0]
 8001494:	6813      	ldr	r3, [r2, #0]
 8001496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800149a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800149c:	2300      	movs	r3, #0
 800149e:	9305      	str	r3, [sp, #20]
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	9205      	str	r2, [sp, #20]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	9305      	str	r3, [sp, #20]
 80014aa:	9b05      	ldr	r3, [sp, #20]
 80014ac:	e068      	b.n	8001580 <HAL_I2C_Master_Receive+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014ae:	6822      	ldr	r2, [r4, #0]
 80014b0:	6813      	ldr	r3, [r2, #0]
 80014b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014b6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014b8:	2300      	movs	r3, #0
 80014ba:	9303      	str	r3, [sp, #12]
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	9203      	str	r2, [sp, #12]
 80014c2:	699a      	ldr	r2, [r3, #24]
 80014c4:	9203      	str	r2, [sp, #12]
 80014c6:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e056      	b.n	8001580 <HAL_I2C_Master_Receive+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014d2:	6822      	ldr	r2, [r4, #0]
 80014d4:	6813      	ldr	r3, [r2, #0]
 80014d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014da:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014dc:	6822      	ldr	r2, [r4, #0]
 80014de:	6813      	ldr	r3, [r2, #0]
 80014e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014e4:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014e6:	2300      	movs	r3, #0
 80014e8:	9304      	str	r3, [sp, #16]
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	695a      	ldr	r2, [r3, #20]
 80014ee:	9204      	str	r2, [sp, #16]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	9304      	str	r3, [sp, #16]
 80014f4:	9b04      	ldr	r3, [sp, #16]
 80014f6:	e043      	b.n	8001580 <HAL_I2C_Master_Receive+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f8:	4632      	mov	r2, r6
 80014fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7ff fda9 	bl	8001054 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001502:	2800      	cmp	r0, #0
 8001504:	f040 80ca 	bne.w	800169c <HAL_I2C_Master_Receive+0x2c8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800150a:	6822      	ldr	r2, [r4, #0]
 800150c:	6912      	ldr	r2, [r2, #16]
 800150e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001512:	3301      	adds	r3, #1
 8001514:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001516:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001518:	3b01      	subs	r3, #1
 800151a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800151c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800151e:	b29b      	uxth	r3, r3
 8001520:	3b01      	subs	r3, #1
 8001522:	b29b      	uxth	r3, r3
 8001524:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001526:	e02b      	b.n	8001580 <HAL_I2C_Master_Receive+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001528:	9600      	str	r6, [sp, #0]
 800152a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800152c:	2200      	movs	r2, #0
 800152e:	493f      	ldr	r1, [pc, #252]	; (800162c <HAL_I2C_Master_Receive+0x258>)
 8001530:	4620      	mov	r0, r4
 8001532:	f7ff fbdd 	bl	8000cf0 <I2C_WaitOnFlagUntilTimeout>
 8001536:	2800      	cmp	r0, #0
 8001538:	f040 80b2 	bne.w	80016a0 <HAL_I2C_Master_Receive+0x2cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800153c:	6822      	ldr	r2, [r4, #0]
 800153e:	6813      	ldr	r3, [r2, #0]
 8001540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001544:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001548:	6822      	ldr	r2, [r4, #0]
 800154a:	6912      	ldr	r2, [r2, #16]
 800154c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800154e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001550:	1c53      	adds	r3, r2, #1
 8001552:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001554:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001556:	3b01      	subs	r3, #1
 8001558:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800155a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800155c:	b29b      	uxth	r3, r3
 800155e:	3b01      	subs	r3, #1
 8001560:	b29b      	uxth	r3, r3
 8001562:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800156a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800156c:	3301      	adds	r3, #1
 800156e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001570:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001572:	3b01      	subs	r3, #1
 8001574:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001576:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001578:	b29b      	uxth	r3, r3
 800157a:	3b01      	subs	r3, #1
 800157c:	b29b      	uxth	r3, r3
 800157e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001580:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001582:	2b00      	cmp	r3, #0
 8001584:	d07d      	beq.n	8001682 <HAL_I2C_Master_Receive+0x2ae>
      if (hi2c->XferSize <= 3U)
 8001586:	2b03      	cmp	r3, #3
 8001588:	d852      	bhi.n	8001630 <HAL_I2C_Master_Receive+0x25c>
        if (hi2c->XferSize == 1U)
 800158a:	2b01      	cmp	r3, #1
 800158c:	d0b4      	beq.n	80014f8 <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 800158e:	2b02      	cmp	r3, #2
 8001590:	d0ca      	beq.n	8001528 <HAL_I2C_Master_Receive+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001592:	9600      	str	r6, [sp, #0]
 8001594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001596:	2200      	movs	r2, #0
 8001598:	4924      	ldr	r1, [pc, #144]	; (800162c <HAL_I2C_Master_Receive+0x258>)
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff fba8 	bl	8000cf0 <I2C_WaitOnFlagUntilTimeout>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d17f      	bne.n	80016a4 <HAL_I2C_Master_Receive+0x2d0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015a4:	6822      	ldr	r2, [r4, #0]
 80015a6:	6813      	ldr	r3, [r2, #0]
 80015a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015ac:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015b0:	6822      	ldr	r2, [r4, #0]
 80015b2:	6912      	ldr	r2, [r2, #16]
 80015b4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80015b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015b8:	3301      	adds	r3, #1
 80015ba:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80015bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80015be:	3b01      	subs	r3, #1
 80015c0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80015c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015cc:	9600      	str	r6, [sp, #0]
 80015ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80015d0:	2200      	movs	r2, #0
 80015d2:	4916      	ldr	r1, [pc, #88]	; (800162c <HAL_I2C_Master_Receive+0x258>)
 80015d4:	4620      	mov	r0, r4
 80015d6:	f7ff fb8b 	bl	8000cf0 <I2C_WaitOnFlagUntilTimeout>
 80015da:	2800      	cmp	r0, #0
 80015dc:	d164      	bne.n	80016a8 <HAL_I2C_Master_Receive+0x2d4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015de:	6822      	ldr	r2, [r4, #0]
 80015e0:	6813      	ldr	r3, [r2, #0]
 80015e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015ea:	6822      	ldr	r2, [r4, #0]
 80015ec:	6912      	ldr	r2, [r2, #16]
 80015ee:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80015f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015f2:	1c53      	adds	r3, r2, #1
 80015f4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80015f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80015f8:	3b01      	subs	r3, #1
 80015fa:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80015fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	b29b      	uxth	r3, r3
 8001604:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800160c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800160e:	3301      	adds	r3, #1
 8001610:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001612:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001614:	3b01      	subs	r3, #1
 8001616:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001618:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001622:	e7ad      	b.n	8001580 <HAL_I2C_Master_Receive+0x1ac>
 8001624:	00100002 	.word	0x00100002
 8001628:	ffff0000 	.word	0xffff0000
 800162c:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001630:	4632      	mov	r2, r6
 8001632:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001634:	4620      	mov	r0, r4
 8001636:	f7ff fd0d 	bl	8001054 <I2C_WaitOnRXNEFlagUntilTimeout>
 800163a:	2800      	cmp	r0, #0
 800163c:	d136      	bne.n	80016ac <HAL_I2C_Master_Receive+0x2d8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800163e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001640:	6822      	ldr	r2, [r4, #0]
 8001642:	6912      	ldr	r2, [r2, #16]
 8001644:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001646:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001648:	1c53      	adds	r3, r2, #1
 800164a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800164c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800164e:	3b01      	subs	r3, #1
 8001650:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001652:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001654:	b29b      	uxth	r3, r3
 8001656:	3b01      	subs	r3, #1
 8001658:	b29b      	uxth	r3, r3
 800165a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	6959      	ldr	r1, [r3, #20]
 8001660:	f011 0f04 	tst.w	r1, #4
 8001664:	d08c      	beq.n	8001580 <HAL_I2C_Master_Receive+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800166a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800166c:	3301      	adds	r3, #1
 800166e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001670:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001672:	3b01      	subs	r3, #1
 8001674:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001676:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001678:	b29b      	uxth	r3, r3
 800167a:	3b01      	subs	r3, #1
 800167c:	b29b      	uxth	r3, r3
 800167e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001680:	e77e      	b.n	8001580 <HAL_I2C_Master_Receive+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 8001682:	2320      	movs	r3, #32
 8001684:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001688:	2300      	movs	r3, #0
 800168a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800168e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001692:	e6ae      	b.n	80013f2 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001694:	2502      	movs	r5, #2
 8001696:	e6ac      	b.n	80013f2 <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8001698:	2501      	movs	r5, #1
 800169a:	e6aa      	b.n	80013f2 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 800169c:	2501      	movs	r5, #1
 800169e:	e6a8      	b.n	80013f2 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 80016a0:	2501      	movs	r5, #1
 80016a2:	e6a6      	b.n	80013f2 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 80016a4:	2501      	movs	r5, #1
 80016a6:	e6a4      	b.n	80013f2 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 80016a8:	2501      	movs	r5, #1
 80016aa:	e6a2      	b.n	80013f2 <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 80016ac:	2501      	movs	r5, #1
 80016ae:	e6a0      	b.n	80013f2 <HAL_I2C_Master_Receive+0x1e>

080016b0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b20      	cmp	r3, #32
 80016b8:	d001      	beq.n	80016be <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80016ba:	2002      	movs	r0, #2
  }
}
 80016bc:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 80016be:	2324      	movs	r3, #36	; 0x24
 80016c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 80016c4:	6802      	ldr	r2, [r0, #0]
 80016c6:	6813      	ldr	r3, [r2, #0]
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80016ce:	6802      	ldr	r2, [r0, #0]
 80016d0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80016d2:	f023 0310 	bic.w	r3, r3, #16
 80016d6:	6253      	str	r3, [r2, #36]	; 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 80016d8:	6802      	ldr	r2, [r0, #0]
 80016da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80016dc:	4319      	orrs	r1, r3
 80016de:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 80016e0:	6802      	ldr	r2, [r0, #0]
 80016e2:	6813      	ldr	r3, [r2, #0]
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80016ea:	2320      	movs	r3, #32
 80016ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 80016f0:	2000      	movs	r0, #0
 80016f2:	4770      	bx	lr

080016f4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	d001      	beq.n	8001702 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80016fe:	2002      	movs	r0, #2
  }
}
 8001700:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001702:	2324      	movs	r3, #36	; 0x24
 8001704:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8001708:	6802      	ldr	r2, [r0, #0]
 800170a:	6813      	ldr	r3, [r2, #0]
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 8001712:	6802      	ldr	r2, [r0, #0]
 8001714:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001716:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 8001718:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 800171c:	4319      	orrs	r1, r3
 800171e:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 8001720:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8001722:	6802      	ldr	r2, [r0, #0]
 8001724:	6813      	ldr	r3, [r2, #0]
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800172c:	2320      	movs	r3, #32
 800172e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 8001732:	2000      	movs	r0, #0
 8001734:	4770      	bx	lr

08001736 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001736:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001738:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800173a:	2800      	cmp	r0, #0
 800173c:	f000 808a 	beq.w	8001854 <HAL_PCD_Init+0x11e>
 8001740:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001742:	6805      	ldr	r5, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001744:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001748:	b323      	cbz	r3, 8001794 <HAL_PCD_Init+0x5e>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800174a:	2303      	movs	r3, #3
 800174c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001750:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001752:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001756:	d101      	bne.n	800175c <HAL_PCD_Init+0x26>
  {
    hpcd->Init.dma_enable = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	6123      	str	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800175c:	6820      	ldr	r0, [r4, #0]
 800175e:	f000 ff2c 	bl	80025ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001762:	4625      	mov	r5, r4
 8001764:	f855 7b10 	ldr.w	r7, [r5], #16
 8001768:	466e      	mov	r6, sp
 800176a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800176e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001770:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001772:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001776:	e886 0003 	stmia.w	r6, {r0, r1}
 800177a:	1d23      	adds	r3, r4, #4
 800177c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800177e:	4638      	mov	r0, r7
 8001780:	f000 fed6 	bl	8002530 <USB_CoreInit>
 8001784:	b158      	cbz	r0, 800179e <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001786:	2302      	movs	r3, #2
 8001788:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800178c:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800178e:	4628      	mov	r0, r5
 8001790:	b00b      	add	sp, #44	; 0x2c
 8001792:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001794:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001798:	f002 ff20 	bl	80045dc <HAL_PCD_MspInit>
 800179c:	e7d5      	b.n	800174a <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800179e:	2100      	movs	r1, #0
 80017a0:	6820      	ldr	r0, [r4, #0]
 80017a2:	f000 ff10 	bl	80025c6 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	e015      	b.n	80017d6 <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 80017aa:	00d9      	lsls	r1, r3, #3
 80017ac:	1ac8      	subs	r0, r1, r3
 80017ae:	0082      	lsls	r2, r0, #2
 80017b0:	4422      	add	r2, r4
 80017b2:	2001      	movs	r0, #1
 80017b4:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80017b8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017bc:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017c0:	2000      	movs	r0, #0
 80017c2:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80017c6:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017c8:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80017ca:	1aca      	subs	r2, r1, r3
 80017cc:	0091      	lsls	r1, r2, #2
 80017ce:	4421      	add	r1, r4
 80017d0:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d2:	3301      	adds	r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	6865      	ldr	r5, [r4, #4]
 80017d8:	42ab      	cmp	r3, r5
 80017da:	d3e6      	bcc.n	80017aa <HAL_PCD_Init+0x74>
 80017dc:	2300      	movs	r3, #0
 80017de:	e015      	b.n	800180c <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 80017e0:	00d8      	lsls	r0, r3, #3
 80017e2:	1ac1      	subs	r1, r0, r3
 80017e4:	008a      	lsls	r2, r1, #2
 80017e6:	4422      	add	r2, r4
 80017e8:	2100      	movs	r1, #0
 80017ea:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80017ee:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017f2:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017f6:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017fa:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017fe:	1ac2      	subs	r2, r0, r3
 8001800:	0090      	lsls	r0, r2, #2
 8001802:	4420      	add	r0, r4
 8001804:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001808:	3301      	adds	r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	429d      	cmp	r5, r3
 800180e:	d8e7      	bhi.n	80017e0 <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001810:	4625      	mov	r5, r4
 8001812:	f855 7b10 	ldr.w	r7, [r5], #16
 8001816:	466e      	mov	r6, sp
 8001818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800181a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800181c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800181e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001820:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001824:	e886 0003 	stmia.w	r6, {r0, r1}
 8001828:	1d23      	adds	r3, r4, #4
 800182a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800182c:	4638      	mov	r0, r7
 800182e:	f000 ff11 	bl	8002654 <USB_DevInit>
 8001832:	4605      	mov	r5, r0
 8001834:	b120      	cbz	r0, 8001840 <HAL_PCD_Init+0x10a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001836:	2302      	movs	r3, #2
 8001838:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800183c:	2501      	movs	r5, #1
 800183e:	e7a6      	b.n	800178e <HAL_PCD_Init+0x58>
  hpcd->USB_Address = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001846:	2301      	movs	r3, #1
 8001848:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800184c:	6820      	ldr	r0, [r4, #0]
 800184e:	f000 ffd1 	bl	80027f4 <USB_DevDisconnect>
  return HAL_OK;
 8001852:	e79c      	b.n	800178e <HAL_PCD_Init+0x58>
    return HAL_ERROR;
 8001854:	2501      	movs	r5, #1
 8001856:	e79a      	b.n	800178e <HAL_PCD_Init+0x58>

08001858 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001858:	2800      	cmp	r0, #0
 800185a:	f000 81bb 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x37c>
{
 800185e:	b570      	push	{r4, r5, r6, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001864:	6803      	ldr	r3, [r0, #0]
 8001866:	f013 0f01 	tst.w	r3, #1
 800186a:	d03b      	beq.n	80018e4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800186c:	4ba7      	ldr	r3, [pc, #668]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b04      	cmp	r3, #4
 8001876:	d02c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001878:	4ba4      	ldr	r3, [pc, #656]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001880:	2b08      	cmp	r3, #8
 8001882:	d021      	beq.n	80018c8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001884:	6863      	ldr	r3, [r4, #4]
 8001886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188a:	d04f      	beq.n	800192c <HAL_RCC_OscConfig+0xd4>
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001890:	d052      	beq.n	8001938 <HAL_RCC_OscConfig+0xe0>
 8001892:	4b9e      	ldr	r3, [pc, #632]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018a4:	6863      	ldr	r3, [r4, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d050      	beq.n	800194c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7fe fe57 	bl	800055c <HAL_GetTick>
 80018ae:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b0:	4b96      	ldr	r3, [pc, #600]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80018b8:	d114      	bne.n	80018e4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ba:	f7fe fe4f 	bl	800055c <HAL_GetTick>
 80018be:	1b40      	subs	r0, r0, r5
 80018c0:	2864      	cmp	r0, #100	; 0x64
 80018c2:	d9f5      	bls.n	80018b0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80018c4:	2003      	movs	r0, #3
 80018c6:	e18a      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c8:	4b90      	ldr	r3, [pc, #576]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80018d0:	d0d8      	beq.n	8001884 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d2:	4b8e      	ldr	r3, [pc, #568]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80018da:	d003      	beq.n	80018e4 <HAL_RCC_OscConfig+0x8c>
 80018dc:	6863      	ldr	r3, [r4, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 817a 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	f013 0f02 	tst.w	r3, #2
 80018ea:	d055      	beq.n	8001998 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ec:	4b87      	ldr	r3, [pc, #540]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f013 0f0c 	tst.w	r3, #12
 80018f4:	d03e      	beq.n	8001974 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f6:	4b85      	ldr	r3, [pc, #532]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d033      	beq.n	800196a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001902:	68e3      	ldr	r3, [r4, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d068      	beq.n	80019da <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001908:	2201      	movs	r2, #1
 800190a:	4b81      	ldr	r3, [pc, #516]	; (8001b10 <HAL_RCC_OscConfig+0x2b8>)
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7fe fe25 	bl	800055c <HAL_GetTick>
 8001912:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	4b7d      	ldr	r3, [pc, #500]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f013 0f02 	tst.w	r3, #2
 800191c:	d154      	bne.n	80019c8 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800191e:	f7fe fe1d 	bl	800055c <HAL_GetTick>
 8001922:	1b40      	subs	r0, r0, r5
 8001924:	2802      	cmp	r0, #2
 8001926:	d9f5      	bls.n	8001914 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001928:	2003      	movs	r0, #3
 800192a:	e158      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192c:	4a77      	ldr	r2, [pc, #476]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 800192e:	6813      	ldr	r3, [r2, #0]
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e7b5      	b.n	80018a4 <HAL_RCC_OscConfig+0x4c>
 8001938:	4b74      	ldr	r3, [pc, #464]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	e7ab      	b.n	80018a4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800194c:	f7fe fe06 	bl	800055c <HAL_GetTick>
 8001950:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001952:	4b6e      	ldr	r3, [pc, #440]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800195a:	d0c3      	beq.n	80018e4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195c:	f7fe fdfe 	bl	800055c <HAL_GetTick>
 8001960:	1b40      	subs	r0, r0, r5
 8001962:	2864      	cmp	r0, #100	; 0x64
 8001964:	d9f5      	bls.n	8001952 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001966:	2003      	movs	r0, #3
 8001968:	e139      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196a:	4b68      	ldr	r3, [pc, #416]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001972:	d1c6      	bne.n	8001902 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001974:	4b65      	ldr	r3, [pc, #404]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f013 0f02 	tst.w	r3, #2
 800197c:	d004      	beq.n	8001988 <HAL_RCC_OscConfig+0x130>
 800197e:	68e3      	ldr	r3, [r4, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8001984:	2001      	movs	r0, #1
 8001986:	e12a      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4a60      	ldr	r2, [pc, #384]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 800198a:	6813      	ldr	r3, [r2, #0]
 800198c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001990:	6921      	ldr	r1, [r4, #16]
 8001992:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001996:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	f013 0f08 	tst.w	r3, #8
 800199e:	d040      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019a0:	6963      	ldr	r3, [r4, #20]
 80019a2:	b363      	cbz	r3, 80019fe <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a4:	2201      	movs	r2, #1
 80019a6:	4b5b      	ldr	r3, [pc, #364]	; (8001b14 <HAL_RCC_OscConfig+0x2bc>)
 80019a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7fe fdd7 	bl	800055c <HAL_GetTick>
 80019ae:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b0:	4b56      	ldr	r3, [pc, #344]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 80019b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b4:	f013 0f02 	tst.w	r3, #2
 80019b8:	d133      	bne.n	8001a22 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ba:	f7fe fdcf 	bl	800055c <HAL_GetTick>
 80019be:	1b40      	subs	r0, r0, r5
 80019c0:	2802      	cmp	r0, #2
 80019c2:	d9f5      	bls.n	80019b0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80019c4:	2003      	movs	r0, #3
 80019c6:	e10a      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	4a50      	ldr	r2, [pc, #320]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 80019ca:	6813      	ldr	r3, [r2, #0]
 80019cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019d0:	6921      	ldr	r1, [r4, #16]
 80019d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e7de      	b.n	8001998 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80019da:	2200      	movs	r2, #0
 80019dc:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <HAL_RCC_OscConfig+0x2b8>)
 80019de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019e0:	f7fe fdbc 	bl	800055c <HAL_GetTick>
 80019e4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f013 0f02 	tst.w	r3, #2
 80019ee:	d0d3      	beq.n	8001998 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f0:	f7fe fdb4 	bl	800055c <HAL_GetTick>
 80019f4:	1b40      	subs	r0, r0, r5
 80019f6:	2802      	cmp	r0, #2
 80019f8:	d9f5      	bls.n	80019e6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80019fa:	2003      	movs	r0, #3
 80019fc:	e0ef      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fe:	2200      	movs	r2, #0
 8001a00:	4b44      	ldr	r3, [pc, #272]	; (8001b14 <HAL_RCC_OscConfig+0x2bc>)
 8001a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7fe fdaa 	bl	800055c <HAL_GetTick>
 8001a08:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0a:	4b40      	ldr	r3, [pc, #256]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 8001a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a0e:	f013 0f02 	tst.w	r3, #2
 8001a12:	d006      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a14:	f7fe fda2 	bl	800055c <HAL_GetTick>
 8001a18:	1b40      	subs	r0, r0, r5
 8001a1a:	2802      	cmp	r0, #2
 8001a1c:	d9f5      	bls.n	8001a0a <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8001a1e:	2003      	movs	r0, #3
 8001a20:	e0dd      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	f013 0f04 	tst.w	r3, #4
 8001a28:	d079      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001a32:	d133      	bne.n	8001a9c <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 8001a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a4c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4e:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <HAL_RCC_OscConfig+0x2c0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a56:	d023      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a58:	68a3      	ldr	r3, [r4, #8]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d034      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x270>
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	d038      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x27c>
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 8001a64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	671a      	str	r2, [r3, #112]	; 0x70
 8001a6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a6e:	f022 0204 	bic.w	r2, r2, #4
 8001a72:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a74:	68a3      	ldr	r3, [r4, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d036      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7a:	f7fe fd6f 	bl	800055c <HAL_GetTick>
 8001a7e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	f013 0f02 	tst.w	r3, #2
 8001a88:	d148      	bne.n	8001b1c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7fe fd67 	bl	800055c <HAL_GetTick>
 8001a8e:	1b80      	subs	r0, r0, r6
 8001a90:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a94:	4298      	cmp	r0, r3
 8001a96:	d9f3      	bls.n	8001a80 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001a98:	2003      	movs	r0, #3
 8001a9a:	e0a0      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8001a9c:	2500      	movs	r5, #0
 8001a9e:	e7d6      	b.n	8001a4e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa0:	4a1d      	ldr	r2, [pc, #116]	; (8001b18 <HAL_RCC_OscConfig+0x2c0>)
 8001aa2:	6813      	ldr	r3, [r2, #0]
 8001aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001aaa:	f7fe fd57 	bl	800055c <HAL_GetTick>
 8001aae:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_RCC_OscConfig+0x2c0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ab8:	d1ce      	bne.n	8001a58 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aba:	f7fe fd4f 	bl	800055c <HAL_GetTick>
 8001abe:	1b80      	subs	r0, r0, r6
 8001ac0:	2802      	cmp	r0, #2
 8001ac2:	d9f5      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	e08a      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac8:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 8001aca:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad2:	e7cf      	b.n	8001a74 <HAL_RCC_OscConfig+0x21c>
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 8001ad6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ad8:	f042 0204 	orr.w	r2, r2, #4
 8001adc:	671a      	str	r2, [r3, #112]	; 0x70
 8001ade:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ae0:	f042 0201 	orr.w	r2, r2, #1
 8001ae4:	671a      	str	r2, [r3, #112]	; 0x70
 8001ae6:	e7c5      	b.n	8001a74 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae8:	f7fe fd38 	bl	800055c <HAL_GetTick>
 8001aec:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <HAL_RCC_OscConfig+0x2b4>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af2:	f013 0f02 	tst.w	r3, #2
 8001af6:	d011      	beq.n	8001b1c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7fe fd30 	bl	800055c <HAL_GetTick>
 8001afc:	1b80      	subs	r0, r0, r6
 8001afe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b02:	4298      	cmp	r0, r3
 8001b04:	d9f3      	bls.n	8001aee <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8001b06:	2003      	movs	r0, #3
 8001b08:	e069      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	42470000 	.word	0x42470000
 8001b14:	42470e80 	.word	0x42470e80
 8001b18:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b1c:	b9e5      	cbnz	r5, 8001b58 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1e:	69a3      	ldr	r3, [r4, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d05b      	beq.n	8001bdc <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b24:	4a30      	ldr	r2, [pc, #192]	; (8001be8 <HAL_RCC_OscConfig+0x390>)
 8001b26:	6892      	ldr	r2, [r2, #8]
 8001b28:	f002 020c 	and.w	r2, r2, #12
 8001b2c:	2a08      	cmp	r2, #8
 8001b2e:	d058      	beq.n	8001be2 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d017      	beq.n	8001b64 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b34:	2200      	movs	r2, #0
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_RCC_OscConfig+0x394>)
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7fe fd0f 	bl	800055c <HAL_GetTick>
 8001b3e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b40:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_RCC_OscConfig+0x390>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b48:	d042      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4a:	f7fe fd07 	bl	800055c <HAL_GetTick>
 8001b4e:	1b00      	subs	r0, r0, r4
 8001b50:	2802      	cmp	r0, #2
 8001b52:	d9f5      	bls.n	8001b40 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001b54:	2003      	movs	r0, #3
 8001b56:	e042      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b58:	4a23      	ldr	r2, [pc, #140]	; (8001be8 <HAL_RCC_OscConfig+0x390>)
 8001b5a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	e7dc      	b.n	8001b1e <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8001b64:	2200      	movs	r2, #0
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_RCC_OscConfig+0x394>)
 8001b68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b6a:	f7fe fcf7 	bl	800055c <HAL_GetTick>
 8001b6e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b70:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_RCC_OscConfig+0x390>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b78:	d006      	beq.n	8001b88 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7fe fcef 	bl	800055c <HAL_GetTick>
 8001b7e:	1b40      	subs	r0, r0, r5
 8001b80:	2802      	cmp	r0, #2
 8001b82:	d9f5      	bls.n	8001b70 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001b84:	2003      	movs	r0, #3
 8001b86:	e02a      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b88:	69e3      	ldr	r3, [r4, #28]
 8001b8a:	6a22      	ldr	r2, [r4, #32]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b90:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b96:	0852      	lsrs	r2, r2, #1
 8001b98:	3a01      	subs	r2, #1
 8001b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ba0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ba4:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <HAL_RCC_OscConfig+0x390>)
 8001ba6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_RCC_OscConfig+0x394>)
 8001bac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bae:	f7fe fcd5 	bl	800055c <HAL_GetTick>
 8001bb2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_RCC_OscConfig+0x390>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bbc:	d106      	bne.n	8001bcc <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7fe fccd 	bl	800055c <HAL_GetTick>
 8001bc2:	1b00      	subs	r0, r0, r4
 8001bc4:	2802      	cmp	r0, #2
 8001bc6:	d9f5      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001bc8:	2003      	movs	r0, #3
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001bcc:	2000      	movs	r0, #0
 8001bce:	e006      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	e004      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	4770      	bx	lr
        return HAL_ERROR;
 8001bd8:	2001      	movs	r0, #1
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8001bdc:	2000      	movs	r0, #0
}
 8001bde:	b002      	add	sp, #8
 8001be0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001be2:	2001      	movs	r0, #1
 8001be4:	e7fb      	b.n	8001bde <HAL_RCC_OscConfig+0x386>
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	42470060 	.word	0x42470060

08001bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d059      	beq.n	8001cb2 <HAL_RCC_GetSysClockFreq+0xc2>
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c02:	482e      	ldr	r0, [pc, #184]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c06:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001c14:	d02a      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001c1e:	461e      	mov	r6, r3
 8001c20:	2700      	movs	r7, #0
 8001c22:	015c      	lsls	r4, r3, #5
 8001c24:	2500      	movs	r5, #0
 8001c26:	1ae4      	subs	r4, r4, r3
 8001c28:	eb65 0507 	sbc.w	r5, r5, r7
 8001c2c:	01a9      	lsls	r1, r5, #6
 8001c2e:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001c32:	01a0      	lsls	r0, r4, #6
 8001c34:	1b00      	subs	r0, r0, r4
 8001c36:	eb61 0105 	sbc.w	r1, r1, r5
 8001c3a:	00cb      	lsls	r3, r1, #3
 8001c3c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c40:	00c4      	lsls	r4, r0, #3
 8001c42:	19a0      	adds	r0, r4, r6
 8001c44:	eb43 0107 	adc.w	r1, r3, r7
 8001c48:	024b      	lsls	r3, r1, #9
 8001c4a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001c4e:	0244      	lsls	r4, r0, #9
 8001c50:	4620      	mov	r0, r4
 8001c52:	4619      	mov	r1, r3
 8001c54:	2300      	movs	r3, #0
 8001c56:	f7fe fad3 	bl	8000200 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c62:	3301      	adds	r3, #1
 8001c64:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001c66:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001c74:	461e      	mov	r6, r3
 8001c76:	2700      	movs	r7, #0
 8001c78:	015c      	lsls	r4, r3, #5
 8001c7a:	2500      	movs	r5, #0
 8001c7c:	1ae4      	subs	r4, r4, r3
 8001c7e:	eb65 0507 	sbc.w	r5, r5, r7
 8001c82:	01a9      	lsls	r1, r5, #6
 8001c84:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001c88:	01a0      	lsls	r0, r4, #6
 8001c8a:	1b00      	subs	r0, r0, r4
 8001c8c:	eb61 0105 	sbc.w	r1, r1, r5
 8001c90:	00cb      	lsls	r3, r1, #3
 8001c92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c96:	00c4      	lsls	r4, r0, #3
 8001c98:	19a0      	adds	r0, r4, r6
 8001c9a:	eb43 0107 	adc.w	r1, r3, r7
 8001c9e:	028b      	lsls	r3, r1, #10
 8001ca0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001ca4:	0284      	lsls	r4, r0, #10
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	2300      	movs	r3, #0
 8001cac:	f7fe faa8 	bl	8000200 <__aeabi_uldivmod>
 8001cb0:	e7d3      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8001cb2:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	00f42400 	.word	0x00f42400
 8001cc0:	007a1200 	.word	0x007a1200

08001cc4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	f000 809d 	beq.w	8001e04 <HAL_RCC_ClockConfig+0x140>
{
 8001cca:	b570      	push	{r4, r5, r6, lr}
 8001ccc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cce:	4b4f      	ldr	r3, [pc, #316]	; (8001e0c <HAL_RCC_ClockConfig+0x148>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	428b      	cmp	r3, r1
 8001cd8:	d209      	bcs.n	8001cee <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	b2cb      	uxtb	r3, r1
 8001cdc:	4a4b      	ldr	r2, [pc, #300]	; (8001e0c <HAL_RCC_ClockConfig+0x148>)
 8001cde:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce0:	6813      	ldr	r3, [r2, #0]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	4299      	cmp	r1, r3
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8001cea:	2001      	movs	r0, #1
 8001cec:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	f013 0f02 	tst.w	r3, #2
 8001cf4:	d017      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf6:	f013 0f04 	tst.w	r3, #4
 8001cfa:	d004      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cfc:	4a44      	ldr	r2, [pc, #272]	; (8001e10 <HAL_RCC_ClockConfig+0x14c>)
 8001cfe:	6893      	ldr	r3, [r2, #8]
 8001d00:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d04:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d06:	6823      	ldr	r3, [r4, #0]
 8001d08:	f013 0f08 	tst.w	r3, #8
 8001d0c:	d004      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d0e:	4a40      	ldr	r2, [pc, #256]	; (8001e10 <HAL_RCC_ClockConfig+0x14c>)
 8001d10:	6893      	ldr	r3, [r2, #8]
 8001d12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d16:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d18:	4a3d      	ldr	r2, [pc, #244]	; (8001e10 <HAL_RCC_ClockConfig+0x14c>)
 8001d1a:	6893      	ldr	r3, [r2, #8]
 8001d1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d20:	68a0      	ldr	r0, [r4, #8]
 8001d22:	4303      	orrs	r3, r0
 8001d24:	6093      	str	r3, [r2, #8]
 8001d26:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	f013 0f01 	tst.w	r3, #1
 8001d2e:	d032      	beq.n	8001d96 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d30:	6863      	ldr	r3, [r4, #4]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d021      	beq.n	8001d7a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d36:	1e9a      	subs	r2, r3, #2
 8001d38:	2a01      	cmp	r2, #1
 8001d3a:	d925      	bls.n	8001d88 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	4a34      	ldr	r2, [pc, #208]	; (8001e10 <HAL_RCC_ClockConfig+0x14c>)
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	f012 0f02 	tst.w	r2, #2
 8001d44:	d060      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d46:	4932      	ldr	r1, [pc, #200]	; (8001e10 <HAL_RCC_ClockConfig+0x14c>)
 8001d48:	688a      	ldr	r2, [r1, #8]
 8001d4a:	f022 0203 	bic.w	r2, r2, #3
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001d52:	f7fe fc03 	bl	800055c <HAL_GetTick>
 8001d56:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_RCC_ClockConfig+0x14c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	6862      	ldr	r2, [r4, #4]
 8001d62:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d66:	d016      	beq.n	8001d96 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d68:	f7fe fbf8 	bl	800055c <HAL_GetTick>
 8001d6c:	1b80      	subs	r0, r0, r6
 8001d6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d72:	4298      	cmp	r0, r3
 8001d74:	d9f0      	bls.n	8001d58 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8001d76:	2003      	movs	r0, #3
 8001d78:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	4a25      	ldr	r2, [pc, #148]	; (8001e10 <HAL_RCC_ClockConfig+0x14c>)
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001d82:	d1e0      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001d84:	2001      	movs	r0, #1
 8001d86:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d88:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <HAL_RCC_ClockConfig+0x14c>)
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001d90:	d1d9      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001d92:	2001      	movs	r0, #1
 8001d94:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_ClockConfig+0x148>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	429d      	cmp	r5, r3
 8001da0:	d209      	bcs.n	8001db6 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	b2ea      	uxtb	r2, r5
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_RCC_ClockConfig+0x148>)
 8001da6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	429d      	cmp	r5, r3
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8001db2:	2001      	movs	r0, #1
}
 8001db4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	f013 0f04 	tst.w	r3, #4
 8001dbc:	d006      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dbe:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <HAL_RCC_ClockConfig+0x14c>)
 8001dc0:	6893      	ldr	r3, [r2, #8]
 8001dc2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001dc6:	68e1      	ldr	r1, [r4, #12]
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	f013 0f08 	tst.w	r3, #8
 8001dd2:	d007      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <HAL_RCC_ClockConfig+0x14c>)
 8001dd6:	6893      	ldr	r3, [r2, #8]
 8001dd8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001ddc:	6921      	ldr	r1, [r4, #16]
 8001dde:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001de2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001de4:	f7ff ff04 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_RCC_ClockConfig+0x14c>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001df0:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <HAL_RCC_ClockConfig+0x150>)
 8001df2:	5cd3      	ldrb	r3, [r2, r3]
 8001df4:	40d8      	lsrs	r0, r3
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_RCC_ClockConfig+0x154>)
 8001df8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f002 f9dc 	bl	80041b8 <HAL_InitTick>
  return HAL_OK;
 8001e00:	2000      	movs	r0, #0
 8001e02:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001e04:	2001      	movs	r0, #1
 8001e06:	4770      	bx	lr
        return HAL_ERROR;
 8001e08:	2001      	movs	r0, #1
 8001e0a:	bd70      	pop	{r4, r5, r6, pc}
 8001e0c:	40023c00 	.word	0x40023c00
 8001e10:	40023800 	.word	0x40023800
 8001e14:	080048cc 	.word	0x080048cc
 8001e18:	20000018 	.word	0x20000018

08001e1c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001e1c:	4b01      	ldr	r3, [pc, #4]	; (8001e24 <HAL_RCC_GetHCLKFreq+0x8>)
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000018 	.word	0x20000018

08001e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e28:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e2a:	f7ff fff7 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001e36:	4a03      	ldr	r2, [pc, #12]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e38:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e3a:	40d8      	lsrs	r0, r3
 8001e3c:	bd08      	pop	{r3, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	080048dc 	.word	0x080048dc

08001e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e48:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e4a:	f7ff ffe7 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001e56:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e58:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e5a:	40d8      	lsrs	r0, r3
 8001e5c:	bd08      	pop	{r3, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	080048dc 	.word	0x080048dc

08001e68 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e68:	230f      	movs	r3, #15
 8001e6a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_GetClockConfig+0x34>)
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	f002 0203 	and.w	r2, r2, #3
 8001e74:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001e7c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001e84:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001e8e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_RCC_GetClockConfig+0x38>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	600b      	str	r3, [r1, #0]
 8001e9a:	4770      	bx	lr
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40023c00 	.word	0x40023c00

08001ea4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ea6:	6802      	ldr	r2, [r0, #0]
 8001ea8:	68d3      	ldr	r3, [r2, #12]
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb0:	6802      	ldr	r2, [r0, #0]
 8001eb2:	6893      	ldr	r3, [r2, #8]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb8:	2b06      	cmp	r3, #6
 8001eba:	d003      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 8001ebc:	6813      	ldr	r3, [r2, #0]
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	4770      	bx	lr

08001eca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eca:	4770      	bx	lr

08001ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	4770      	bx	lr

08001ece <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ece:	4770      	bx	lr

08001ed0 <HAL_TIM_IRQHandler>:
{
 8001ed0:	b510      	push	{r4, lr}
 8001ed2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ed4:	6803      	ldr	r3, [r0, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	f012 0f02 	tst.w	r2, #2
 8001edc:	d011      	beq.n	8001f02 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	f012 0f02 	tst.w	r2, #2
 8001ee4:	d00d      	beq.n	8001f02 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ee6:	f06f 0202 	mvn.w	r2, #2
 8001eea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ef0:	6803      	ldr	r3, [r0, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f013 0f03 	tst.w	r3, #3
 8001ef8:	d070      	beq.n	8001fdc <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	f7ff ffe6 	bl	8001eca <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efe:	2300      	movs	r3, #0
 8001f00:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	f012 0f04 	tst.w	r2, #4
 8001f0a:	d012      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	f012 0f04 	tst.w	r2, #4
 8001f12:	d00e      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f14:	f06f 0204 	mvn.w	r2, #4
 8001f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f26:	d05f      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f7ff ffce 	bl	8001eca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	f012 0f08 	tst.w	r2, #8
 8001f3a:	d012      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	f012 0f08 	tst.w	r2, #8
 8001f42:	d00e      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f44:	f06f 0208 	mvn.w	r2, #8
 8001f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f013 0f03 	tst.w	r3, #3
 8001f56:	d04e      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7ff ffb6 	bl	8001eca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	f012 0f10 	tst.w	r2, #16
 8001f6a:	d012      	beq.n	8001f92 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	f012 0f10 	tst.w	r2, #16
 8001f72:	d00e      	beq.n	8001f92 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f74:	f06f 0210 	mvn.w	r2, #16
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f7a:	2308      	movs	r3, #8
 8001f7c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f86:	d03d      	beq.n	8002004 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7ff ff9e 	bl	8001eca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	f012 0f01 	tst.w	r2, #1
 8001f9a:	d003      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	f012 0f01 	tst.w	r2, #1
 8001fa2:	d136      	bne.n	8002012 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001fb4:	d134      	bne.n	8002020 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001fbe:	d003      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001fc6:	d132      	bne.n	800202e <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	f012 0f20 	tst.w	r2, #32
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	f012 0f20 	tst.w	r2, #32
 8001fd8:	d130      	bne.n	800203c <HAL_TIM_IRQHandler+0x16c>
 8001fda:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fdc:	f7ff ff74 	bl	8001ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f7ff ff73 	bl	8001ecc <HAL_TIM_PWM_PulseFinishedCallback>
 8001fe6:	e78a      	b.n	8001efe <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7ff ff6d 	bl	8001ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff ff6c 	bl	8001ecc <HAL_TIM_PWM_PulseFinishedCallback>
 8001ff4:	e79b      	b.n	8001f2e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f7ff ff66 	bl	8001ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f7ff ff65 	bl	8001ecc <HAL_TIM_PWM_PulseFinishedCallback>
 8002002:	e7ac      	b.n	8001f5e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002004:	4620      	mov	r0, r4
 8002006:	f7ff ff5f 	bl	8001ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200a:	4620      	mov	r0, r4
 800200c:	f7ff ff5e 	bl	8001ecc <HAL_TIM_PWM_PulseFinishedCallback>
 8002010:	e7bd      	b.n	8001f8e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002012:	f06f 0201 	mvn.w	r2, #1
 8002016:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002018:	4620      	mov	r0, r4
 800201a:	f002 f895 	bl	8004148 <HAL_TIM_PeriodElapsedCallback>
 800201e:	e7c1      	b.n	8001fa4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002024:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002026:	4620      	mov	r0, r4
 8002028:	f000 f890 	bl	800214c <HAL_TIMEx_BreakCallback>
 800202c:	e7c3      	b.n	8001fb6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800202e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002032:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002034:	4620      	mov	r0, r4
 8002036:	f7ff ff4a 	bl	8001ece <HAL_TIM_TriggerCallback>
 800203a:	e7c5      	b.n	8001fc8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800203c:	f06f 0220 	mvn.w	r2, #32
 8002040:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002042:	4620      	mov	r0, r4
 8002044:	f000 f881 	bl	800214a <HAL_TIMEx_CommutCallback>
}
 8002048:	e7c7      	b.n	8001fda <HAL_TIM_IRQHandler+0x10a>
	...

0800204c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800204c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800204e:	4a31      	ldr	r2, [pc, #196]	; (8002114 <TIM_Base_SetConfig+0xc8>)
 8002050:	4290      	cmp	r0, r2
 8002052:	d012      	beq.n	800207a <TIM_Base_SetConfig+0x2e>
 8002054:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002058:	d00f      	beq.n	800207a <TIM_Base_SetConfig+0x2e>
 800205a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800205e:	4290      	cmp	r0, r2
 8002060:	d00b      	beq.n	800207a <TIM_Base_SetConfig+0x2e>
 8002062:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002066:	4290      	cmp	r0, r2
 8002068:	d007      	beq.n	800207a <TIM_Base_SetConfig+0x2e>
 800206a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800206e:	4290      	cmp	r0, r2
 8002070:	d003      	beq.n	800207a <TIM_Base_SetConfig+0x2e>
 8002072:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002076:	4290      	cmp	r0, r2
 8002078:	d103      	bne.n	8002082 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800207a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800207e:	684a      	ldr	r2, [r1, #4]
 8002080:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002082:	4a24      	ldr	r2, [pc, #144]	; (8002114 <TIM_Base_SetConfig+0xc8>)
 8002084:	4290      	cmp	r0, r2
 8002086:	d02a      	beq.n	80020de <TIM_Base_SetConfig+0x92>
 8002088:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800208c:	d027      	beq.n	80020de <TIM_Base_SetConfig+0x92>
 800208e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002092:	4290      	cmp	r0, r2
 8002094:	d023      	beq.n	80020de <TIM_Base_SetConfig+0x92>
 8002096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800209a:	4290      	cmp	r0, r2
 800209c:	d01f      	beq.n	80020de <TIM_Base_SetConfig+0x92>
 800209e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020a2:	4290      	cmp	r0, r2
 80020a4:	d01b      	beq.n	80020de <TIM_Base_SetConfig+0x92>
 80020a6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80020aa:	4290      	cmp	r0, r2
 80020ac:	d017      	beq.n	80020de <TIM_Base_SetConfig+0x92>
 80020ae:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80020b2:	4290      	cmp	r0, r2
 80020b4:	d013      	beq.n	80020de <TIM_Base_SetConfig+0x92>
 80020b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020ba:	4290      	cmp	r0, r2
 80020bc:	d00f      	beq.n	80020de <TIM_Base_SetConfig+0x92>
 80020be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020c2:	4290      	cmp	r0, r2
 80020c4:	d00b      	beq.n	80020de <TIM_Base_SetConfig+0x92>
 80020c6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80020ca:	4290      	cmp	r0, r2
 80020cc:	d007      	beq.n	80020de <TIM_Base_SetConfig+0x92>
 80020ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020d2:	4290      	cmp	r0, r2
 80020d4:	d003      	beq.n	80020de <TIM_Base_SetConfig+0x92>
 80020d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020da:	4290      	cmp	r0, r2
 80020dc:	d103      	bne.n	80020e6 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e2:	68ca      	ldr	r2, [r1, #12]
 80020e4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020ea:	694a      	ldr	r2, [r1, #20]
 80020ec:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80020ee:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f0:	688b      	ldr	r3, [r1, #8]
 80020f2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020f4:	680b      	ldr	r3, [r1, #0]
 80020f6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <TIM_Base_SetConfig+0xc8>)
 80020fa:	4298      	cmp	r0, r3
 80020fc:	d006      	beq.n	800210c <TIM_Base_SetConfig+0xc0>
 80020fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002102:	4298      	cmp	r0, r3
 8002104:	d002      	beq.n	800210c <TIM_Base_SetConfig+0xc0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002106:	2301      	movs	r3, #1
 8002108:	6143      	str	r3, [r0, #20]
 800210a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800210c:	690b      	ldr	r3, [r1, #16]
 800210e:	6303      	str	r3, [r0, #48]	; 0x30
 8002110:	e7f9      	b.n	8002106 <TIM_Base_SetConfig+0xba>
 8002112:	bf00      	nop
 8002114:	40010000 	.word	0x40010000

08002118 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002118:	b1a8      	cbz	r0, 8002146 <HAL_TIM_Base_Init+0x2e>
{
 800211a:	b510      	push	{r4, lr}
 800211c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800211e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002122:	b15b      	cbz	r3, 800213c <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002124:	2302      	movs	r3, #2
 8002126:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800212a:	1d21      	adds	r1, r4, #4
 800212c:	6820      	ldr	r0, [r4, #0]
 800212e:	f7ff ff8d 	bl	800204c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002132:	2301      	movs	r3, #1
 8002134:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002138:	2000      	movs	r0, #0
 800213a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800213c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002140:	f7ff feb0 	bl	8001ea4 <HAL_TIM_Base_MspInit>
 8002144:	e7ee      	b.n	8002124 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002146:	2001      	movs	r0, #1
 8002148:	4770      	bx	lr

0800214a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800214a:	4770      	bx	lr

0800214c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800214c:	4770      	bx	lr
	...

08002150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002154:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002156:	6802      	ldr	r2, [r0, #0]
 8002158:	6913      	ldr	r3, [r2, #16]
 800215a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800215e:	68c1      	ldr	r1, [r0, #12]
 8002160:	430b      	orrs	r3, r1
 8002162:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002164:	6883      	ldr	r3, [r0, #8]
 8002166:	6902      	ldr	r2, [r0, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	6942      	ldr	r2, [r0, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	69c2      	ldr	r2, [r0, #28]
 8002170:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 8002172:	6801      	ldr	r1, [r0, #0]
 8002174:	68ca      	ldr	r2, [r1, #12]
 8002176:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 800217a:	f022 020c 	bic.w	r2, r2, #12
 800217e:	4313      	orrs	r3, r2
 8002180:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002182:	6802      	ldr	r2, [r0, #0]
 8002184:	6953      	ldr	r3, [r2, #20]
 8002186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218a:	6981      	ldr	r1, [r0, #24]
 800218c:	430b      	orrs	r3, r1
 800218e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002190:	69c3      	ldr	r3, [r0, #28]
 8002192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002196:	d062      	beq.n	800225e <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002198:	f8d0 8000 	ldr.w	r8, [r0]
 800219c:	4bbb      	ldr	r3, [pc, #748]	; (800248c <UART_SetConfig+0x33c>)
 800219e:	4598      	cmp	r8, r3
 80021a0:	f000 811b 	beq.w	80023da <UART_SetConfig+0x28a>
 80021a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021a8:	4598      	cmp	r8, r3
 80021aa:	f000 8116 	beq.w	80023da <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021ae:	f7ff fe3b 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 80021b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021ba:	6865      	ldr	r5, [r4, #4]
 80021bc:	00ad      	lsls	r5, r5, #2
 80021be:	fbb0 f5f5 	udiv	r5, r0, r5
 80021c2:	4fb3      	ldr	r7, [pc, #716]	; (8002490 <UART_SetConfig+0x340>)
 80021c4:	fba7 3505 	umull	r3, r5, r7, r5
 80021c8:	096d      	lsrs	r5, r5, #5
 80021ca:	012e      	lsls	r6, r5, #4
 80021cc:	f7ff fe2c 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 80021d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021d8:	6865      	ldr	r5, [r4, #4]
 80021da:	00ad      	lsls	r5, r5, #2
 80021dc:	fbb0 faf5 	udiv	sl, r0, r5
 80021e0:	f7ff fe22 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 80021e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021ec:	6865      	ldr	r5, [r4, #4]
 80021ee:	00ad      	lsls	r5, r5, #2
 80021f0:	fbb0 f5f5 	udiv	r5, r0, r5
 80021f4:	fba7 3505 	umull	r3, r5, r7, r5
 80021f8:	096d      	lsrs	r5, r5, #5
 80021fa:	f04f 0964 	mov.w	r9, #100	; 0x64
 80021fe:	fb09 a515 	mls	r5, r9, r5, sl
 8002202:	012d      	lsls	r5, r5, #4
 8002204:	3532      	adds	r5, #50	; 0x32
 8002206:	fba7 3505 	umull	r3, r5, r7, r5
 800220a:	096d      	lsrs	r5, r5, #5
 800220c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002210:	4435      	add	r5, r6
 8002212:	f7ff fe09 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8002216:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800221a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800221e:	6866      	ldr	r6, [r4, #4]
 8002220:	00b6      	lsls	r6, r6, #2
 8002222:	fbb0 f6f6 	udiv	r6, r0, r6
 8002226:	f7ff fdff 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 800222a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800222e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002232:	6863      	ldr	r3, [r4, #4]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	fbb0 f0f3 	udiv	r0, r0, r3
 800223a:	fba7 3000 	umull	r3, r0, r7, r0
 800223e:	0940      	lsrs	r0, r0, #5
 8002240:	fb09 6910 	mls	r9, r9, r0, r6
 8002244:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8002248:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800224c:	fba7 3709 	umull	r3, r7, r7, r9
 8002250:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002254:	442f      	add	r7, r5
 8002256:	f8c8 7008 	str.w	r7, [r8, #8]
 800225a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800225e:	f8d0 8000 	ldr.w	r8, [r0]
 8002262:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002266:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 800226a:	4598      	cmp	r8, r3
 800226c:	d05c      	beq.n	8002328 <UART_SetConfig+0x1d8>
 800226e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002272:	4598      	cmp	r8, r3
 8002274:	d058      	beq.n	8002328 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002276:	f7ff fdd7 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 800227a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800227e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002282:	6865      	ldr	r5, [r4, #4]
 8002284:	006d      	lsls	r5, r5, #1
 8002286:	fbb0 f5f5 	udiv	r5, r0, r5
 800228a:	4f81      	ldr	r7, [pc, #516]	; (8002490 <UART_SetConfig+0x340>)
 800228c:	fba7 3505 	umull	r3, r5, r7, r5
 8002290:	096d      	lsrs	r5, r5, #5
 8002292:	012e      	lsls	r6, r5, #4
 8002294:	f7ff fdc8 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 8002298:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800229c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022a0:	6865      	ldr	r5, [r4, #4]
 80022a2:	006d      	lsls	r5, r5, #1
 80022a4:	fbb0 faf5 	udiv	sl, r0, r5
 80022a8:	f7ff fdbe 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 80022ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022b4:	6865      	ldr	r5, [r4, #4]
 80022b6:	006d      	lsls	r5, r5, #1
 80022b8:	fbb0 f5f5 	udiv	r5, r0, r5
 80022bc:	fba7 3505 	umull	r3, r5, r7, r5
 80022c0:	096d      	lsrs	r5, r5, #5
 80022c2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80022c6:	fb09 a515 	mls	r5, r9, r5, sl
 80022ca:	00ed      	lsls	r5, r5, #3
 80022cc:	3532      	adds	r5, #50	; 0x32
 80022ce:	fba7 3505 	umull	r3, r5, r7, r5
 80022d2:	096d      	lsrs	r5, r5, #5
 80022d4:	006d      	lsls	r5, r5, #1
 80022d6:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80022da:	4435      	add	r5, r6
 80022dc:	f7ff fda4 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 80022e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022e8:	6866      	ldr	r6, [r4, #4]
 80022ea:	0076      	lsls	r6, r6, #1
 80022ec:	fbb0 f6f6 	udiv	r6, r0, r6
 80022f0:	f7ff fd9a 	bl	8001e28 <HAL_RCC_GetPCLK1Freq>
 80022f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022fc:	6863      	ldr	r3, [r4, #4]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fbb0 f3f3 	udiv	r3, r0, r3
 8002304:	fba7 2303 	umull	r2, r3, r7, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	fb09 6913 	mls	r9, r9, r3, r6
 800230e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8002312:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002316:	fba7 3709 	umull	r3, r7, r7, r9
 800231a:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800231e:	442f      	add	r7, r5
 8002320:	f8c8 7008 	str.w	r7, [r8, #8]
 8002324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002328:	f7ff fd8e 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 800232c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002330:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002334:	6865      	ldr	r5, [r4, #4]
 8002336:	006d      	lsls	r5, r5, #1
 8002338:	fbb0 f5f5 	udiv	r5, r0, r5
 800233c:	4f54      	ldr	r7, [pc, #336]	; (8002490 <UART_SetConfig+0x340>)
 800233e:	fba7 3505 	umull	r3, r5, r7, r5
 8002342:	096d      	lsrs	r5, r5, #5
 8002344:	012e      	lsls	r6, r5, #4
 8002346:	f7ff fd7f 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 800234a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800234e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002352:	6865      	ldr	r5, [r4, #4]
 8002354:	006d      	lsls	r5, r5, #1
 8002356:	fbb0 faf5 	udiv	sl, r0, r5
 800235a:	f7ff fd75 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 800235e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002362:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002366:	6865      	ldr	r5, [r4, #4]
 8002368:	006d      	lsls	r5, r5, #1
 800236a:	fbb0 f5f5 	udiv	r5, r0, r5
 800236e:	fba7 3505 	umull	r3, r5, r7, r5
 8002372:	096d      	lsrs	r5, r5, #5
 8002374:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002378:	fb09 a515 	mls	r5, r9, r5, sl
 800237c:	00ed      	lsls	r5, r5, #3
 800237e:	3532      	adds	r5, #50	; 0x32
 8002380:	fba7 3505 	umull	r3, r5, r7, r5
 8002384:	096d      	lsrs	r5, r5, #5
 8002386:	006d      	lsls	r5, r5, #1
 8002388:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800238c:	4435      	add	r5, r6
 800238e:	f7ff fd5b 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 8002392:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002396:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800239a:	6866      	ldr	r6, [r4, #4]
 800239c:	0076      	lsls	r6, r6, #1
 800239e:	fbb0 f6f6 	udiv	r6, r0, r6
 80023a2:	f7ff fd51 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 80023a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023ae:	6863      	ldr	r3, [r4, #4]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b6:	fba7 2303 	umull	r2, r3, r7, r3
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	fb09 6913 	mls	r9, r9, r3, r6
 80023c0:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80023c4:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80023c8:	fba7 3709 	umull	r3, r7, r7, r9
 80023cc:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80023d0:	442f      	add	r7, r5
 80023d2:	f8c8 7008 	str.w	r7, [r8, #8]
 80023d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80023da:	f7ff fd35 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 80023de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023e6:	6865      	ldr	r5, [r4, #4]
 80023e8:	00ad      	lsls	r5, r5, #2
 80023ea:	fbb0 f5f5 	udiv	r5, r0, r5
 80023ee:	4f28      	ldr	r7, [pc, #160]	; (8002490 <UART_SetConfig+0x340>)
 80023f0:	fba7 3505 	umull	r3, r5, r7, r5
 80023f4:	096d      	lsrs	r5, r5, #5
 80023f6:	012e      	lsls	r6, r5, #4
 80023f8:	f7ff fd26 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 80023fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002400:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002404:	6865      	ldr	r5, [r4, #4]
 8002406:	00ad      	lsls	r5, r5, #2
 8002408:	fbb0 faf5 	udiv	sl, r0, r5
 800240c:	f7ff fd1c 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 8002410:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002414:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002418:	6865      	ldr	r5, [r4, #4]
 800241a:	00ad      	lsls	r5, r5, #2
 800241c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002420:	fba7 3505 	umull	r3, r5, r7, r5
 8002424:	096d      	lsrs	r5, r5, #5
 8002426:	f04f 0964 	mov.w	r9, #100	; 0x64
 800242a:	fb09 a515 	mls	r5, r9, r5, sl
 800242e:	012d      	lsls	r5, r5, #4
 8002430:	3532      	adds	r5, #50	; 0x32
 8002432:	fba7 3505 	umull	r3, r5, r7, r5
 8002436:	096d      	lsrs	r5, r5, #5
 8002438:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800243c:	4435      	add	r5, r6
 800243e:	f7ff fd03 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 8002442:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002446:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800244a:	6866      	ldr	r6, [r4, #4]
 800244c:	00b6      	lsls	r6, r6, #2
 800244e:	fbb0 f6f6 	udiv	r6, r0, r6
 8002452:	f7ff fcf9 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 8002456:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800245a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800245e:	6863      	ldr	r3, [r4, #4]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	fbb0 f3f3 	udiv	r3, r0, r3
 8002466:	fba7 2303 	umull	r2, r3, r7, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	fb09 6913 	mls	r9, r9, r3, r6
 8002470:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8002474:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002478:	fba7 3709 	umull	r3, r7, r7, r9
 800247c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002480:	442f      	add	r7, r5
 8002482:	f8c8 7008 	str.w	r7, [r8, #8]
 8002486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800248a:	bf00      	nop
 800248c:	40011000 	.word	0x40011000
 8002490:	51eb851f 	.word	0x51eb851f

08002494 <HAL_UART_Init>:
  if (huart == NULL)
 8002494:	b358      	cbz	r0, 80024ee <HAL_UART_Init+0x5a>
{
 8002496:	b510      	push	{r4, lr}
 8002498:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800249a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800249e:	b30b      	cbz	r3, 80024e4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80024a0:	2324      	movs	r3, #36	; 0x24
 80024a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80024a6:	6822      	ldr	r2, [r4, #0]
 80024a8:	68d3      	ldr	r3, [r2, #12]
 80024aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024ae:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80024b0:	4620      	mov	r0, r4
 80024b2:	f7ff fe4d 	bl	8002150 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b6:	6822      	ldr	r2, [r4, #0]
 80024b8:	6913      	ldr	r3, [r2, #16]
 80024ba:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80024be:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c0:	6822      	ldr	r2, [r4, #0]
 80024c2:	6953      	ldr	r3, [r2, #20]
 80024c4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80024c8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80024ca:	6822      	ldr	r2, [r4, #0]
 80024cc:	68d3      	ldr	r3, [r2, #12]
 80024ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024d2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d4:	2000      	movs	r0, #0
 80024d6:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024d8:	2320      	movs	r3, #32
 80024da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80024e2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80024e4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80024e8:	f002 f822 	bl	8004530 <HAL_UART_MspInit>
 80024ec:	e7d8      	b.n	80024a0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80024ee:	2001      	movs	r0, #1
 80024f0:	4770      	bx	lr
	...

080024f4 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 80024f4:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80024f6:	3301      	adds	r3, #1
 80024f8:	4a0c      	ldr	r2, [pc, #48]	; (800252c <USB_CoreReset+0x38>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d811      	bhi.n	8002522 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80024fe:	6902      	ldr	r2, [r0, #16]
 8002500:	2a00      	cmp	r2, #0
 8002502:	daf8      	bge.n	80024f6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002504:	6903      	ldr	r3, [r0, #16]
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6103      	str	r3, [r0, #16]
  count = 0U;
 800250c:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 800250e:	3301      	adds	r3, #1
 8002510:	4a06      	ldr	r2, [pc, #24]	; (800252c <USB_CoreReset+0x38>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d807      	bhi.n	8002526 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002516:	6902      	ldr	r2, [r0, #16]
 8002518:	f012 0f01 	tst.w	r2, #1
 800251c:	d1f7      	bne.n	800250e <USB_CoreReset+0x1a>

  return HAL_OK;
 800251e:	2000      	movs	r0, #0
 8002520:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002522:	2003      	movs	r0, #3
 8002524:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002526:	2003      	movs	r0, #3
}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	00030d40 	.word	0x00030d40

08002530 <USB_CoreInit>:
{
 8002530:	b084      	sub	sp, #16
 8002532:	b510      	push	{r4, lr}
 8002534:	4604      	mov	r4, r0
 8002536:	a803      	add	r0, sp, #12
 8002538:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800253c:	9b08      	ldr	r3, [sp, #32]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d00d      	beq.n	800255e <USB_CoreInit+0x2e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002542:	68e3      	ldr	r3, [r4, #12]
 8002544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002548:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800254a:	4620      	mov	r0, r4
 800254c:	f7ff ffd2 	bl	80024f4 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002552:	bb23      	cbnz	r3, 800259e <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002554:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255a:	63a3      	str	r3, [r4, #56]	; 0x38
 800255c:	e013      	b.n	8002586 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800255e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002564:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002566:	68e3      	ldr	r3, [r4, #12]
 8002568:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800256c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002570:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002572:	68e3      	ldr	r3, [r4, #12]
 8002574:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002578:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 800257a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d009      	beq.n	8002594 <USB_CoreInit+0x64>
    ret = USB_CoreReset(USBx);
 8002580:	4620      	mov	r0, r4
 8002582:	f7ff ffb7 	bl	80024f4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002586:	9b06      	ldr	r3, [sp, #24]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d00d      	beq.n	80025a8 <USB_CoreInit+0x78>
}
 800258c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002590:	b004      	add	sp, #16
 8002592:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002594:	68e3      	ldr	r3, [r4, #12]
 8002596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800259a:	60e3      	str	r3, [r4, #12]
 800259c:	e7f0      	b.n	8002580 <USB_CoreInit+0x50>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800259e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80025a6:	e7ee      	b.n	8002586 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80025a8:	68a3      	ldr	r3, [r4, #8]
 80025aa:	f043 0306 	orr.w	r3, r3, #6
 80025ae:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80025b0:	68a3      	ldr	r3, [r4, #8]
 80025b2:	f043 0320 	orr.w	r3, r3, #32
 80025b6:	60a3      	str	r3, [r4, #8]
 80025b8:	e7e8      	b.n	800258c <USB_CoreInit+0x5c>

080025ba <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80025ba:	6883      	ldr	r3, [r0, #8]
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	6083      	str	r3, [r0, #8]
}
 80025c2:	2000      	movs	r0, #0
 80025c4:	4770      	bx	lr

080025c6 <USB_SetCurrentMode>:
{
 80025c6:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80025c8:	68c3      	ldr	r3, [r0, #12]
 80025ca:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80025ce:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80025d0:	2901      	cmp	r1, #1
 80025d2:	d009      	beq.n	80025e8 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 80025d4:	b969      	cbnz	r1, 80025f2 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80025d6:	68c3      	ldr	r3, [r0, #12]
 80025d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025dc:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80025de:	2032      	movs	r0, #50	; 0x32
 80025e0:	f7fd ffc2 	bl	8000568 <HAL_Delay>
  return HAL_OK;
 80025e4:	2000      	movs	r0, #0
 80025e6:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80025e8:	68c3      	ldr	r3, [r0, #12]
 80025ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025ee:	60c3      	str	r3, [r0, #12]
 80025f0:	e7f5      	b.n	80025de <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 80025f2:	2001      	movs	r0, #1
}
 80025f4:	bd08      	pop	{r3, pc}
	...

080025f8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80025f8:	0189      	lsls	r1, r1, #6
 80025fa:	f041 0120 	orr.w	r1, r1, #32
 80025fe:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8002600:	2300      	movs	r3, #0
    if (++count > 200000U)
 8002602:	3301      	adds	r3, #1
 8002604:	4a05      	ldr	r2, [pc, #20]	; (800261c <USB_FlushTxFifo+0x24>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d805      	bhi.n	8002616 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800260a:	6902      	ldr	r2, [r0, #16]
 800260c:	f012 0f20 	tst.w	r2, #32
 8002610:	d1f7      	bne.n	8002602 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002612:	2000      	movs	r0, #0
 8002614:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002616:	2003      	movs	r0, #3
}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	00030d40 	.word	0x00030d40

08002620 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002620:	2310      	movs	r3, #16
 8002622:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8002624:	2300      	movs	r3, #0
    if (++count > 200000U)
 8002626:	3301      	adds	r3, #1
 8002628:	4a05      	ldr	r2, [pc, #20]	; (8002640 <USB_FlushRxFifo+0x20>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d805      	bhi.n	800263a <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800262e:	6902      	ldr	r2, [r0, #16]
 8002630:	f012 0f10 	tst.w	r2, #16
 8002634:	d1f7      	bne.n	8002626 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002636:	2000      	movs	r0, #0
 8002638:	4770      	bx	lr
      return HAL_TIMEOUT;
 800263a:	2003      	movs	r0, #3
}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	00030d40 	.word	0x00030d40

08002644 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002644:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002648:	4319      	orrs	r1, r3
 800264a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800264e:	2000      	movs	r0, #0
 8002650:	4770      	bx	lr
	...

08002654 <USB_DevInit>:
{
 8002654:	b084      	sub	sp, #16
 8002656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800265a:	4604      	mov	r4, r0
 800265c:	a807      	add	r0, sp, #28
 800265e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002662:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 8002664:	2300      	movs	r3, #0
 8002666:	e006      	b.n	8002676 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 8002668:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800266c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002670:	2100      	movs	r1, #0
 8002672:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002674:	3301      	adds	r3, #1
 8002676:	2b0e      	cmp	r3, #14
 8002678:	d9f6      	bls.n	8002668 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 800267a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800267c:	bb73      	cbnz	r3, 80026dc <USB_DevInit+0x88>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800267e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002684:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002686:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002688:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800268c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800268e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002694:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800269c:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 80026a0:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80026a4:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80026a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d01f      	beq.n	80026ee <USB_DevInit+0x9a>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80026ae:	2103      	movs	r1, #3
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7ff ffc7 	bl	8002644 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80026b6:	2110      	movs	r1, #16
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7ff ff9d 	bl	80025f8 <USB_FlushTxFifo>
 80026be:	4680      	mov	r8, r0
 80026c0:	b108      	cbz	r0, 80026c6 <USB_DevInit+0x72>
    ret = HAL_ERROR;
 80026c2:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80026c6:	4620      	mov	r0, r4
 80026c8:	f7ff ffaa 	bl	8002620 <USB_FlushRxFifo>
 80026cc:	b108      	cbz	r0, 80026d2 <USB_DevInit+0x7e>
    ret = HAL_ERROR;
 80026ce:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80026d6:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80026d8:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80026da:	e01f      	b.n	800271c <USB_DevInit+0xc8>
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026e2:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80026e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026ea:	63a3      	str	r3, [r4, #56]	; 0x38
 80026ec:	e7d3      	b.n	8002696 <USB_DevInit+0x42>
    if (cfg.speed == USBD_HS_SPEED)
 80026ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026f0:	b923      	cbnz	r3, 80026fc <USB_DevInit+0xa8>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80026f2:	2100      	movs	r1, #0
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff ffa5 	bl	8002644 <USB_SetDevSpeed>
 80026fa:	e7dc      	b.n	80026b6 <USB_DevInit+0x62>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80026fc:	2101      	movs	r1, #1
 80026fe:	4620      	mov	r0, r4
 8002700:	f7ff ffa0 	bl	8002644 <USB_SetDevSpeed>
 8002704:	e7d7      	b.n	80026b6 <USB_DevInit+0x62>
      if (i == 0U)
 8002706:	b9c3      	cbnz	r3, 800273a <USB_DevInit+0xe6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002708:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800270c:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002710:	2200      	movs	r2, #0
 8002712:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002714:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002718:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800271a:	3301      	adds	r3, #1
 800271c:	9907      	ldr	r1, [sp, #28]
 800271e:	428b      	cmp	r3, r1
 8002720:	d210      	bcs.n	8002744 <USB_DevInit+0xf0>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002722:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002726:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 800272a:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 800272e:	2800      	cmp	r0, #0
 8002730:	dbe9      	blt.n	8002706 <USB_DevInit+0xb2>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002732:	2000      	movs	r0, #0
 8002734:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002738:	e7ea      	b.n	8002710 <USB_DevInit+0xbc>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800273a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002742:	e7e5      	b.n	8002710 <USB_DevInit+0xbc>
 8002744:	2300      	movs	r3, #0
 8002746:	e00a      	b.n	800275e <USB_DevInit+0x10a>
      if (i == 0U)
 8002748:	b1bb      	cbz	r3, 800277a <USB_DevInit+0x126>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800274a:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 800274e:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002752:	2200      	movs	r2, #0
 8002754:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002756:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800275a:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800275c:	3301      	adds	r3, #1
 800275e:	428b      	cmp	r3, r1
 8002760:	d210      	bcs.n	8002784 <USB_DevInit+0x130>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002762:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002766:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 800276a:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 800276e:	2f00      	cmp	r7, #0
 8002770:	dbea      	blt.n	8002748 <USB_DevInit+0xf4>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002772:	2700      	movs	r7, #0
 8002774:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8002778:	e7eb      	b.n	8002752 <USB_DevInit+0xfe>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800277a:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 800277e:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8002782:	e7e6      	b.n	8002752 <USB_DevInit+0xfe>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002784:	6933      	ldr	r3, [r6, #16]
 8002786:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800278a:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1U)
 800278c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800278e:	2b01      	cmp	r3, #1
 8002790:	d01b      	beq.n	80027ca <USB_DevInit+0x176>
  USBx->GINTMSK = 0U;
 8002792:	2200      	movs	r2, #0
 8002794:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002796:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800279a:	6162      	str	r2, [r4, #20]
  if (cfg.dma_enable == 0U)
 800279c:	b91b      	cbnz	r3, 80027a6 <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800279e:	69a3      	ldr	r3, [r4, #24]
 80027a0:	f043 0310 	orr.w	r3, r3, #16
 80027a4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80027a6:	69a2      	ldr	r2, [r4, #24]
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <USB_DevInit+0x198>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80027ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027b0:	b11b      	cbz	r3, 80027ba <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80027b2:	69a3      	ldr	r3, [r4, #24]
 80027b4:	f043 0308 	orr.w	r3, r3, #8
 80027b8:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80027ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d00d      	beq.n	80027dc <USB_DevInit+0x188>
}
 80027c0:	4640      	mov	r0, r8
 80027c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027c6:	b004      	add	sp, #16
 80027c8:	4770      	bx	lr
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80027ca:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <USB_DevInit+0x19c>)
 80027cc:	6332      	str	r2, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80027ce:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80027d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027d4:	f042 0203 	orr.w	r2, r2, #3
 80027d8:	6332      	str	r2, [r6, #48]	; 0x30
 80027da:	e7da      	b.n	8002792 <USB_DevInit+0x13e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80027dc:	69a3      	ldr	r3, [r4, #24]
 80027de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027e2:	f043 0304 	orr.w	r3, r3, #4
 80027e6:	61a3      	str	r3, [r4, #24]
 80027e8:	e7ea      	b.n	80027c0 <USB_DevInit+0x16c>
 80027ea:	bf00      	nop
 80027ec:	803c3800 	.word	0x803c3800
 80027f0:	00800100 	.word	0x00800100

080027f4 <USB_DevDisconnect>:
{
 80027f4:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80027f6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002802:	2003      	movs	r0, #3
 8002804:	f7fd feb0 	bl	8000568 <HAL_Delay>
}
 8002808:	2000      	movs	r0, #0
 800280a:	bd08      	pop	{r3, pc}

0800280c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800280c:	2884      	cmp	r0, #132	; 0x84
 800280e:	d001      	beq.n	8002814 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8002810:	3003      	adds	r0, #3
 8002812:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002814:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8002816:	4770      	bx	lr

08002818 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002818:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800281a:	f000 fd29 	bl	8003270 <vTaskStartScheduler>
  
  return osOK;
}
 800281e:	2000      	movs	r0, #0
 8002820:	bd08      	pop	{r3, pc}

08002822 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002822:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002826:	b087      	sub	sp, #28
 8002828:	4604      	mov	r4, r0
 800282a:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800282c:	6945      	ldr	r5, [r0, #20]
 800282e:	b1bd      	cbz	r5, 8002860 <osThreadCreate+0x3e>
 8002830:	6986      	ldr	r6, [r0, #24]
 8002832:	b1ae      	cbz	r6, 8002860 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002834:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8002838:	f8d0 9000 	ldr.w	r9, [r0]
 800283c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8002840:	f7ff ffe4 	bl	800280c <makeFreeRtosPriority>
 8002844:	6922      	ldr	r2, [r4, #16]
 8002846:	9602      	str	r6, [sp, #8]
 8002848:	9501      	str	r5, [sp, #4]
 800284a:	9000      	str	r0, [sp, #0]
 800284c:	463b      	mov	r3, r7
 800284e:	4649      	mov	r1, r9
 8002850:	4640      	mov	r0, r8
 8002852:	f000 fca1 	bl	8003198 <xTaskCreateStatic>
 8002856:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002858:	9805      	ldr	r0, [sp, #20]
}
 800285a:	b007      	add	sp, #28
 800285c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002860:	6865      	ldr	r5, [r4, #4]
 8002862:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002864:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002868:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800286c:	f7ff ffce 	bl	800280c <makeFreeRtosPriority>
 8002870:	ab05      	add	r3, sp, #20
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	9000      	str	r0, [sp, #0]
 8002876:	463b      	mov	r3, r7
 8002878:	fa1f f288 	uxth.w	r2, r8
 800287c:	4631      	mov	r1, r6
 800287e:	4628      	mov	r0, r5
 8002880:	f000 fcc3 	bl	800320a <xTaskCreate>
 8002884:	2801      	cmp	r0, #1
 8002886:	d0e7      	beq.n	8002858 <osThreadCreate+0x36>
      return NULL;
 8002888:	2000      	movs	r0, #0
 800288a:	e7e6      	b.n	800285a <osThreadCreate+0x38>

0800288c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800288c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800288e:	4603      	mov	r3, r0
 8002890:	b900      	cbnz	r0, 8002894 <osDelay+0x8>
 8002892:	2301      	movs	r3, #1
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fe3d 	bl	8003514 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800289a:	2000      	movs	r0, #0
 800289c:	bd08      	pop	{r3, pc}

0800289e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800289e:	f100 0308 	add.w	r3, r0, #8
 80028a2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028a8:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028aa:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028ac:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	6003      	str	r3, [r0, #0]
 80028b2:	4770      	bx	lr

080028b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	6103      	str	r3, [r0, #16]
 80028b8:	4770      	bx	lr

080028ba <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80028ba:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028bc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028c6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028c8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80028ca:	6803      	ldr	r3, [r0, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	6003      	str	r3, [r0, #0]
 80028d0:	4770      	bx	lr

080028d2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028d2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028d4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028d6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80028da:	d002      	beq.n	80028e2 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028dc:	f100 0208 	add.w	r2, r0, #8
 80028e0:	e002      	b.n	80028e8 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 80028e2:	6902      	ldr	r2, [r0, #16]
 80028e4:	e004      	b.n	80028f0 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e6:	461a      	mov	r2, r3
 80028e8:	6853      	ldr	r3, [r2, #4]
 80028ea:	681c      	ldr	r4, [r3, #0]
 80028ec:	42a5      	cmp	r5, r4
 80028ee:	d2fa      	bcs.n	80028e6 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028f0:	6853      	ldr	r3, [r2, #4]
 80028f2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028f4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028f6:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80028f8:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028fa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80028fc:	6803      	ldr	r3, [r0, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	6003      	str	r3, [r0, #0]
}
 8002902:	bc30      	pop	{r4, r5}
 8002904:	4770      	bx	lr

08002906 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002906:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002908:	6842      	ldr	r2, [r0, #4]
 800290a:	6881      	ldr	r1, [r0, #8]
 800290c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800290e:	6882      	ldr	r2, [r0, #8]
 8002910:	6841      	ldr	r1, [r0, #4]
 8002912:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4290      	cmp	r0, r2
 8002918:	d006      	beq.n	8002928 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800291a:	2200      	movs	r2, #0
 800291c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	3a01      	subs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002924:	6818      	ldr	r0, [r3, #0]
}
 8002926:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002928:	6882      	ldr	r2, [r0, #8]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	e7f5      	b.n	800291a <uxListRemove+0x14>
	...

08002930 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002930:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002936:	4b0d      	ldr	r3, [pc, #52]	; (800296c <prvTaskExitError+0x3c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800293e:	d008      	beq.n	8002952 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	e7fe      	b.n	8002950 <prvTaskExitError+0x20>
 8002952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002962:	9b01      	ldr	r3, [sp, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0fc      	beq.n	8002962 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002968:	b002      	add	sp, #8
 800296a:	4770      	bx	lr
 800296c:	20000004 	.word	0x20000004

08002970 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002970:	4808      	ldr	r0, [pc, #32]	; (8002994 <prvPortStartFirstTask+0x24>)
 8002972:	6800      	ldr	r0, [r0, #0]
 8002974:	6800      	ldr	r0, [r0, #0]
 8002976:	f380 8808 	msr	MSP, r0
 800297a:	f04f 0000 	mov.w	r0, #0
 800297e:	f380 8814 	msr	CONTROL, r0
 8002982:	b662      	cpsie	i
 8002984:	b661      	cpsie	f
 8002986:	f3bf 8f4f 	dsb	sy
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	df00      	svc	0
 8002990:	bf00      	nop
 8002992:	0000      	.short	0x0000
 8002994:	e000ed08 	.word	0xe000ed08

08002998 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002998:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80029a8 <vPortEnableVFP+0x10>
 800299c:	6801      	ldr	r1, [r0, #0]
 800299e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80029a2:	6001      	str	r1, [r0, #0]
 80029a4:	4770      	bx	lr
 80029a6:	0000      	.short	0x0000
 80029a8:	e000ed88 	.word	0xe000ed88

080029ac <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80029ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80029b4:	f021 0101 	bic.w	r1, r1, #1
 80029b8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <pxPortInitialiseStack+0x28>)
 80029be:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80029c2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80029c6:	f06f 0302 	mvn.w	r3, #2
 80029ca:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80029ce:	3844      	subs	r0, #68	; 0x44
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	08002931 	.word	0x08002931
	...

080029e0 <SVC_Handler>:
	__asm volatile (
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <pxCurrentTCBConst2>)
 80029e2:	6819      	ldr	r1, [r3, #0]
 80029e4:	6808      	ldr	r0, [r1, #0]
 80029e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ea:	f380 8809 	msr	PSP, r0
 80029ee:	f3bf 8f6f 	isb	sy
 80029f2:	f04f 0000 	mov.w	r0, #0
 80029f6:	f380 8811 	msr	BASEPRI, r0
 80029fa:	4770      	bx	lr
 80029fc:	f3af 8000 	nop.w

08002a00 <pxCurrentTCBConst2>:
 8002a00:	20003c58 	.word	0x20003c58

08002a04 <vPortEnterCritical>:
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002a14:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <vPortEnterCritical+0x3c>)
 8002a16:	6813      	ldr	r3, [r2, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d10d      	bne.n	8002a3c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <vPortEnterCritical+0x40>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002a28:	d008      	beq.n	8002a3c <vPortEnterCritical+0x38>
 8002a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	e7fe      	b.n	8002a3a <vPortEnterCritical+0x36>
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000004 	.word	0x20000004
 8002a44:	e000ed04 	.word	0xe000ed04

08002a48 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <vPortExitCritical+0x28>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	b943      	cbnz	r3, 8002a60 <vPortExitCritical+0x18>
 8002a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a52:	f383 8811 	msr	BASEPRI, r3
 8002a56:	f3bf 8f6f 	isb	sy
 8002a5a:	f3bf 8f4f 	dsb	sy
 8002a5e:	e7fe      	b.n	8002a5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002a60:	3b01      	subs	r3, #1
 8002a62:	4a03      	ldr	r2, [pc, #12]	; (8002a70 <vPortExitCritical+0x28>)
 8002a64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002a66:	b90b      	cbnz	r3, 8002a6c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000004 	.word	0x20000004
	...

08002a80 <PendSV_Handler>:
	__asm volatile
 8002a80:	f3ef 8009 	mrs	r0, PSP
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <pxCurrentTCBConst>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	f01e 0f10 	tst.w	lr, #16
 8002a90:	bf08      	it	eq
 8002a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a9a:	6010      	str	r0, [r2, #0]
 8002a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002aa4:	f380 8811 	msr	BASEPRI, r0
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f000 fd58 	bl	8003564 <vTaskSwitchContext>
 8002ab4:	f04f 0000 	mov.w	r0, #0
 8002ab8:	f380 8811 	msr	BASEPRI, r0
 8002abc:	bc09      	pop	{r0, r3}
 8002abe:	6819      	ldr	r1, [r3, #0]
 8002ac0:	6808      	ldr	r0, [r1, #0]
 8002ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac6:	f01e 0f10 	tst.w	lr, #16
 8002aca:	bf08      	it	eq
 8002acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ad0:	f380 8809 	msr	PSP, r0
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	f3af 8000 	nop.w

08002ae0 <pxCurrentTCBConst>:
 8002ae0:	20003c58 	.word	0x20003c58

08002ae4 <SysTick_Handler>:
{
 8002ae4:	b508      	push	{r3, lr}
	__asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002af6:	f000 fbff 	bl	80032f8 <xTaskIncrementTick>
 8002afa:	b118      	cbz	r0, 8002b04 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b00:	4b02      	ldr	r3, [pc, #8]	; (8002b0c <SysTick_Handler+0x28>)
 8002b02:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002b04:	2300      	movs	r3, #0
 8002b06:	f383 8811 	msr	BASEPRI, r3
 8002b0a:	bd08      	pop	{r3, pc}
 8002b0c:	e000ed04 	.word	0xe000ed04

08002b10 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002b10:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <vPortSetupTimerInterrupt+0x24>)
 8002b12:	2300      	movs	r3, #0
 8002b14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002b16:	4908      	ldr	r1, [pc, #32]	; (8002b38 <vPortSetupTimerInterrupt+0x28>)
 8002b18:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <vPortSetupTimerInterrupt+0x2c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4908      	ldr	r1, [pc, #32]	; (8002b40 <vPortSetupTimerInterrupt+0x30>)
 8002b20:	fba1 1303 	umull	r1, r3, r1, r3
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	3b01      	subs	r3, #1
 8002b28:	4906      	ldr	r1, [pc, #24]	; (8002b44 <vPortSetupTimerInterrupt+0x34>)
 8002b2a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002b2c:	2307      	movs	r3, #7
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000e010 	.word	0xe000e010
 8002b38:	e000e018 	.word	0xe000e018
 8002b3c:	20000018 	.word	0x20000018
 8002b40:	10624dd3 	.word	0x10624dd3
 8002b44:	e000e014 	.word	0xe000e014

08002b48 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b48:	4b3a      	ldr	r3, [pc, #232]	; (8002c34 <xPortStartScheduler+0xec>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b3a      	ldr	r3, [pc, #232]	; (8002c38 <xPortStartScheduler+0xf0>)
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d108      	bne.n	8002b64 <xPortStartScheduler+0x1c>
	__asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	e7fe      	b.n	8002b62 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b64:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <xPortStartScheduler+0xec>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b34      	ldr	r3, [pc, #208]	; (8002c3c <xPortStartScheduler+0xf4>)
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d108      	bne.n	8002b80 <xPortStartScheduler+0x38>
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	e7fe      	b.n	8002b7e <xPortStartScheduler+0x36>
{
 8002b80:	b510      	push	{r4, lr}
 8002b82:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b84:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <xPortStartScheduler+0xf8>)
 8002b86:	781a      	ldrb	r2, [r3, #0]
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b98:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002b9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ba0:	4a28      	ldr	r2, [pc, #160]	; (8002c44 <xPortStartScheduler+0xfc>)
 8002ba2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <xPortStartScheduler+0x100>)
 8002ba8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002baa:	e009      	b.n	8002bc0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 8002bac:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <xPortStartScheduler+0x100>)
 8002bae:	6813      	ldr	r3, [r2, #0]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002bb4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002bc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002bc8:	d1f0      	bne.n	8002bac <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002bca:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <xPortStartScheduler+0x100>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d008      	beq.n	8002be4 <xPortStartScheduler+0x9c>
 8002bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	e7fe      	b.n	8002be2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002be4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bea:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <xPortStartScheduler+0x100>)
 8002bec:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bee:	9b01      	ldr	r3, [sp, #4]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	4a13      	ldr	r2, [pc, #76]	; (8002c40 <xPortStartScheduler+0xf8>)
 8002bf4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <xPortStartScheduler+0x104>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002bfe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002c06:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002c08:	f7ff ff82 	bl	8002b10 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002c0c:	2400      	movs	r4, #0
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <xPortStartScheduler+0x108>)
 8002c10:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8002c12:	f7ff fec1 	bl	8002998 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c16:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <xPortStartScheduler+0x10c>)
 8002c18:	6813      	ldr	r3, [r2, #0]
 8002c1a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c1e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002c20:	f7ff fea6 	bl	8002970 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002c24:	f000 fc9e 	bl	8003564 <vTaskSwitchContext>
	prvTaskExitError();
 8002c28:	f7ff fe82 	bl	8002930 <prvTaskExitError>
}
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd10      	pop	{r4, pc}
 8002c32:	bf00      	nop
 8002c34:	e000ed00 	.word	0xe000ed00
 8002c38:	410fc271 	.word	0x410fc271
 8002c3c:	410fc270 	.word	0x410fc270
 8002c40:	e000e400 	.word	0xe000e400
 8002c44:	20000038 	.word	0x20000038
 8002c48:	2000003c 	.word	0x2000003c
 8002c4c:	e000ed20 	.word	0xe000ed20
 8002c50:	20000004 	.word	0x20000004
 8002c54:	e000ef34 	.word	0xe000ef34

08002c58 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002c58:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c5a:	f012 0f07 	tst.w	r2, #7
 8002c5e:	d01e      	beq.n	8002c9e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c60:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c62:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c66:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8002c6a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c6c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c6e:	480e      	ldr	r0, [pc, #56]	; (8002ca8 <prvHeapInit+0x50>)
 8002c70:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002c72:	2100      	movs	r1, #0
 8002c74:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c76:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002c78:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c7a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8002c7e:	480b      	ldr	r0, [pc, #44]	; (8002cac <prvHeapInit+0x54>)
 8002c80:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8002c82:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002c84:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c86:	1a99      	subs	r1, r3, r2
 8002c88:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c8a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <prvHeapInit+0x58>)
 8002c8e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <prvHeapInit+0x5c>)
 8002c92:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c94:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c98:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <prvHeapInit+0x60>)
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c9e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002ca2:	e7e4      	b.n	8002c6e <prvHeapInit+0x16>
 8002ca4:	20000044 	.word	0x20000044
 8002ca8:	20003c50 	.word	0x20003c50
 8002cac:	20000040 	.word	0x20000040
 8002cb0:	20003c4c 	.word	0x20003c4c
 8002cb4:	20003c48 	.word	0x20003c48
 8002cb8:	20003c44 	.word	0x20003c44

08002cbc <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002cbc:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002cbe:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <prvInsertBlockIntoFreeList+0x50>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4282      	cmp	r2, r0
 8002cc4:	d31b      	bcc.n	8002cfe <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	185c      	adds	r4, r3, r1
 8002cca:	42a0      	cmp	r0, r4
 8002ccc:	d103      	bne.n	8002cd6 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002cce:	6840      	ldr	r0, [r0, #4]
 8002cd0:	4401      	add	r1, r0
 8002cd2:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002cd4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002cd6:	6841      	ldr	r1, [r0, #4]
 8002cd8:	1844      	adds	r4, r0, r1
 8002cda:	42a2      	cmp	r2, r4
 8002cdc:	d113      	bne.n	8002d06 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002cde:	4c0c      	ldr	r4, [pc, #48]	; (8002d10 <prvInsertBlockIntoFreeList+0x54>)
 8002ce0:	6824      	ldr	r4, [r4, #0]
 8002ce2:	42a2      	cmp	r2, r4
 8002ce4:	d00d      	beq.n	8002d02 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ce6:	6852      	ldr	r2, [r2, #4]
 8002ce8:	4411      	add	r1, r2
 8002cea:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002cf2:	4298      	cmp	r0, r3
 8002cf4:	d000      	beq.n	8002cf8 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002cf6:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cfc:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002cfe:	4613      	mov	r3, r2
 8002d00:	e7de      	b.n	8002cc0 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d02:	6004      	str	r4, [r0, #0]
 8002d04:	e7f5      	b.n	8002cf2 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d06:	6002      	str	r2, [r0, #0]
 8002d08:	e7f3      	b.n	8002cf2 <prvInsertBlockIntoFreeList+0x36>
 8002d0a:	bf00      	nop
 8002d0c:	20003c50 	.word	0x20003c50
 8002d10:	20000040 	.word	0x20000040

08002d14 <pvPortMalloc>:
{
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002d18:	f000 fae6 	bl	80032e8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002d1c:	4b3a      	ldr	r3, [pc, #232]	; (8002e08 <pvPortMalloc+0xf4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b1bb      	cbz	r3, 8002d52 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002d22:	4b3a      	ldr	r3, [pc, #232]	; (8002e0c <pvPortMalloc+0xf8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	421c      	tst	r4, r3
 8002d28:	d163      	bne.n	8002df2 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8002d2a:	b1ac      	cbz	r4, 8002d58 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8002d2c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d2e:	f014 0f07 	tst.w	r4, #7
 8002d32:	d011      	beq.n	8002d58 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002d34:	f024 0407 	bic.w	r4, r4, #7
 8002d38:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d3a:	f004 0307 	and.w	r3, r4, #7
 8002d3e:	b15b      	cbz	r3, 8002d58 <pvPortMalloc+0x44>
 8002d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	e7fe      	b.n	8002d50 <pvPortMalloc+0x3c>
			prvHeapInit();
 8002d52:	f7ff ff81 	bl	8002c58 <prvHeapInit>
 8002d56:	e7e4      	b.n	8002d22 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d58:	2c00      	cmp	r4, #0
 8002d5a:	d04c      	beq.n	8002df6 <pvPortMalloc+0xe2>
 8002d5c:	4b2c      	ldr	r3, [pc, #176]	; (8002e10 <pvPortMalloc+0xfc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	429c      	cmp	r4, r3
 8002d62:	d84a      	bhi.n	8002dfa <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8002d64:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <pvPortMalloc+0x100>)
 8002d66:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d68:	e001      	b.n	8002d6e <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8002d6a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8002d6c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d6e:	686a      	ldr	r2, [r5, #4]
 8002d70:	4294      	cmp	r4, r2
 8002d72:	d902      	bls.n	8002d7a <pvPortMalloc+0x66>
 8002d74:	682a      	ldr	r2, [r5, #0]
 8002d76:	2a00      	cmp	r2, #0
 8002d78:	d1f7      	bne.n	8002d6a <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8002d7a:	4a23      	ldr	r2, [pc, #140]	; (8002e08 <pvPortMalloc+0xf4>)
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	4295      	cmp	r5, r2
 8002d80:	d03d      	beq.n	8002dfe <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d82:	681e      	ldr	r6, [r3, #0]
 8002d84:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d86:	682a      	ldr	r2, [r5, #0]
 8002d88:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d8a:	686b      	ldr	r3, [r5, #4]
 8002d8c:	1b1b      	subs	r3, r3, r4
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	d910      	bls.n	8002db4 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d92:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d94:	f010 0f07 	tst.w	r0, #7
 8002d98:	d008      	beq.n	8002dac <pvPortMalloc+0x98>
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	e7fe      	b.n	8002daa <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002dac:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002dae:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002db0:	f7ff ff84 	bl	8002cbc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002db4:	686a      	ldr	r2, [r5, #4]
 8002db6:	4916      	ldr	r1, [pc, #88]	; (8002e10 <pvPortMalloc+0xfc>)
 8002db8:	680b      	ldr	r3, [r1, #0]
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002dbe:	4916      	ldr	r1, [pc, #88]	; (8002e18 <pvPortMalloc+0x104>)
 8002dc0:	6809      	ldr	r1, [r1, #0]
 8002dc2:	428b      	cmp	r3, r1
 8002dc4:	d201      	bcs.n	8002dca <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002dc6:	4914      	ldr	r1, [pc, #80]	; (8002e18 <pvPortMalloc+0x104>)
 8002dc8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <pvPortMalloc+0xf8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002dd6:	f000 fb1f 	bl	8003418 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002dda:	f016 0f07 	tst.w	r6, #7
 8002dde:	d010      	beq.n	8002e02 <pvPortMalloc+0xee>
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	e7fe      	b.n	8002df0 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8002df2:	2600      	movs	r6, #0
 8002df4:	e7ef      	b.n	8002dd6 <pvPortMalloc+0xc2>
 8002df6:	2600      	movs	r6, #0
 8002df8:	e7ed      	b.n	8002dd6 <pvPortMalloc+0xc2>
 8002dfa:	2600      	movs	r6, #0
 8002dfc:	e7eb      	b.n	8002dd6 <pvPortMalloc+0xc2>
 8002dfe:	2600      	movs	r6, #0
 8002e00:	e7e9      	b.n	8002dd6 <pvPortMalloc+0xc2>
}
 8002e02:	4630      	mov	r0, r6
 8002e04:	bd70      	pop	{r4, r5, r6, pc}
 8002e06:	bf00      	nop
 8002e08:	20000040 	.word	0x20000040
 8002e0c:	20003c44 	.word	0x20003c44
 8002e10:	20003c48 	.word	0x20003c48
 8002e14:	20003c50 	.word	0x20003c50
 8002e18:	20003c4c 	.word	0x20003c4c

08002e1c <vPortFree>:
	if( pv != NULL )
 8002e1c:	b380      	cbz	r0, 8002e80 <vPortFree+0x64>
{
 8002e1e:	b538      	push	{r3, r4, r5, lr}
 8002e20:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8002e22:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002e26:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8002e2a:	4916      	ldr	r1, [pc, #88]	; (8002e84 <vPortFree+0x68>)
 8002e2c:	6809      	ldr	r1, [r1, #0]
 8002e2e:	420a      	tst	r2, r1
 8002e30:	d108      	bne.n	8002e44 <vPortFree+0x28>
 8002e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e36:	f383 8811 	msr	BASEPRI, r3
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	e7fe      	b.n	8002e42 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e44:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8002e48:	b140      	cbz	r0, 8002e5c <vPortFree+0x40>
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	e7fe      	b.n	8002e5a <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002e5c:	ea22 0201 	bic.w	r2, r2, r1
 8002e60:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8002e64:	f000 fa40 	bl	80032e8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002e68:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8002e6c:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <vPortFree+0x6c>)
 8002e6e:	6813      	ldr	r3, [r2, #0]
 8002e70:	440b      	add	r3, r1
 8002e72:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e74:	4628      	mov	r0, r5
 8002e76:	f7ff ff21 	bl	8002cbc <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8002e7a:	f000 facd 	bl	8003418 <xTaskResumeAll>
 8002e7e:	bd38      	pop	{r3, r4, r5, pc}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20003c44 	.word	0x20003c44
 8002e88:	20003c48 	.word	0x20003c48

08002e8c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <prvResetNextTaskUnblockTime+0x2c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	b94b      	cbnz	r3, 8002ea8 <prvResetNextTaskUnblockTime+0x1c>
 8002e94:	2301      	movs	r3, #1
 8002e96:	b94b      	cbnz	r3, 8002eac <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e98:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <prvResetNextTaskUnblockTime+0x2c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <prvResetNextTaskUnblockTime+0x30>)
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e7f4      	b.n	8002e96 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eb0:	4b02      	ldr	r3, [pc, #8]	; (8002ebc <prvResetNextTaskUnblockTime+0x30>)
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20003c5c 	.word	0x20003c5c
 8002ebc:	20003d30 	.word	0x20003d30

08002ec0 <prvInitialiseNewTask>:
{
 8002ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ec4:	4680      	mov	r8, r0
 8002ec6:	4699      	mov	r9, r3
 8002ec8:	9d08      	ldr	r5, [sp, #32]
 8002eca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002ecc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002ece:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002ed0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002eda:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2b0f      	cmp	r3, #15
 8002ee2:	d807      	bhi.n	8002ef4 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ee4:	5cc8      	ldrb	r0, [r1, r3]
 8002ee6:	18e2      	adds	r2, r4, r3
 8002ee8:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8002eec:	5cca      	ldrb	r2, [r1, r3]
 8002eee:	b10a      	cbz	r2, 8002ef4 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	e7f5      	b.n	8002ee0 <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002efa:	2d06      	cmp	r5, #6
 8002efc:	d900      	bls.n	8002f00 <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002efe:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8002f00:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002f02:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f04:	f04f 0a00 	mov.w	sl, #0
 8002f08:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f0c:	1d20      	adds	r0, r4, #4
 8002f0e:	f7ff fcd1 	bl	80028b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f12:	f104 0018 	add.w	r0, r4, #24
 8002f16:	f7ff fccd 	bl	80028b4 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f1a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f1c:	f1c5 0507 	rsb	r5, r5, #7
 8002f20:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f22:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8002f24:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f28:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f2c:	464a      	mov	r2, r9
 8002f2e:	4641      	mov	r1, r8
 8002f30:	4630      	mov	r0, r6
 8002f32:	f7ff fd3b 	bl	80029ac <pxPortInitialiseStack>
 8002f36:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002f38:	b107      	cbz	r7, 8002f3c <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f3a:	603c      	str	r4, [r7, #0]
 8002f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002f40 <prvInitialiseTaskLists>:
{
 8002f40:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f42:	2400      	movs	r4, #0
 8002f44:	e007      	b.n	8002f56 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f46:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002f4a:	0093      	lsls	r3, r2, #2
 8002f4c:	480e      	ldr	r0, [pc, #56]	; (8002f88 <prvInitialiseTaskLists+0x48>)
 8002f4e:	4418      	add	r0, r3
 8002f50:	f7ff fca5 	bl	800289e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f54:	3401      	adds	r4, #1
 8002f56:	2c06      	cmp	r4, #6
 8002f58:	d9f5      	bls.n	8002f46 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8002f5a:	4d0c      	ldr	r5, [pc, #48]	; (8002f8c <prvInitialiseTaskLists+0x4c>)
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f7ff fc9e 	bl	800289e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f62:	4c0b      	ldr	r4, [pc, #44]	; (8002f90 <prvInitialiseTaskLists+0x50>)
 8002f64:	4620      	mov	r0, r4
 8002f66:	f7ff fc9a 	bl	800289e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f6a:	480a      	ldr	r0, [pc, #40]	; (8002f94 <prvInitialiseTaskLists+0x54>)
 8002f6c:	f7ff fc97 	bl	800289e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002f70:	4809      	ldr	r0, [pc, #36]	; (8002f98 <prvInitialiseTaskLists+0x58>)
 8002f72:	f7ff fc94 	bl	800289e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002f76:	4809      	ldr	r0, [pc, #36]	; (8002f9c <prvInitialiseTaskLists+0x5c>)
 8002f78:	f7ff fc91 	bl	800289e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <prvInitialiseTaskLists+0x60>)
 8002f7e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <prvInitialiseTaskLists+0x64>)
 8002f82:	601c      	str	r4, [r3, #0]
 8002f84:	bd38      	pop	{r3, r4, r5, pc}
 8002f86:	bf00      	nop
 8002f88:	20003c64 	.word	0x20003c64
 8002f8c:	20003d08 	.word	0x20003d08
 8002f90:	20003d1c 	.word	0x20003d1c
 8002f94:	20003d38 	.word	0x20003d38
 8002f98:	20003d64 	.word	0x20003d64
 8002f9c:	20003d50 	.word	0x20003d50
 8002fa0:	20003c5c 	.word	0x20003c5c
 8002fa4:	20003c60 	.word	0x20003c60

08002fa8 <prvAddNewTaskToReadyList>:
{
 8002fa8:	b510      	push	{r4, lr}
 8002faa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002fac:	f7ff fd2a 	bl	8002a04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002fb0:	4a20      	ldr	r2, [pc, #128]	; (8003034 <prvAddNewTaskToReadyList+0x8c>)
 8002fb2:	6813      	ldr	r3, [r2, #0]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fb8:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <prvAddNewTaskToReadyList+0x90>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d031      	beq.n	8003024 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 8002fc0:	4b1e      	ldr	r3, [pc, #120]	; (800303c <prvAddNewTaskToReadyList+0x94>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	b93b      	cbnz	r3, 8002fd6 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <prvAddNewTaskToReadyList+0x90>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d801      	bhi.n	8002fd6 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <prvAddNewTaskToReadyList+0x90>)
 8002fd4:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8002fd6:	4a1a      	ldr	r2, [pc, #104]	; (8003040 <prvAddNewTaskToReadyList+0x98>)
 8002fd8:	6813      	ldr	r3, [r2, #0]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002fde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	4917      	ldr	r1, [pc, #92]	; (8003044 <prvAddNewTaskToReadyList+0x9c>)
 8002fe6:	6808      	ldr	r0, [r1, #0]
 8002fe8:	4302      	orrs	r2, r0
 8002fea:	600a      	str	r2, [r1, #0]
 8002fec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ff0:	009a      	lsls	r2, r3, #2
 8002ff2:	1d21      	adds	r1, r4, #4
 8002ff4:	4814      	ldr	r0, [pc, #80]	; (8003048 <prvAddNewTaskToReadyList+0xa0>)
 8002ff6:	4410      	add	r0, r2
 8002ff8:	f7ff fc5f 	bl	80028ba <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002ffc:	f7ff fd24 	bl	8002a48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <prvAddNewTaskToReadyList+0x94>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	b16b      	cbz	r3, 8003022 <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003006:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <prvAddNewTaskToReadyList+0x90>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800300e:	429a      	cmp	r2, r3
 8003010:	d207      	bcs.n	8003022 <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 8003012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <prvAddNewTaskToReadyList+0xa4>)
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <prvAddNewTaskToReadyList+0x90>)
 8003026:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003028:	6813      	ldr	r3, [r2, #0]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d1d3      	bne.n	8002fd6 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 800302e:	f7ff ff87 	bl	8002f40 <prvInitialiseTaskLists>
 8003032:	e7d0      	b.n	8002fd6 <prvAddNewTaskToReadyList+0x2e>
 8003034:	20003cf0 	.word	0x20003cf0
 8003038:	20003c58 	.word	0x20003c58
 800303c:	20003d4c 	.word	0x20003d4c
 8003040:	20003d00 	.word	0x20003d00
 8003044:	20003d04 	.word	0x20003d04
 8003048:	20003c64 	.word	0x20003c64
 800304c:	e000ed04 	.word	0xe000ed04

08003050 <prvDeleteTCB>:
	{
 8003050:	b510      	push	{r4, lr}
 8003052:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003054:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003058:	b163      	cbz	r3, 8003074 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800305a:	2b01      	cmp	r3, #1
 800305c:	d011      	beq.n	8003082 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800305e:	2b02      	cmp	r3, #2
 8003060:	d012      	beq.n	8003088 <prvDeleteTCB+0x38>
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	e7fe      	b.n	8003072 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8003074:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003076:	f7ff fed1 	bl	8002e1c <vPortFree>
				vPortFree( pxTCB );
 800307a:	4620      	mov	r0, r4
 800307c:	f7ff fece 	bl	8002e1c <vPortFree>
 8003080:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8003082:	f7ff fecb 	bl	8002e1c <vPortFree>
 8003086:	bd10      	pop	{r4, pc}
 8003088:	bd10      	pop	{r4, pc}
	...

0800308c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <prvCheckTasksWaitingTermination+0x40>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	b1d3      	cbz	r3, 80030c8 <prvCheckTasksWaitingTermination+0x3c>
{
 8003092:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8003094:	f7ff fcb6 	bl	8002a04 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <prvCheckTasksWaitingTermination+0x44>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800309e:	1d20      	adds	r0, r4, #4
 80030a0:	f7ff fc31 	bl	8002906 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80030a4:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <prvCheckTasksWaitingTermination+0x48>)
 80030a6:	6813      	ldr	r3, [r2, #0]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80030ac:	4a07      	ldr	r2, [pc, #28]	; (80030cc <prvCheckTasksWaitingTermination+0x40>)
 80030ae:	6813      	ldr	r3, [r2, #0]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80030b4:	f7ff fcc8 	bl	8002a48 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80030b8:	4620      	mov	r0, r4
 80030ba:	f7ff ffc9 	bl	8003050 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030be:	4b03      	ldr	r3, [pc, #12]	; (80030cc <prvCheckTasksWaitingTermination+0x40>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e6      	bne.n	8003094 <prvCheckTasksWaitingTermination+0x8>
}
 80030c6:	bd10      	pop	{r4, pc}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20003cf4 	.word	0x20003cf4
 80030d0:	20003d64 	.word	0x20003d64
 80030d4:	20003cf0 	.word	0x20003cf0

080030d8 <prvIdleTask>:
{
 80030d8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80030da:	f7ff ffd7 	bl	800308c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <prvIdleTask+0x20>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d9f9      	bls.n	80030da <prvIdleTask+0x2>
				taskYIELD();
 80030e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ea:	4b04      	ldr	r3, [pc, #16]	; (80030fc <prvIdleTask+0x24>)
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	e7f0      	b.n	80030da <prvIdleTask+0x2>
 80030f8:	20003c64 	.word	0x20003c64
 80030fc:	e000ed04 	.word	0xe000ed04

08003100 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	4604      	mov	r4, r0
 8003104:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <prvAddCurrentTaskToDelayedList+0x7c>)
 8003108:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800310a:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <prvAddCurrentTaskToDelayedList+0x80>)
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	3004      	adds	r0, #4
 8003110:	f7ff fbf9 	bl	8002906 <uxListRemove>
 8003114:	b950      	cbnz	r0, 800312c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <prvAddCurrentTaskToDelayedList+0x80>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311c:	2301      	movs	r3, #1
 800311e:	fa03 f202 	lsl.w	r2, r3, r2
 8003122:	4918      	ldr	r1, [pc, #96]	; (8003184 <prvAddCurrentTaskToDelayedList+0x84>)
 8003124:	680b      	ldr	r3, [r1, #0]
 8003126:	ea23 0302 	bic.w	r3, r3, r2
 800312a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800312c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003130:	d013      	beq.n	800315a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003132:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <prvAddCurrentTaskToDelayedList+0x80>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800313a:	42a5      	cmp	r5, r4
 800313c:	d816      	bhi.n	800316c <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <prvAddCurrentTaskToDelayedList+0x88>)
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <prvAddCurrentTaskToDelayedList+0x80>)
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	3104      	adds	r1, #4
 8003148:	f7ff fbc3 	bl	80028d2 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <prvAddCurrentTaskToDelayedList+0x8c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	429c      	cmp	r4, r3
 8003152:	d201      	bcs.n	8003158 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003154:	4b0d      	ldr	r3, [pc, #52]	; (800318c <prvAddCurrentTaskToDelayedList+0x8c>)
 8003156:	601c      	str	r4, [r3, #0]
 8003158:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800315a:	2e00      	cmp	r6, #0
 800315c:	d0e9      	beq.n	8003132 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800315e:	4b08      	ldr	r3, [pc, #32]	; (8003180 <prvAddCurrentTaskToDelayedList+0x80>)
 8003160:	6819      	ldr	r1, [r3, #0]
 8003162:	3104      	adds	r1, #4
 8003164:	480a      	ldr	r0, [pc, #40]	; (8003190 <prvAddCurrentTaskToDelayedList+0x90>)
 8003166:	f7ff fba8 	bl	80028ba <vListInsertEnd>
 800316a:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800316c:	4b09      	ldr	r3, [pc, #36]	; (8003194 <prvAddCurrentTaskToDelayedList+0x94>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <prvAddCurrentTaskToDelayedList+0x80>)
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	3104      	adds	r1, #4
 8003176:	f7ff fbac 	bl	80028d2 <vListInsert>
 800317a:	bd70      	pop	{r4, r5, r6, pc}
 800317c:	20003d78 	.word	0x20003d78
 8003180:	20003c58 	.word	0x20003c58
 8003184:	20003d04 	.word	0x20003d04
 8003188:	20003c5c 	.word	0x20003c5c
 800318c:	20003d30 	.word	0x20003d30
 8003190:	20003d50 	.word	0x20003d50
 8003194:	20003c60 	.word	0x20003c60

08003198 <xTaskCreateStatic>:
	{
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800319e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80031a0:	b175      	cbz	r5, 80031c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031a2:	b1b4      	cbz	r4, 80031d2 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80031a4:	2654      	movs	r6, #84	; 0x54
 80031a6:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031a8:	9e04      	ldr	r6, [sp, #16]
 80031aa:	2e54      	cmp	r6, #84	; 0x54
 80031ac:	d01a      	beq.n	80031e4 <xTaskCreateStatic+0x4c>
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	e7fe      	b.n	80031be <xTaskCreateStatic+0x26>
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	e7fe      	b.n	80031d0 <xTaskCreateStatic+0x38>
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	e7fe      	b.n	80031e2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031e4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031e6:	2502      	movs	r5, #2
 80031e8:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031ec:	2500      	movs	r5, #0
 80031ee:	9503      	str	r5, [sp, #12]
 80031f0:	9402      	str	r4, [sp, #8]
 80031f2:	ad05      	add	r5, sp, #20
 80031f4:	9501      	str	r5, [sp, #4]
 80031f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80031f8:	9500      	str	r5, [sp, #0]
 80031fa:	f7ff fe61 	bl	8002ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031fe:	4620      	mov	r0, r4
 8003200:	f7ff fed2 	bl	8002fa8 <prvAddNewTaskToReadyList>
	}
 8003204:	9805      	ldr	r0, [sp, #20]
 8003206:	b006      	add	sp, #24
 8003208:	bd70      	pop	{r4, r5, r6, pc}

0800320a <xTaskCreate>:
	{
 800320a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800320e:	b085      	sub	sp, #20
 8003210:	4606      	mov	r6, r0
 8003212:	460f      	mov	r7, r1
 8003214:	4615      	mov	r5, r2
 8003216:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003218:	0090      	lsls	r0, r2, #2
 800321a:	f7ff fd7b 	bl	8002d14 <pvPortMalloc>
			if( pxStack != NULL )
 800321e:	b310      	cbz	r0, 8003266 <xTaskCreate+0x5c>
 8003220:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003222:	2054      	movs	r0, #84	; 0x54
 8003224:	f7ff fd76 	bl	8002d14 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003228:	4604      	mov	r4, r0
 800322a:	b1c0      	cbz	r0, 800325e <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
 800322c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8003230:	b1dc      	cbz	r4, 800326a <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003232:	2300      	movs	r3, #0
 8003234:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003238:	9303      	str	r3, [sp, #12]
 800323a:	9402      	str	r4, [sp, #8]
 800323c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800323e:	9301      	str	r3, [sp, #4]
 8003240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	4643      	mov	r3, r8
 8003246:	462a      	mov	r2, r5
 8003248:	4639      	mov	r1, r7
 800324a:	4630      	mov	r0, r6
 800324c:	f7ff fe38 	bl	8002ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003250:	4620      	mov	r0, r4
 8003252:	f7ff fea9 	bl	8002fa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003256:	2001      	movs	r0, #1
	}
 8003258:	b005      	add	sp, #20
 800325a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800325e:	4648      	mov	r0, r9
 8003260:	f7ff fddc 	bl	8002e1c <vPortFree>
 8003264:	e7e4      	b.n	8003230 <xTaskCreate+0x26>
				pxNewTCB = NULL;
 8003266:	2400      	movs	r4, #0
 8003268:	e7e2      	b.n	8003230 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800326a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800326e:	e7f3      	b.n	8003258 <xTaskCreate+0x4e>

08003270 <vTaskStartScheduler>:
{
 8003270:	b510      	push	{r4, lr}
 8003272:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003274:	2400      	movs	r4, #0
 8003276:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003278:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800327a:	aa07      	add	r2, sp, #28
 800327c:	a906      	add	r1, sp, #24
 800327e:	a805      	add	r0, sp, #20
 8003280:	f000 fbf4 	bl	8003a6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003284:	9b05      	ldr	r3, [sp, #20]
 8003286:	9302      	str	r3, [sp, #8]
 8003288:	9b06      	ldr	r3, [sp, #24]
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	9400      	str	r4, [sp, #0]
 800328e:	4623      	mov	r3, r4
 8003290:	9a07      	ldr	r2, [sp, #28]
 8003292:	4910      	ldr	r1, [pc, #64]	; (80032d4 <vTaskStartScheduler+0x64>)
 8003294:	4810      	ldr	r0, [pc, #64]	; (80032d8 <vTaskStartScheduler+0x68>)
 8003296:	f7ff ff7f 	bl	8003198 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800329a:	b118      	cbz	r0, 80032a4 <vTaskStartScheduler+0x34>
			xReturn = pdPASS;
 800329c:	2301      	movs	r3, #1
	if( xReturn == pdPASS )
 800329e:	b91b      	cbnz	r3, 80032a8 <vTaskStartScheduler+0x38>
}
 80032a0:	b008      	add	sp, #32
 80032a2:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e7fa      	b.n	800329e <vTaskStartScheduler+0x2e>
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032bc:	4b07      	ldr	r3, [pc, #28]	; (80032dc <vTaskStartScheduler+0x6c>)
 80032be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032c0:	2201      	movs	r2, #1
 80032c2:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <vTaskStartScheduler+0x70>)
 80032c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80032c6:	2200      	movs	r2, #0
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <vTaskStartScheduler+0x74>)
 80032ca:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80032cc:	f7ff fc3c 	bl	8002b48 <xPortStartScheduler>
 80032d0:	e7e6      	b.n	80032a0 <vTaskStartScheduler+0x30>
 80032d2:	bf00      	nop
 80032d4:	080047d0 	.word	0x080047d0
 80032d8:	080030d9 	.word	0x080030d9
 80032dc:	20003d30 	.word	0x20003d30
 80032e0:	20003d4c 	.word	0x20003d4c
 80032e4:	20003d78 	.word	0x20003d78

080032e8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80032e8:	4a02      	ldr	r2, [pc, #8]	; (80032f4 <vTaskSuspendAll+0xc>)
 80032ea:	6813      	ldr	r3, [r2, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20003cfc 	.word	0x20003cfc

080032f8 <xTaskIncrementTick>:
{
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032fa:	4b3c      	ldr	r3, [pc, #240]	; (80033ec <xTaskIncrementTick+0xf4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d168      	bne.n	80033d4 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003302:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <xTaskIncrementTick+0xf8>)
 8003304:	681d      	ldr	r5, [r3, #0]
 8003306:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8003308:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800330a:	b9c5      	cbnz	r5, 800333e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800330c:	4b39      	ldr	r3, [pc, #228]	; (80033f4 <xTaskIncrementTick+0xfc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	b143      	cbz	r3, 8003326 <xTaskIncrementTick+0x2e>
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	e7fe      	b.n	8003324 <xTaskIncrementTick+0x2c>
 8003326:	4a33      	ldr	r2, [pc, #204]	; (80033f4 <xTaskIncrementTick+0xfc>)
 8003328:	6811      	ldr	r1, [r2, #0]
 800332a:	4b33      	ldr	r3, [pc, #204]	; (80033f8 <xTaskIncrementTick+0x100>)
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	6010      	str	r0, [r2, #0]
 8003330:	6019      	str	r1, [r3, #0]
 8003332:	4a32      	ldr	r2, [pc, #200]	; (80033fc <xTaskIncrementTick+0x104>)
 8003334:	6813      	ldr	r3, [r2, #0]
 8003336:	3301      	adds	r3, #1
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	f7ff fda7 	bl	8002e8c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800333e:	4b30      	ldr	r3, [pc, #192]	; (8003400 <xTaskIncrementTick+0x108>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	429d      	cmp	r5, r3
 8003344:	d23a      	bcs.n	80033bc <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8003346:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003348:	4b2e      	ldr	r3, [pc, #184]	; (8003404 <xTaskIncrementTick+0x10c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003352:	009a      	lsls	r2, r3, #2
 8003354:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <xTaskIncrementTick+0x110>)
 8003356:	589b      	ldr	r3, [r3, r2]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d940      	bls.n	80033de <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
 800335c:	2401      	movs	r4, #1
 800335e:	e03e      	b.n	80033de <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
 8003360:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003362:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <xTaskIncrementTick+0xfc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	b353      	cbz	r3, 80033c0 <xTaskIncrementTick+0xc8>
 800336a:	2300      	movs	r3, #0
 800336c:	bb53      	cbnz	r3, 80033c4 <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800336e:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <xTaskIncrementTick+0xfc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003376:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003378:	429d      	cmp	r5, r3
 800337a:	d328      	bcc.n	80033ce <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800337c:	1d37      	adds	r7, r6, #4
 800337e:	4638      	mov	r0, r7
 8003380:	f7ff fac1 	bl	8002906 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003384:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003386:	b11b      	cbz	r3, 8003390 <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003388:	f106 0018 	add.w	r0, r6, #24
 800338c:	f7ff fabb 	bl	8002906 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003390:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003392:	2201      	movs	r2, #1
 8003394:	409a      	lsls	r2, r3
 8003396:	491d      	ldr	r1, [pc, #116]	; (800340c <xTaskIncrementTick+0x114>)
 8003398:	6808      	ldr	r0, [r1, #0]
 800339a:	4302      	orrs	r2, r0
 800339c:	600a      	str	r2, [r1, #0]
 800339e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033a2:	009a      	lsls	r2, r3, #2
 80033a4:	4639      	mov	r1, r7
 80033a6:	4818      	ldr	r0, [pc, #96]	; (8003408 <xTaskIncrementTick+0x110>)
 80033a8:	4410      	add	r0, r2
 80033aa:	f7ff fa86 	bl	80028ba <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033ae:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80033b0:	4b14      	ldr	r3, [pc, #80]	; (8003404 <xTaskIncrementTick+0x10c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d2d2      	bcs.n	8003360 <xTaskIncrementTick+0x68>
 80033ba:	e7d2      	b.n	8003362 <xTaskIncrementTick+0x6a>
 80033bc:	2400      	movs	r4, #0
 80033be:	e7d0      	b.n	8003362 <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033c0:	2301      	movs	r3, #1
 80033c2:	e7d3      	b.n	800336c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033c8:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <xTaskIncrementTick+0x108>)
 80033ca:	601a      	str	r2, [r3, #0]
					break;
 80033cc:	e7bc      	b.n	8003348 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80033ce:	4a0c      	ldr	r2, [pc, #48]	; (8003400 <xTaskIncrementTick+0x108>)
 80033d0:	6013      	str	r3, [r2, #0]
						break;
 80033d2:	e7b9      	b.n	8003348 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 80033d4:	4a0e      	ldr	r2, [pc, #56]	; (8003410 <xTaskIncrementTick+0x118>)
 80033d6:	6813      	ldr	r3, [r2, #0]
 80033d8:	3301      	adds	r3, #1
 80033da:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80033dc:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80033de:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <xTaskIncrementTick+0x11c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	b103      	cbz	r3, 80033e6 <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
 80033e4:	2401      	movs	r4, #1
}
 80033e6:	4620      	mov	r0, r4
 80033e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20003cfc 	.word	0x20003cfc
 80033f0:	20003d78 	.word	0x20003d78
 80033f4:	20003c5c 	.word	0x20003c5c
 80033f8:	20003c60 	.word	0x20003c60
 80033fc:	20003d34 	.word	0x20003d34
 8003400:	20003d30 	.word	0x20003d30
 8003404:	20003c58 	.word	0x20003c58
 8003408:	20003c64 	.word	0x20003c64
 800340c:	20003d04 	.word	0x20003d04
 8003410:	20003cf8 	.word	0x20003cf8
 8003414:	20003d7c 	.word	0x20003d7c

08003418 <xTaskResumeAll>:
{
 8003418:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800341a:	4b35      	ldr	r3, [pc, #212]	; (80034f0 <xTaskResumeAll+0xd8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	b943      	cbnz	r3, 8003432 <xTaskResumeAll+0x1a>
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	e7fe      	b.n	8003430 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8003432:	f7ff fae7 	bl	8002a04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003436:	4b2e      	ldr	r3, [pc, #184]	; (80034f0 <xTaskResumeAll+0xd8>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	3a01      	subs	r2, #1
 800343c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d150      	bne.n	80034e6 <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003444:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <xTaskResumeAll+0xdc>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	b923      	cbnz	r3, 8003454 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800344a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800344c:	f7ff fafc 	bl	8002a48 <vPortExitCritical>
}
 8003450:	4620      	mov	r0, r4
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003456:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <xTaskResumeAll+0xe0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	b31b      	cbz	r3, 80034a4 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800345c:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <xTaskResumeAll+0xe0>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003462:	f104 0018 	add.w	r0, r4, #24
 8003466:	f7ff fa4e 	bl	8002906 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800346a:	1d25      	adds	r5, r4, #4
 800346c:	4628      	mov	r0, r5
 800346e:	f7ff fa4a 	bl	8002906 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003472:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003474:	2201      	movs	r2, #1
 8003476:	409a      	lsls	r2, r3
 8003478:	4920      	ldr	r1, [pc, #128]	; (80034fc <xTaskResumeAll+0xe4>)
 800347a:	6808      	ldr	r0, [r1, #0]
 800347c:	4302      	orrs	r2, r0
 800347e:	600a      	str	r2, [r1, #0]
 8003480:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003484:	009a      	lsls	r2, r3, #2
 8003486:	4629      	mov	r1, r5
 8003488:	481d      	ldr	r0, [pc, #116]	; (8003500 <xTaskResumeAll+0xe8>)
 800348a:	4410      	add	r0, r2
 800348c:	f7ff fa15 	bl	80028ba <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003490:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003492:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <xTaskResumeAll+0xec>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	429a      	cmp	r2, r3
 800349a:	d3dc      	bcc.n	8003456 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 800349c:	2201      	movs	r2, #1
 800349e:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <xTaskResumeAll+0xf0>)
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	e7d8      	b.n	8003456 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 80034a4:	b10c      	cbz	r4, 80034aa <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80034a6:	f7ff fcf1 	bl	8002e8c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80034aa:	4b18      	ldr	r3, [pc, #96]	; (800350c <xTaskResumeAll+0xf4>)
 80034ac:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80034ae:	b974      	cbnz	r4, 80034ce <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 80034b0:	4b15      	ldr	r3, [pc, #84]	; (8003508 <xTaskResumeAll+0xf0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	b1cb      	cbz	r3, 80034ea <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 80034b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <xTaskResumeAll+0xf8>)
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80034c6:	2401      	movs	r4, #1
 80034c8:	e7c0      	b.n	800344c <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034ca:	3c01      	subs	r4, #1
 80034cc:	d007      	beq.n	80034de <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 80034ce:	f7ff ff13 	bl	80032f8 <xTaskIncrementTick>
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d0f9      	beq.n	80034ca <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 80034d6:	2201      	movs	r2, #1
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <xTaskResumeAll+0xf0>)
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	e7f5      	b.n	80034ca <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 80034de:	2200      	movs	r2, #0
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <xTaskResumeAll+0xf4>)
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e7e4      	b.n	80034b0 <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 80034e6:	2400      	movs	r4, #0
 80034e8:	e7b0      	b.n	800344c <xTaskResumeAll+0x34>
 80034ea:	2400      	movs	r4, #0
 80034ec:	e7ae      	b.n	800344c <xTaskResumeAll+0x34>
 80034ee:	bf00      	nop
 80034f0:	20003cfc 	.word	0x20003cfc
 80034f4:	20003cf0 	.word	0x20003cf0
 80034f8:	20003d38 	.word	0x20003d38
 80034fc:	20003d04 	.word	0x20003d04
 8003500:	20003c64 	.word	0x20003c64
 8003504:	20003c58 	.word	0x20003c58
 8003508:	20003d7c 	.word	0x20003d7c
 800350c:	20003cf8 	.word	0x20003cf8
 8003510:	e000ed04 	.word	0xe000ed04

08003514 <vTaskDelay>:
	{
 8003514:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003516:	b1a8      	cbz	r0, 8003544 <vTaskDelay+0x30>
 8003518:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <vTaskDelay+0x48>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	b143      	cbz	r3, 8003532 <vTaskDelay+0x1e>
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	e7fe      	b.n	8003530 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003532:	f7ff fed9 	bl	80032e8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003536:	2100      	movs	r1, #0
 8003538:	4620      	mov	r0, r4
 800353a:	f7ff fde1 	bl	8003100 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800353e:	f7ff ff6b 	bl	8003418 <xTaskResumeAll>
 8003542:	e000      	b.n	8003546 <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8003544:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8003546:	b938      	cbnz	r0, 8003558 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8003548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <vTaskDelay+0x4c>)
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	bd10      	pop	{r4, pc}
 800355a:	bf00      	nop
 800355c:	20003cfc 	.word	0x20003cfc
 8003560:	e000ed04 	.word	0xe000ed04

08003564 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003564:	4b21      	ldr	r3, [pc, #132]	; (80035ec <vTaskSwitchContext+0x88>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	b9c3      	cbnz	r3, 800359c <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
 800356a:	2200      	movs	r2, #0
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <vTaskSwitchContext+0x8c>)
 800356e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003570:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <vTaskSwitchContext+0x90>)
 8003572:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f1c3 031f 	rsb	r3, r3, #31
 800357e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003582:	008a      	lsls	r2, r1, #2
 8003584:	491c      	ldr	r1, [pc, #112]	; (80035f8 <vTaskSwitchContext+0x94>)
 8003586:	588a      	ldr	r2, [r1, r2]
 8003588:	b962      	cbnz	r2, 80035a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	e7fe      	b.n	800359a <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
 800359c:	2201      	movs	r2, #1
 800359e:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <vTaskSwitchContext+0x8c>)
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	4770      	bx	lr
{
 80035a4:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80035a6:	4814      	ldr	r0, [pc, #80]	; (80035f8 <vTaskSwitchContext+0x94>)
 80035a8:	009a      	lsls	r2, r3, #2
 80035aa:	18d4      	adds	r4, r2, r3
 80035ac:	00a1      	lsls	r1, r4, #2
 80035ae:	4401      	add	r1, r0
 80035b0:	684c      	ldr	r4, [r1, #4]
 80035b2:	6864      	ldr	r4, [r4, #4]
 80035b4:	604c      	str	r4, [r1, #4]
 80035b6:	441a      	add	r2, r3
 80035b8:	0091      	lsls	r1, r2, #2
 80035ba:	3108      	adds	r1, #8
 80035bc:	4408      	add	r0, r1
 80035be:	4284      	cmp	r4, r0
 80035c0:	d00b      	beq.n	80035da <vTaskSwitchContext+0x76>
 80035c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035c6:	009a      	lsls	r2, r3, #2
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <vTaskSwitchContext+0x94>)
 80035ca:	4413      	add	r3, r2
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <vTaskSwitchContext+0x98>)
 80035d2:	601a      	str	r2, [r3, #0]
}
 80035d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035d8:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80035da:	6860      	ldr	r0, [r4, #4]
 80035dc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80035e0:	0091      	lsls	r1, r2, #2
 80035e2:	4a05      	ldr	r2, [pc, #20]	; (80035f8 <vTaskSwitchContext+0x94>)
 80035e4:	440a      	add	r2, r1
 80035e6:	6050      	str	r0, [r2, #4]
 80035e8:	e7eb      	b.n	80035c2 <vTaskSwitchContext+0x5e>
 80035ea:	bf00      	nop
 80035ec:	20003cfc 	.word	0x20003cfc
 80035f0:	20003d7c 	.word	0x20003d7c
 80035f4:	20003d04 	.word	0x20003d04
 80035f8:	20003c64 	.word	0x20003c64
 80035fc:	20003c58 	.word	0x20003c58

08003600 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8003600:	b500      	push	{lr}
 8003602:	b083      	sub	sp, #12
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 8003604:	4812      	ldr	r0, [pc, #72]	; (8003650 <MX_ETH_Init+0x50>)
 8003606:	4b13      	ldr	r3, [pc, #76]	; (8003654 <MX_ETH_Init+0x54>)
 8003608:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800360a:	2301      	movs	r3, #1
 800360c:	6043      	str	r3, [r0, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800360e:	2300      	movs	r3, #0
 8003610:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 8003612:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[1] = 0x80;
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	f88d 2001 	strb.w	r2, [sp, #1]
  MACAddr[2] = 0xE1;
 800361c:	22e1      	movs	r2, #225	; 0xe1
 800361e:	f88d 2002 	strb.w	r2, [sp, #2]
  MACAddr[3] = 0x00;
 8003622:	f88d 3003 	strb.w	r3, [sp, #3]
  MACAddr[4] = 0x00;
 8003626:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[5] = 0x00;
 800362a:	f88d 3005 	strb.w	r3, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800362e:	f8c0 d014 	str.w	sp, [r0, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003632:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003634:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003636:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800363a:	6203      	str	r3, [r0, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800363c:	f7fd f914 	bl	8000868 <HAL_ETH_Init>
 8003640:	b910      	cbnz	r0, 8003648 <MX_ETH_Init+0x48>
  {
    Error_Handler();
  }

}
 8003642:	b003      	add	sp, #12
 8003644:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003648:	f000 fd8a 	bl	8004160 <Error_Handler>
}
 800364c:	e7f9      	b.n	8003642 <MX_ETH_Init+0x42>
 800364e:	bf00      	nop
 8003650:	20003fe0 	.word	0x20003fe0
 8003654:	40028000 	.word	0x40028000

08003658 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365a:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	2300      	movs	r3, #0
 800365e:	9307      	str	r3, [sp, #28]
 8003660:	9308      	str	r3, [sp, #32]
 8003662:	9309      	str	r3, [sp, #36]	; 0x24
 8003664:	930a      	str	r3, [sp, #40]	; 0x28
 8003666:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8003668:	6802      	ldr	r2, [r0, #0]
 800366a:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <HAL_ETH_MspInit+0x108>)
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_ETH_MspInit+0x1c>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003670:	b00d      	add	sp, #52	; 0x34
 8003672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8003674:	2400      	movs	r4, #0
 8003676:	9400      	str	r4, [sp, #0]
 8003678:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800367c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800367e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003682:	631a      	str	r2, [r3, #48]	; 0x30
 8003684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003686:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800368a:	9200      	str	r2, [sp, #0]
 800368c:	9a00      	ldr	r2, [sp, #0]
 800368e:	9401      	str	r4, [sp, #4]
 8003690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003692:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
 8003698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800369e:	9201      	str	r2, [sp, #4]
 80036a0:	9a01      	ldr	r2, [sp, #4]
 80036a2:	9402      	str	r4, [sp, #8]
 80036a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
 80036ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ae:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80036b2:	9202      	str	r2, [sp, #8]
 80036b4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036b6:	9403      	str	r4, [sp, #12]
 80036b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ba:	f042 0204 	orr.w	r2, r2, #4
 80036be:	631a      	str	r2, [r3, #48]	; 0x30
 80036c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c2:	f002 0204 	and.w	r2, r2, #4
 80036c6:	9203      	str	r2, [sp, #12]
 80036c8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ca:	9404      	str	r4, [sp, #16]
 80036cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
 80036d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d6:	f002 0201 	and.w	r2, r2, #1
 80036da:	9204      	str	r2, [sp, #16]
 80036dc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036de:	9405      	str	r4, [sp, #20]
 80036e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e2:	f042 0202 	orr.w	r2, r2, #2
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
 80036e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ea:	f002 0202 	and.w	r2, r2, #2
 80036ee:	9205      	str	r2, [sp, #20]
 80036f0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80036f2:	9406      	str	r4, [sp, #24]
 80036f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	9306      	str	r3, [sp, #24]
 8003704:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003706:	2332      	movs	r3, #50	; 0x32
 8003708:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370a:	2702      	movs	r7, #2
 800370c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370e:	2603      	movs	r6, #3
 8003710:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003712:	250b      	movs	r5, #11
 8003714:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003716:	a907      	add	r1, sp, #28
 8003718:	4812      	ldr	r0, [pc, #72]	; (8003764 <HAL_ETH_MspInit+0x10c>)
 800371a:	f7fd f9d1 	bl	8000ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800371e:	2386      	movs	r3, #134	; 0x86
 8003720:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003726:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003728:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800372a:	a907      	add	r1, sp, #28
 800372c:	480e      	ldr	r0, [pc, #56]	; (8003768 <HAL_ETH_MspInit+0x110>)
 800372e:	f7fd f9c7 	bl	8000ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003736:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003738:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800373e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003740:	a907      	add	r1, sp, #28
 8003742:	480a      	ldr	r0, [pc, #40]	; (800376c <HAL_ETH_MspInit+0x114>)
 8003744:	f7fd f9bc 	bl	8000ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003748:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800374c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003752:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003754:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003756:	a907      	add	r1, sp, #28
 8003758:	4805      	ldr	r0, [pc, #20]	; (8003770 <HAL_ETH_MspInit+0x118>)
 800375a:	f7fd f9b1 	bl	8000ac0 <HAL_GPIO_Init>
}
 800375e:	e787      	b.n	8003670 <HAL_ETH_MspInit+0x18>
 8003760:	40028000 	.word	0x40028000
 8003764:	40020800 	.word	0x40020800
 8003768:	40020000 	.word	0x40020000
 800376c:	40020400 	.word	0x40020400
 8003770:	40021800 	.word	0x40021800

08003774 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003774:	b508      	push	{r3, lr}

	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1000);
 8003776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800377a:	f7ff f887 	bl	800288c <osDelay>
 800377e:	e7fa      	b.n	8003776 <StartDefaultTask+0x2>

08003780 <TaskMode>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TaskMode */
void TaskMode(void const * argument)
{
 8003780:	b508      	push	{r3, lr}
 8003782:	e003      	b.n	800378c <TaskMode+0xc>
		if (HAL_GPIO_ReadPin(ToucheTactile4_GPIO_Port, ToucheTactile4_Pin) == 1)
		{
			Change_Mode();
		}

		osDelay(500);
 8003784:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003788:	f7ff f880 	bl	800288c <osDelay>
		if (HAL_GPIO_ReadPin(ToucheTactile4_GPIO_Port, ToucheTactile4_Pin) == 1)
 800378c:	2180      	movs	r1, #128	; 0x80
 800378e:	4804      	ldr	r0, [pc, #16]	; (80037a0 <TaskMode+0x20>)
 8003790:	f7fd fa88 	bl	8000ca4 <HAL_GPIO_ReadPin>
 8003794:	2801      	cmp	r0, #1
 8003796:	d1f5      	bne.n	8003784 <TaskMode+0x4>
			Change_Mode();
 8003798:	f000 fb7e 	bl	8003e98 <Change_Mode>
 800379c:	e7f2      	b.n	8003784 <TaskMode+0x4>
 800379e:	bf00      	nop
 80037a0:	40020c00 	.word	0x40020c00

080037a4 <TaskChamps>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TaskChamps */
void TaskChamps(void const * argument)
{
 80037a4:	b508      	push	{r3, lr}
 80037a6:	e003      	b.n	80037b0 <TaskChamps+0xc>
				champ = Choix_Champ();
				valeur = receive_info_rtc(champ);
				//printf("valeur renvoyee : %d \n", valeur);
			}
		}
		osDelay(500);
 80037a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037ac:	f7ff f86e 	bl	800288c <osDelay>
		if (mode == REGLAGES)
 80037b0:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <TaskChamps+0x34>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f7      	bne.n	80037a8 <TaskChamps+0x4>
			if (HAL_GPIO_ReadPin(ToucheTactile2_GPIO_Port, ToucheTactile2_Pin) == 1)
 80037b8:	2120      	movs	r1, #32
 80037ba:	4808      	ldr	r0, [pc, #32]	; (80037dc <TaskChamps+0x38>)
 80037bc:	f7fd fa72 	bl	8000ca4 <HAL_GPIO_ReadPin>
 80037c0:	2801      	cmp	r0, #1
 80037c2:	d1f1      	bne.n	80037a8 <TaskChamps+0x4>
				champ = Choix_Champ();
 80037c4:	f000 fb86 	bl	8003ed4 <Choix_Champ>
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <TaskChamps+0x3c>)
 80037ca:	6018      	str	r0, [r3, #0]
				valeur = receive_info_rtc(champ);
 80037cc:	f000 fa58 	bl	8003c80 <receive_info_rtc>
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <TaskChamps+0x40>)
 80037d2:	7018      	strb	r0, [r3, #0]
 80037d4:	e7e8      	b.n	80037a8 <TaskChamps+0x4>
 80037d6:	bf00      	nop
 80037d8:	20000014 	.word	0x20000014
 80037dc:	40020c00 	.word	0x40020c00
 80037e0:	20000010 	.word	0x20000010
 80037e4:	20003d80 	.word	0x20003d80

080037e8 <TaskSensReglage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TaskSensReglage */
void TaskSensReglage(void const * argument)
{
 80037e8:	b508      	push	{r3, lr}
 80037ea:	e003      	b.n	80037f4 <TaskSensReglage+0xc>
			{
				sens = Choix_Sens();
			}
		}

		osDelay(500);
 80037ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037f0:	f7ff f84c 	bl	800288c <osDelay>
		if (mode == REGLAGES)
 80037f4:	4b07      	ldr	r3, [pc, #28]	; (8003814 <TaskSensReglage+0x2c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f7      	bne.n	80037ec <TaskSensReglage+0x4>
			if (HAL_GPIO_ReadPin(ToucheTactile1_GPIO_Port, ToucheTactile1_Pin) == 1)
 80037fc:	2110      	movs	r1, #16
 80037fe:	4806      	ldr	r0, [pc, #24]	; (8003818 <TaskSensReglage+0x30>)
 8003800:	f7fd fa50 	bl	8000ca4 <HAL_GPIO_ReadPin>
 8003804:	2801      	cmp	r0, #1
 8003806:	d1f1      	bne.n	80037ec <TaskSensReglage+0x4>
				sens = Choix_Sens();
 8003808:	f000 fb8c 	bl	8003f24 <Choix_Sens>
 800380c:	4b03      	ldr	r3, [pc, #12]	; (800381c <TaskSensReglage+0x34>)
 800380e:	6018      	str	r0, [r3, #0]
 8003810:	e7ec      	b.n	80037ec <TaskSensReglage+0x4>
 8003812:	bf00      	nop
 8003814:	20000014 	.word	0x20000014
 8003818:	40020c00 	.word	0x40020c00
 800381c:	20003fd8 	.word	0x20003fd8

08003820 <TaskValeurSuivante>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TaskValeurSuivante */
void TaskValeurSuivante(void const * argument)
{
 8003820:	b538      	push	{r3, r4, r5, lr}
 8003822:	e030      	b.n	8003886 <TaskValeurSuivante+0x66>
				uint8_t new_valeur = modifier_valeur_heure_courante(sens, valeur, champ);

				if (champ == SECONDES)
				{
					//calcul des secondes
					unite = new_valeur%10;
 8003824:	f1a3 3333 	sub.w	r3, r3, #858993459	; 0x33333333
 8003828:	fba3 1302 	umull	r1, r3, r3, r2
 800382c:	08db      	lsrs	r3, r3, #3
 800382e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003832:	0059      	lsls	r1, r3, #1
 8003834:	1a51      	subs	r1, r2, r1
 8003836:	b2c9      	uxtb	r1, r1
 8003838:	4d48      	ldr	r5, [pc, #288]	; (800395c <TaskValeurSuivante+0x13c>)
 800383a:	6029      	str	r1, [r5, #0]
					printf("unité nouvelle valeur %d\n", unite);
 800383c:	4848      	ldr	r0, [pc, #288]	; (8003960 <TaskValeurSuivante+0x140>)
 800383e:	f000 fe02 	bl	8004446 <iprintf>
					dizaine = (new_valeur-unite)/10;
 8003842:	b2e3      	uxtb	r3, r4
 8003844:	682a      	ldr	r2, [r5, #0]
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	4946      	ldr	r1, [pc, #280]	; (8003964 <TaskValeurSuivante+0x144>)
 800384a:	fb81 2103 	smull	r2, r1, r1, r3
 800384e:	17db      	asrs	r3, r3, #31
 8003850:	ebc3 01a1 	rsb	r1, r3, r1, asr #2
 8003854:	4c44      	ldr	r4, [pc, #272]	; (8003968 <TaskValeurSuivante+0x148>)
 8003856:	6021      	str	r1, [r4, #0]
					printf("dizaine nouvelle valeur %d\n", dizaine);
 8003858:	4844      	ldr	r0, [pc, #272]	; (800396c <TaskValeurSuivante+0x14c>)
 800385a:	f000 fdf4 	bl	8004446 <iprintf>


					new_valeur =  (dizaine<<4) + unite ;
 800385e:	6820      	ldr	r0, [r4, #0]
 8003860:	0100      	lsls	r0, r0, #4
 8003862:	b2c0      	uxtb	r0, r0
 8003864:	782b      	ldrb	r3, [r5, #0]
 8003866:	4418      	add	r0, r3
					mise_a_jour_rtc( new_valeur, champ);
 8003868:	4b41      	ldr	r3, [pc, #260]	; (8003970 <TaskValeurSuivante+0x150>)
 800386a:	6819      	ldr	r1, [r3, #0]
 800386c:	b2c0      	uxtb	r0, r0
 800386e:	f000 faff 	bl	8003e70 <mise_a_jour_rtc>
					mise_a_jour_rtc( new_valeur, champ);
				}



				valeur = receive_info_rtc(champ);
 8003872:	4b3f      	ldr	r3, [pc, #252]	; (8003970 <TaskValeurSuivante+0x150>)
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	f000 fa03 	bl	8003c80 <receive_info_rtc>
 800387a:	4b3e      	ldr	r3, [pc, #248]	; (8003974 <TaskValeurSuivante+0x154>)
 800387c:	7018      	strb	r0, [r3, #0]


			}
		}

		osDelay(500);
 800387e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003882:	f7ff f803 	bl	800288c <osDelay>
		if (mode == REGLAGES)
 8003886:	4b3c      	ldr	r3, [pc, #240]	; (8003978 <TaskValeurSuivante+0x158>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f7      	bne.n	800387e <TaskValeurSuivante+0x5e>
			if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == 1)
 800388e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003892:	483a      	ldr	r0, [pc, #232]	; (800397c <TaskValeurSuivante+0x15c>)
 8003894:	f7fd fa06 	bl	8000ca4 <HAL_GPIO_ReadPin>
 8003898:	2801      	cmp	r0, #1
 800389a:	d1f0      	bne.n	800387e <TaskValeurSuivante+0x5e>
				uint8_t new_valeur = modifier_valeur_heure_courante(sens, valeur, champ);
 800389c:	4d34      	ldr	r5, [pc, #208]	; (8003970 <TaskValeurSuivante+0x150>)
 800389e:	682a      	ldr	r2, [r5, #0]
 80038a0:	4b34      	ldr	r3, [pc, #208]	; (8003974 <TaskValeurSuivante+0x154>)
 80038a2:	7819      	ldrb	r1, [r3, #0]
 80038a4:	4b36      	ldr	r3, [pc, #216]	; (8003980 <TaskValeurSuivante+0x160>)
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	f000 fa06 	bl	8003cb8 <modifier_valeur_heure_courante>
 80038ac:	4604      	mov	r4, r0
 80038ae:	b2c2      	uxtb	r2, r0
				if (champ == SECONDES)
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0b6      	beq.n	8003824 <TaskValeurSuivante+0x4>
				else if (champ == MINUTES)
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d028      	beq.n	800390c <TaskValeurSuivante+0xec>
				else if (champ == HEURES)
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d1d9      	bne.n	8003872 <TaskValeurSuivante+0x52>
					unite = new_valeur%10;
 80038be:	4b31      	ldr	r3, [pc, #196]	; (8003984 <TaskValeurSuivante+0x164>)
 80038c0:	fba3 1302 	umull	r1, r3, r3, r2
 80038c4:	08db      	lsrs	r3, r3, #3
 80038c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038ca:	0059      	lsls	r1, r3, #1
 80038cc:	1a52      	subs	r2, r2, r1
 80038ce:	b2d1      	uxtb	r1, r2
 80038d0:	4d22      	ldr	r5, [pc, #136]	; (800395c <TaskValeurSuivante+0x13c>)
 80038d2:	6029      	str	r1, [r5, #0]
					printf("unité nouvelle valeur %d\n", unite);
 80038d4:	4822      	ldr	r0, [pc, #136]	; (8003960 <TaskValeurSuivante+0x140>)
 80038d6:	f000 fdb6 	bl	8004446 <iprintf>
					dizaine = (new_valeur-unite)/10;
 80038da:	b2e3      	uxtb	r3, r4
 80038dc:	682a      	ldr	r2, [r5, #0]
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	4920      	ldr	r1, [pc, #128]	; (8003964 <TaskValeurSuivante+0x144>)
 80038e2:	fb81 2103 	smull	r2, r1, r1, r3
 80038e6:	17db      	asrs	r3, r3, #31
 80038e8:	ebc3 01a1 	rsb	r1, r3, r1, asr #2
 80038ec:	4c1e      	ldr	r4, [pc, #120]	; (8003968 <TaskValeurSuivante+0x148>)
 80038ee:	6021      	str	r1, [r4, #0]
					printf("dizaine nouvelle valeur %d\n", dizaine);
 80038f0:	481e      	ldr	r0, [pc, #120]	; (800396c <TaskValeurSuivante+0x14c>)
 80038f2:	f000 fda8 	bl	8004446 <iprintf>
					new_valeur =  (dizaine<<4) + unite ;
 80038f6:	6820      	ldr	r0, [r4, #0]
 80038f8:	0100      	lsls	r0, r0, #4
 80038fa:	b2c0      	uxtb	r0, r0
 80038fc:	782b      	ldrb	r3, [r5, #0]
 80038fe:	4418      	add	r0, r3
					mise_a_jour_rtc( new_valeur, champ);
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <TaskValeurSuivante+0x150>)
 8003902:	6819      	ldr	r1, [r3, #0]
 8003904:	b2c0      	uxtb	r0, r0
 8003906:	f000 fab3 	bl	8003e70 <mise_a_jour_rtc>
 800390a:	e7b2      	b.n	8003872 <TaskValeurSuivante+0x52>
					unite = new_valeur%10;
 800390c:	f103 33cc 	add.w	r3, r3, #3435973836	; 0xcccccccc
 8003910:	fba3 1302 	umull	r1, r3, r3, r2
 8003914:	08db      	lsrs	r3, r3, #3
 8003916:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800391a:	0059      	lsls	r1, r3, #1
 800391c:	1a51      	subs	r1, r2, r1
 800391e:	b2c9      	uxtb	r1, r1
 8003920:	4d0e      	ldr	r5, [pc, #56]	; (800395c <TaskValeurSuivante+0x13c>)
 8003922:	6029      	str	r1, [r5, #0]
					printf("unité nouvelle valeur %d\n", unite);
 8003924:	480e      	ldr	r0, [pc, #56]	; (8003960 <TaskValeurSuivante+0x140>)
 8003926:	f000 fd8e 	bl	8004446 <iprintf>
					dizaine = (new_valeur-unite)/10;
 800392a:	b2e3      	uxtb	r3, r4
 800392c:	682a      	ldr	r2, [r5, #0]
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	490c      	ldr	r1, [pc, #48]	; (8003964 <TaskValeurSuivante+0x144>)
 8003932:	fb81 2103 	smull	r2, r1, r1, r3
 8003936:	17db      	asrs	r3, r3, #31
 8003938:	ebc3 01a1 	rsb	r1, r3, r1, asr #2
 800393c:	4c0a      	ldr	r4, [pc, #40]	; (8003968 <TaskValeurSuivante+0x148>)
 800393e:	6021      	str	r1, [r4, #0]
					printf("dizaine nouvelle valeur %d\n", dizaine);
 8003940:	480a      	ldr	r0, [pc, #40]	; (800396c <TaskValeurSuivante+0x14c>)
 8003942:	f000 fd80 	bl	8004446 <iprintf>
					new_valeur =  (dizaine<<4) + unite ;
 8003946:	6820      	ldr	r0, [r4, #0]
 8003948:	0100      	lsls	r0, r0, #4
 800394a:	b2c0      	uxtb	r0, r0
 800394c:	782b      	ldrb	r3, [r5, #0]
 800394e:	4418      	add	r0, r3
					mise_a_jour_rtc( new_valeur, champ);
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <TaskValeurSuivante+0x150>)
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	b2c0      	uxtb	r0, r0
 8003956:	f000 fa8b 	bl	8003e70 <mise_a_jour_rtc>
 800395a:	e78a      	b.n	8003872 <TaskValeurSuivante+0x52>
 800395c:	20004044 	.word	0x20004044
 8003960:	080047f4 	.word	0x080047f4
 8003964:	66666667 	.word	0x66666667
 8003968:	20004030 	.word	0x20004030
 800396c:	08004810 	.word	0x08004810
 8003970:	20000010 	.word	0x20000010
 8003974:	20003d80 	.word	0x20003d80
 8003978:	20000014 	.word	0x20000014
 800397c:	40020800 	.word	0x40020800
 8003980:	20003fd8 	.word	0x20003fd8
 8003984:	cccccccd 	.word	0xcccccccd

08003988 <TaskRTCaffichage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_TaskRTCaffichage */
void TaskRTCaffichage(void const * argument)
{
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	b082      	sub	sp, #8
	/* USER CODE BEGIN TaskVariationLED */
	transmission_I2C1[0] = 0; //adresse des secondes dans la mémoire de la carte RTC
 800398c:	2200      	movs	r2, #0
 800398e:	4b31      	ldr	r3, [pc, #196]	; (8003a54 <TaskRTCaffichage+0xcc>)
 8003990:	701a      	strb	r2, [r3, #0]

	//le programme récupère la valeur SECONDES de la RTC
	HAL_I2C_Master_Transmit(&hi2c1, (uint8_t)SLAVE_ADRESS, p_transmission_I2C1, (uint16_t)1, HAL_MAX_DELAY);
 8003992:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <TaskRTCaffichage+0xd0>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4d31      	ldr	r5, [pc, #196]	; (8003a5c <TaskRTCaffichage+0xd4>)
 8003998:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800399c:	9600      	str	r6, [sp, #0]
 800399e:	2301      	movs	r3, #1
 80039a0:	21d0      	movs	r1, #208	; 0xd0
 80039a2:	4628      	mov	r0, r5
 80039a4:	f7fd fc5c 	bl	8001260 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint8_t)SLAVE_ADRESS, (uint8_t *)p_reception_I2C1, (uint16_t)1, HAL_MAX_DELAY);
 80039a8:	4c2d      	ldr	r4, [pc, #180]	; (8003a60 <TaskRTCaffichage+0xd8>)
 80039aa:	9600      	str	r6, [sp, #0]
 80039ac:	2301      	movs	r3, #1
 80039ae:	6822      	ldr	r2, [r4, #0]
 80039b0:	21d0      	movs	r1, #208	; 0xd0
 80039b2:	4628      	mov	r0, r5
 80039b4:	f7fd fd0e 	bl	80013d4 <HAL_I2C_Master_Receive>

	//le programme masque l'octet SECONDE envoyé à la RTC pour isoler la valeur du CH Bit
	uint8_t valeur_CH_Bit = (*p_reception_I2C1) & MASQUE_CHBit;
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	781b      	ldrb	r3, [r3, #0]

	//Si CHBit est égale à 1, la RTC est désactivé
	if (valeur_CH_Bit == MASQUE_CHBit)
 80039bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80039c0:	d010      	beq.n	80039e4 <TaskRTCaffichage+0x5c>
	{
		//le programme active la RTC en passant CHBit à 0 sans écraser le reste et envoie l'info à la RTC
		transmission_I2C1[1] = (*p_reception_I2C1) & ( MASQUE_CHBit_0 );
 80039c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c6:	4a23      	ldr	r2, [pc, #140]	; (8003a54 <TaskRTCaffichage+0xcc>)
 80039c8:	7053      	strb	r3, [r2, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint8_t)SLAVE_ADRESS, p_transmission_I2C1, (uint16_t)2, HAL_MAX_DELAY);
 80039ca:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <TaskRTCaffichage+0xd0>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	9600      	str	r6, [sp, #0]
 80039d0:	2302      	movs	r3, #2
 80039d2:	21d0      	movs	r1, #208	; 0xd0
 80039d4:	4628      	mov	r0, r5
 80039d6:	f7fd fc43 	bl	8001260 <HAL_I2C_Master_Transmit>
 80039da:	e003      	b.n	80039e4 <TaskRTCaffichage+0x5c>
			int heure = dizaine_heure * 10 + unites_heure;

			printf("%d h : %d min : %d sec \n", heure, minutes ,secondes);
		}

		osDelay(1000);
 80039dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039e0:	f7fe ff54 	bl	800288c <osDelay>
		if (mode == HORLOGE)
 80039e4:	4b1f      	ldr	r3, [pc, #124]	; (8003a64 <TaskRTCaffichage+0xdc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d1f7      	bne.n	80039dc <TaskRTCaffichage+0x54>
			HAL_I2C_Master_Transmit(&hi2c1, (uint8_t)SLAVE_ADRESS, p_transmission_I2C1, (uint16_t)1, HAL_MAX_DELAY);
 80039ec:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <TaskRTCaffichage+0xd0>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4d1a      	ldr	r5, [pc, #104]	; (8003a5c <TaskRTCaffichage+0xd4>)
 80039f2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80039f6:	9600      	str	r6, [sp, #0]
 80039f8:	2301      	movs	r3, #1
 80039fa:	21d0      	movs	r1, #208	; 0xd0
 80039fc:	4628      	mov	r0, r5
 80039fe:	f7fd fc2f 	bl	8001260 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c1, (uint8_t)SLAVE_ADRESS, (uint8_t *)p_reception_I2C1, (uint16_t)3, HAL_MAX_DELAY);
 8003a02:	4c17      	ldr	r4, [pc, #92]	; (8003a60 <TaskRTCaffichage+0xd8>)
 8003a04:	9600      	str	r6, [sp, #0]
 8003a06:	2303      	movs	r3, #3
 8003a08:	6822      	ldr	r2, [r4, #0]
 8003a0a:	21d0      	movs	r1, #208	; 0xd0
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	f7fd fce1 	bl	80013d4 <HAL_I2C_Master_Receive>
			int unites_secondes = (*p_reception_I2C1) & (MASQUE_UNITEES);
 8003a12:	6820      	ldr	r0, [r4, #0]
 8003a14:	7802      	ldrb	r2, [r0, #0]
 8003a16:	f002 040f 	and.w	r4, r2, #15
			int dizaines_secondes = (*p_reception_I2C1 & (MASQUE_DIZAINES)) >> 4;
 8003a1a:	f3c2 1202 	ubfx	r2, r2, #4, #3
			int secondes = (dizaines_secondes * 10) + unites_secondes;
 8003a1e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003a22:	0053      	lsls	r3, r2, #1
			int unites_minutes = (*(p_reception_I2C1+1))& (MASQUE_UNITEES);
 8003a24:	7841      	ldrb	r1, [r0, #1]
 8003a26:	f001 060f 	and.w	r6, r1, #15
			int dizaine_minutes =(*(p_reception_I2C1+1) & (MASQUE_DIZAINES)) >> 4;
 8003a2a:	f3c1 1102 	ubfx	r1, r1, #4, #3
			int minutes = dizaine_minutes * 10 + unites_minutes;
 8003a2e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003a32:	004a      	lsls	r2, r1, #1
			int unites_heure = (*(p_reception_I2C1+2))& (MASQUE_UNITEES);
 8003a34:	7880      	ldrb	r0, [r0, #2]
 8003a36:	f000 050f 	and.w	r5, r0, #15
			int dizaine_heure =(*(p_reception_I2C1+2) & (MASQUE_DIZAINES)) >> 4;
 8003a3a:	f3c0 1002 	ubfx	r0, r0, #4, #3
			int heure = dizaine_heure * 10 + unites_heure;
 8003a3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003a42:	0041      	lsls	r1, r0, #1
			printf("%d h : %d min : %d sec \n", heure, minutes ,secondes);
 8003a44:	4423      	add	r3, r4
 8003a46:	4432      	add	r2, r6
 8003a48:	4429      	add	r1, r5
 8003a4a:	4807      	ldr	r0, [pc, #28]	; (8003a68 <TaskRTCaffichage+0xe0>)
 8003a4c:	f000 fcfb 	bl	8004446 <iprintf>
 8003a50:	e7c4      	b.n	80039dc <TaskRTCaffichage+0x54>
 8003a52:	bf00      	nop
 8003a54:	2000404c 	.word	0x2000404c
 8003a58:	2000000c 	.word	0x2000000c
 8003a5c:	20004078 	.word	0x20004078
 8003a60:	20000008 	.word	0x20000008
 8003a64:	20000014 	.word	0x20000014
 8003a68:	080047d8 	.word	0x080047d8

08003a6c <vApplicationGetIdleTaskMemory>:
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <vApplicationGetIdleTaskMemory+0x10>)
 8003a6e:	6003      	str	r3, [r0, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003a70:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <vApplicationGetIdleTaskMemory+0x14>)
 8003a72:	600b      	str	r3, [r1, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003a74:	2380      	movs	r3, #128	; 0x80
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20003f84 	.word	0x20003f84
 8003a80:	20003d84 	.word	0x20003d84

08003a84 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8003a84:	b570      	push	{r4, r5, r6, lr}
 8003a86:	b0aa      	sub	sp, #168	; 0xa8
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003a88:	4c2d      	ldr	r4, [pc, #180]	; (8003b40 <MX_FREERTOS_Init+0xbc>)
 8003a8a:	ad23      	add	r5, sp, #140	; 0x8c
 8003a8c:	4626      	mov	r6, r4
 8003a8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a92:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003a96:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	a823      	add	r0, sp, #140	; 0x8c
 8003a9e:	f7fe fec0 	bl	8002822 <osThreadCreate>
 8003aa2:	4b28      	ldr	r3, [pc, #160]	; (8003b44 <MX_FREERTOS_Init+0xc0>)
 8003aa4:	6018      	str	r0, [r3, #0]
	osThreadDef(MyTaskMode, TaskMode, osPriorityNormal, 0, 128);
 8003aa6:	ad1c      	add	r5, sp, #112	; 0x70
 8003aa8:	f104 061c 	add.w	r6, r4, #28
 8003aac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003ab4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	MyTaskModeHandle = osThreadCreate(osThread(MyTaskMode), NULL);
 8003ab8:	2100      	movs	r1, #0
 8003aba:	a81c      	add	r0, sp, #112	; 0x70
 8003abc:	f7fe feb1 	bl	8002822 <osThreadCreate>
 8003ac0:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <MX_FREERTOS_Init+0xc4>)
 8003ac2:	6018      	str	r0, [r3, #0]
	osThreadDef(myTaskChamps, TaskChamps, osPriorityNormal, 0, 128);
 8003ac4:	ad15      	add	r5, sp, #84	; 0x54
 8003ac6:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8003aca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ace:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003ad2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	myTaskChampsHandle = osThreadCreate(osThread(myTaskChamps), NULL);
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	a815      	add	r0, sp, #84	; 0x54
 8003ada:	f7fe fea2 	bl	8002822 <osThreadCreate>
 8003ade:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <MX_FREERTOS_Init+0xc8>)
 8003ae0:	6018      	str	r0, [r3, #0]
	osThreadDef(myTaskSensRegla, TaskSensReglage, osPriorityNormal, 0, 128);
 8003ae2:	ad0e      	add	r5, sp, #56	; 0x38
 8003ae4:	f104 0654 	add.w	r6, r4, #84	; 0x54
 8003ae8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aec:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003af0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	myTaskSensReglaHandle = osThreadCreate(osThread(myTaskSensRegla), NULL);
 8003af4:	2100      	movs	r1, #0
 8003af6:	a80e      	add	r0, sp, #56	; 0x38
 8003af8:	f7fe fe93 	bl	8002822 <osThreadCreate>
 8003afc:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <MX_FREERTOS_Init+0xcc>)
 8003afe:	6018      	str	r0, [r3, #0]
	osThreadDef(myTaskValeurSui, TaskValeurSuivante, osPriorityNormal, 0, 128);
 8003b00:	ad07      	add	r5, sp, #28
 8003b02:	f104 0670 	add.w	r6, r4, #112	; 0x70
 8003b06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b0a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003b0e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	myTaskValeurSuiHandle = osThreadCreate(osThread(myTaskValeurSui), NULL);
 8003b12:	2100      	movs	r1, #0
 8003b14:	a807      	add	r0, sp, #28
 8003b16:	f7fe fe84 	bl	8002822 <osThreadCreate>
 8003b1a:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <MX_FREERTOS_Init+0xd0>)
 8003b1c:	6018      	str	r0, [r3, #0]
	osThreadDef(myTaskRTCaffich, TaskRTCaffichage, osPriorityNormal, 0, 128);
 8003b1e:	466d      	mov	r5, sp
 8003b20:	348c      	adds	r4, #140	; 0x8c
 8003b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b26:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003b2a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	myTaskRTCaffichHandle = osThreadCreate(osThread(myTaskRTCaffich), NULL);
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4668      	mov	r0, sp
 8003b32:	f7fe fe76 	bl	8002822 <osThreadCreate>
 8003b36:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <MX_FREERTOS_Init+0xd4>)
 8003b38:	6018      	str	r0, [r3, #0]
}
 8003b3a:	b02a      	add	sp, #168	; 0xa8
 8003b3c:	bd70      	pop	{r4, r5, r6, pc}
 8003b3e:	bf00      	nop
 8003b40:	08004728 	.word	0x08004728
 8003b44:	2000402c 	.word	0x2000402c
 8003b48:	20004040 	.word	0x20004040
 8003b4c:	20004048 	.word	0x20004048
 8003b50:	2000403c 	.word	0x2000403c
 8003b54:	20004034 	.word	0x20004034
 8003b58:	20004038 	.word	0x20004038

08003b5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b60:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b62:	2400      	movs	r4, #0
 8003b64:	9407      	str	r4, [sp, #28]
 8003b66:	9408      	str	r4, [sp, #32]
 8003b68:	9409      	str	r4, [sp, #36]	; 0x24
 8003b6a:	940a      	str	r4, [sp, #40]	; 0x28
 8003b6c:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6e:	9401      	str	r4, [sp, #4]
 8003b70:	4b3d      	ldr	r3, [pc, #244]	; (8003c68 <MX_GPIO_Init+0x10c>)
 8003b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b74:	f042 0204 	orr.w	r2, r2, #4
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
 8003b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7c:	f002 0204 	and.w	r2, r2, #4
 8003b80:	9201      	str	r2, [sp, #4]
 8003b82:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b84:	9402      	str	r4, [sp, #8]
 8003b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b90:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003b94:	9202      	str	r2, [sp, #8]
 8003b96:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b98:	9403      	str	r4, [sp, #12]
 8003b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba4:	f002 0201 	and.w	r2, r2, #1
 8003ba8:	9203      	str	r2, [sp, #12]
 8003baa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bac:	9404      	str	r4, [sp, #16]
 8003bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb0:	f042 0202 	orr.w	r2, r2, #2
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
 8003bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb8:	f002 0202 	and.w	r2, r2, #2
 8003bbc:	9204      	str	r2, [sp, #16]
 8003bbe:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bc0:	9405      	str	r4, [sp, #20]
 8003bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bc4:	f042 0208 	orr.w	r2, r2, #8
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8003bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bcc:	f002 0208 	and.w	r2, r2, #8
 8003bd0:	9205      	str	r2, [sp, #20]
 8003bd2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bd4:	9406      	str	r4, [sp, #24]
 8003bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	9306      	str	r3, [sp, #24]
 8003be6:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003be8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8003c7c <MX_GPIO_Init+0x120>
 8003bec:	4622      	mov	r2, r4
 8003bee:	f244 0181 	movw	r1, #16513	; 0x4081
 8003bf2:	4640      	mov	r0, r8
 8003bf4:	f7fd f85d 	bl	8000cb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003bf8:	4d1c      	ldr	r5, [pc, #112]	; (8003c6c <MX_GPIO_Init+0x110>)
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	2140      	movs	r1, #64	; 0x40
 8003bfe:	4628      	mov	r0, r5
 8003c00:	f7fd f857 	bl	8000cb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c08:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c0a:	4e19      	ldr	r6, [pc, #100]	; (8003c70 <MX_GPIO_Init+0x114>)
 8003c0c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003c10:	a907      	add	r1, sp, #28
 8003c12:	4818      	ldr	r0, [pc, #96]	; (8003c74 <MX_GPIO_Init+0x118>)
 8003c14:	f7fc ff54 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003c18:	f244 0381 	movw	r3, #16513	; 0x4081
 8003c1c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c1e:	2701      	movs	r7, #1
 8003c20:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c24:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c26:	a907      	add	r1, sp, #28
 8003c28:	4640      	mov	r0, r8
 8003c2a:	f7fc ff49 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003c2e:	2340      	movs	r3, #64	; 0x40
 8003c30:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c32:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c34:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c36:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003c38:	a907      	add	r1, sp, #28
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	f7fc ff40 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c44:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003c48:	a907      	add	r1, sp, #28
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	f7fc ff38 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ToucheTactile1_Pin|ToucheTactile2_Pin|ToucheTactile3_Pin|ToucheTactile4_Pin;
 8003c50:	23f0      	movs	r3, #240	; 0xf0
 8003c52:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c54:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c56:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c58:	a907      	add	r1, sp, #28
 8003c5a:	4807      	ldr	r0, [pc, #28]	; (8003c78 <MX_GPIO_Init+0x11c>)
 8003c5c:	f7fc ff30 	bl	8000ac0 <HAL_GPIO_Init>

}
 8003c60:	b00c      	add	sp, #48	; 0x30
 8003c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c66:	bf00      	nop
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40021800 	.word	0x40021800
 8003c70:	10110000 	.word	0x10110000
 8003c74:	40020800 	.word	0x40020800
 8003c78:	40020c00 	.word	0x40020c00
 8003c7c:	40020400 	.word	0x40020400

08003c80 <receive_info_rtc>:
/*
 * @brief Récupére dans le RTC la valeur que l'utilisateur souhaite modifier (heure, minute ou seconde.
 * @param Prend en parametre "choix_info_a_modifier" qui correspond au buffer de la RTC à modifier
 *
 */
uint8_t receive_info_rtc(int choix_info_a_modifier){
 8003c80:	b530      	push	{r4, r5, lr}
 8003c82:	b085      	sub	sp, #20

	uint8_t TxBuffer[1];
	uint8_t RxBuffer;

	TxBuffer[0] = choix_info_a_modifier;
 8003c84:	aa04      	add	r2, sp, #16
 8003c86:	f802 0d04 	strb.w	r0, [r2, #-4]!

	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SLAVE_ADRESS, (uint8_t*)&TxBuffer, 1, MAX_DELAY);
 8003c8a:	4c0a      	ldr	r4, [pc, #40]	; (8003cb4 <receive_info_rtc+0x34>)
 8003c8c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003c90:	9500      	str	r5, [sp, #0]
 8003c92:	2301      	movs	r3, #1
 8003c94:	21d0      	movs	r1, #208	; 0xd0
 8003c96:	4620      	mov	r0, r4
 8003c98:	f7fd fae2 	bl	8001260 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)SLAVE_ADRESS,(uint8_t*)&RxBuffer, 1, MAX_DELAY);
 8003c9c:	9500      	str	r5, [sp, #0]
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f10d 020b 	add.w	r2, sp, #11
 8003ca4:	21d0      	movs	r1, #208	; 0xd0
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f7fd fb94 	bl	80013d4 <HAL_I2C_Master_Receive>

	return RxBuffer;
}
 8003cac:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8003cb0:	b005      	add	sp, #20
 8003cb2:	bd30      	pop	{r4, r5, pc}
 8003cb4:	20004078 	.word	0x20004078

08003cb8 <modifier_valeur_heure_courante>:
 * @param si le bouton est appuyé
 * @param si on incrémente ou on décrémente
 * @param la valeur reçu
 * @param le type de valeur à modifier
 */
int modifier_valeur_heure_courante(int sens, int RxBuffer, int champ){
 8003cb8:	b510      	push	{r4, lr}

	switch (sens){
 8003cba:	b120      	cbz	r0, 8003cc6 <modifier_valeur_heure_courante+0xe>
 8003cbc:	2801      	cmp	r0, #1
 8003cbe:	d064      	beq.n	8003d8a <modifier_valeur_heure_courante+0xd2>
				break;
			}
			break;
	}
	return retour;
}
 8003cc0:	4b60      	ldr	r3, [pc, #384]	; (8003e44 <modifier_valeur_heure_courante+0x18c>)
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	bd10      	pop	{r4, pc}
			switch(champ){
 8003cc6:	2a01      	cmp	r2, #1
 8003cc8:	d023      	beq.n	8003d12 <modifier_valeur_heure_courante+0x5a>
 8003cca:	2a02      	cmp	r2, #2
 8003ccc:	d03f      	beq.n	8003d4e <modifier_valeur_heure_courante+0x96>
 8003cce:	2a00      	cmp	r2, #0
 8003cd0:	d1f6      	bne.n	8003cc0 <modifier_valeur_heure_courante+0x8>
					unites_secondes = (RxBuffer & MASQUE_UNITEES);
 8003cd2:	f001 030f 	and.w	r3, r1, #15
 8003cd6:	4a5c      	ldr	r2, [pc, #368]	; (8003e48 <modifier_valeur_heure_courante+0x190>)
 8003cd8:	6013      	str	r3, [r2, #0]
					dizaine_secondes = (RxBuffer & MASQUE_DIZAINES) >> 4;
 8003cda:	f3c1 1102 	ubfx	r1, r1, #4, #3
 8003cde:	4a5b      	ldr	r2, [pc, #364]	; (8003e4c <modifier_valeur_heure_courante+0x194>)
 8003ce0:	6011      	str	r1, [r2, #0]
					secondes = dizaine_secondes * 10 + unites_secondes;
 8003ce2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003ce6:	004a      	lsls	r2, r1, #1
 8003ce8:	1899      	adds	r1, r3, r2
 8003cea:	4c59      	ldr	r4, [pc, #356]	; (8003e50 <modifier_valeur_heure_courante+0x198>)
 8003cec:	6021      	str	r1, [r4, #0]
					printf("%d\n", secondes);
 8003cee:	4859      	ldr	r0, [pc, #356]	; (8003e54 <modifier_valeur_heure_courante+0x19c>)
 8003cf0:	f000 fba9 	bl	8004446 <iprintf>
					minutes++;
 8003cf4:	4a58      	ldr	r2, [pc, #352]	; (8003e58 <modifier_valeur_heure_courante+0x1a0>)
 8003cf6:	6813      	ldr	r3, [r2, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	6013      	str	r3, [r2, #0]
					if(secondes == 60){
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	2b3c      	cmp	r3, #60	; 0x3c
 8003d00:	d004      	beq.n	8003d0c <modifier_valeur_heure_courante+0x54>
					retour = secondes;
 8003d02:	4b53      	ldr	r3, [pc, #332]	; (8003e50 <modifier_valeur_heure_courante+0x198>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4b4f      	ldr	r3, [pc, #316]	; (8003e44 <modifier_valeur_heure_courante+0x18c>)
 8003d08:	601a      	str	r2, [r3, #0]
					break;
 8003d0a:	e7d9      	b.n	8003cc0 <modifier_valeur_heure_courante+0x8>
						secondes = 0;
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	6022      	str	r2, [r4, #0]
 8003d10:	e7f7      	b.n	8003d02 <modifier_valeur_heure_courante+0x4a>
					unites_minutes = (RxBuffer & MASQUE_UNITEES);
 8003d12:	f001 030f 	and.w	r3, r1, #15
 8003d16:	4a51      	ldr	r2, [pc, #324]	; (8003e5c <modifier_valeur_heure_courante+0x1a4>)
 8003d18:	6013      	str	r3, [r2, #0]
					dizaine_minutes = (RxBuffer & MASQUE_DIZAINES) >> 4;
 8003d1a:	f3c1 1102 	ubfx	r1, r1, #4, #3
 8003d1e:	4a50      	ldr	r2, [pc, #320]	; (8003e60 <modifier_valeur_heure_courante+0x1a8>)
 8003d20:	6011      	str	r1, [r2, #0]
					minutes = dizaine_minutes * 10 + unites_minutes;
 8003d22:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003d26:	004a      	lsls	r2, r1, #1
 8003d28:	1899      	adds	r1, r3, r2
 8003d2a:	4c4b      	ldr	r4, [pc, #300]	; (8003e58 <modifier_valeur_heure_courante+0x1a0>)
 8003d2c:	6021      	str	r1, [r4, #0]
					printf("%d\n", minutes);
 8003d2e:	4849      	ldr	r0, [pc, #292]	; (8003e54 <modifier_valeur_heure_courante+0x19c>)
 8003d30:	f000 fb89 	bl	8004446 <iprintf>
					minutes++;
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	6023      	str	r3, [r4, #0]
					if(minutes == 60){
 8003d3a:	2b3c      	cmp	r3, #60	; 0x3c
 8003d3c:	d004      	beq.n	8003d48 <modifier_valeur_heure_courante+0x90>
					retour = minutes;
 8003d3e:	4b46      	ldr	r3, [pc, #280]	; (8003e58 <modifier_valeur_heure_courante+0x1a0>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b40      	ldr	r3, [pc, #256]	; (8003e44 <modifier_valeur_heure_courante+0x18c>)
 8003d44:	601a      	str	r2, [r3, #0]
					break;
 8003d46:	e7bb      	b.n	8003cc0 <modifier_valeur_heure_courante+0x8>
						minutes = 0;
 8003d48:	2200      	movs	r2, #0
 8003d4a:	6022      	str	r2, [r4, #0]
 8003d4c:	e7f7      	b.n	8003d3e <modifier_valeur_heure_courante+0x86>
					unites_heures = (RxBuffer & MASQUE_UNITEES);
 8003d4e:	f001 030f 	and.w	r3, r1, #15
 8003d52:	4a44      	ldr	r2, [pc, #272]	; (8003e64 <modifier_valeur_heure_courante+0x1ac>)
 8003d54:	6013      	str	r3, [r2, #0]
					dizaine_heures = (RxBuffer & MASQUE_DIZAINES) >> 4;
 8003d56:	f3c1 1102 	ubfx	r1, r1, #4, #3
 8003d5a:	4a43      	ldr	r2, [pc, #268]	; (8003e68 <modifier_valeur_heure_courante+0x1b0>)
 8003d5c:	6011      	str	r1, [r2, #0]
					heures = dizaine_heures * 10 + unites_heures;
 8003d5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003d62:	004a      	lsls	r2, r1, #1
 8003d64:	1899      	adds	r1, r3, r2
 8003d66:	4c41      	ldr	r4, [pc, #260]	; (8003e6c <modifier_valeur_heure_courante+0x1b4>)
 8003d68:	6021      	str	r1, [r4, #0]
					printf("%d\n", heures);
 8003d6a:	483a      	ldr	r0, [pc, #232]	; (8003e54 <modifier_valeur_heure_courante+0x19c>)
 8003d6c:	f000 fb6b 	bl	8004446 <iprintf>
					heures++;
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	3301      	adds	r3, #1
 8003d74:	6023      	str	r3, [r4, #0]
					if(heures == 24){
 8003d76:	2b18      	cmp	r3, #24
 8003d78:	d004      	beq.n	8003d84 <modifier_valeur_heure_courante+0xcc>
					retour = heures;
 8003d7a:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <modifier_valeur_heure_courante+0x1b4>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4b31      	ldr	r3, [pc, #196]	; (8003e44 <modifier_valeur_heure_courante+0x18c>)
 8003d80:	601a      	str	r2, [r3, #0]
					break;
 8003d82:	e79d      	b.n	8003cc0 <modifier_valeur_heure_courante+0x8>
						heures = 0;
 8003d84:	2200      	movs	r2, #0
 8003d86:	6022      	str	r2, [r4, #0]
 8003d88:	e7f7      	b.n	8003d7a <modifier_valeur_heure_courante+0xc2>
			switch(champ){
 8003d8a:	2a01      	cmp	r2, #1
 8003d8c:	d021      	beq.n	8003dd2 <modifier_valeur_heure_courante+0x11a>
 8003d8e:	2a02      	cmp	r2, #2
 8003d90:	d03b      	beq.n	8003e0a <modifier_valeur_heure_courante+0x152>
 8003d92:	2a00      	cmp	r2, #0
 8003d94:	d194      	bne.n	8003cc0 <modifier_valeur_heure_courante+0x8>
				unites_secondes = (RxBuffer & MASQUE_UNITEES);
 8003d96:	f001 030f 	and.w	r3, r1, #15
 8003d9a:	4a2b      	ldr	r2, [pc, #172]	; (8003e48 <modifier_valeur_heure_courante+0x190>)
 8003d9c:	6013      	str	r3, [r2, #0]
				dizaine_secondes = (RxBuffer & MASQUE_DIZAINES) >> 4;
 8003d9e:	f3c1 1102 	ubfx	r1, r1, #4, #3
 8003da2:	4a2a      	ldr	r2, [pc, #168]	; (8003e4c <modifier_valeur_heure_courante+0x194>)
 8003da4:	6011      	str	r1, [r2, #0]
				secondes = dizaine_secondes * 10 + unites_secondes;
 8003da6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003daa:	004a      	lsls	r2, r1, #1
 8003dac:	1899      	adds	r1, r3, r2
 8003dae:	4c28      	ldr	r4, [pc, #160]	; (8003e50 <modifier_valeur_heure_courante+0x198>)
 8003db0:	6021      	str	r1, [r4, #0]
				printf("%d\n", secondes);
 8003db2:	4828      	ldr	r0, [pc, #160]	; (8003e54 <modifier_valeur_heure_courante+0x19c>)
 8003db4:	f000 fb47 	bl	8004446 <iprintf>
				minutes--;
 8003db8:	4a27      	ldr	r2, [pc, #156]	; (8003e58 <modifier_valeur_heure_courante+0x1a0>)
 8003dba:	6813      	ldr	r3, [r2, #0]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	6013      	str	r3, [r2, #0]
				if(secondes == 0){
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	b90b      	cbnz	r3, 8003dc8 <modifier_valeur_heure_courante+0x110>
					secondes = 59;
 8003dc4:	223b      	movs	r2, #59	; 0x3b
 8003dc6:	6022      	str	r2, [r4, #0]
				retour = secondes;
 8003dc8:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <modifier_valeur_heure_courante+0x198>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <modifier_valeur_heure_courante+0x18c>)
 8003dce:	601a      	str	r2, [r3, #0]
				break;
 8003dd0:	e776      	b.n	8003cc0 <modifier_valeur_heure_courante+0x8>
				unites_minutes = (RxBuffer & MASQUE_UNITEES);
 8003dd2:	f001 030f 	and.w	r3, r1, #15
 8003dd6:	4a21      	ldr	r2, [pc, #132]	; (8003e5c <modifier_valeur_heure_courante+0x1a4>)
 8003dd8:	6013      	str	r3, [r2, #0]
				dizaine_minutes = (RxBuffer & MASQUE_DIZAINES) >> 4;
 8003dda:	f3c1 1102 	ubfx	r1, r1, #4, #3
 8003dde:	4a20      	ldr	r2, [pc, #128]	; (8003e60 <modifier_valeur_heure_courante+0x1a8>)
 8003de0:	6011      	str	r1, [r2, #0]
				minutes = dizaine_minutes * 10 + unites_minutes;
 8003de2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003de6:	004a      	lsls	r2, r1, #1
 8003de8:	1899      	adds	r1, r3, r2
 8003dea:	4c1b      	ldr	r4, [pc, #108]	; (8003e58 <modifier_valeur_heure_courante+0x1a0>)
 8003dec:	6021      	str	r1, [r4, #0]
				printf("%d\n", minutes);
 8003dee:	4819      	ldr	r0, [pc, #100]	; (8003e54 <modifier_valeur_heure_courante+0x19c>)
 8003df0:	f000 fb29 	bl	8004446 <iprintf>
				minutes--;
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	6023      	str	r3, [r4, #0]
				if(minutes == 0){
 8003dfa:	b90b      	cbnz	r3, 8003e00 <modifier_valeur_heure_courante+0x148>
					minutes = 59;
 8003dfc:	223b      	movs	r2, #59	; 0x3b
 8003dfe:	6022      	str	r2, [r4, #0]
				retour = minutes;
 8003e00:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <modifier_valeur_heure_courante+0x1a0>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <modifier_valeur_heure_courante+0x18c>)
 8003e06:	601a      	str	r2, [r3, #0]
				break;
 8003e08:	e75a      	b.n	8003cc0 <modifier_valeur_heure_courante+0x8>
				unites_heures = (RxBuffer & MASQUE_UNITEES);
 8003e0a:	f001 030f 	and.w	r3, r1, #15
 8003e0e:	4a15      	ldr	r2, [pc, #84]	; (8003e64 <modifier_valeur_heure_courante+0x1ac>)
 8003e10:	6013      	str	r3, [r2, #0]
				dizaine_heures = (RxBuffer & MASQUE_DIZAINES) >> 4;
 8003e12:	f3c1 1102 	ubfx	r1, r1, #4, #3
 8003e16:	4a14      	ldr	r2, [pc, #80]	; (8003e68 <modifier_valeur_heure_courante+0x1b0>)
 8003e18:	6011      	str	r1, [r2, #0]
				heures = dizaine_heures * 10 + unites_heures;
 8003e1a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003e1e:	004a      	lsls	r2, r1, #1
 8003e20:	1899      	adds	r1, r3, r2
 8003e22:	4c12      	ldr	r4, [pc, #72]	; (8003e6c <modifier_valeur_heure_courante+0x1b4>)
 8003e24:	6021      	str	r1, [r4, #0]
				printf("%d\n", heures);
 8003e26:	480b      	ldr	r0, [pc, #44]	; (8003e54 <modifier_valeur_heure_courante+0x19c>)
 8003e28:	f000 fb0d 	bl	8004446 <iprintf>
				heures--;
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	6023      	str	r3, [r4, #0]
				if(heures == 0){
 8003e32:	b90b      	cbnz	r3, 8003e38 <modifier_valeur_heure_courante+0x180>
					heures = 24;
 8003e34:	2218      	movs	r2, #24
 8003e36:	6022      	str	r2, [r4, #0]
				retour = heures;
 8003e38:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <modifier_valeur_heure_courante+0x1b4>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4b01      	ldr	r3, [pc, #4]	; (8003e44 <modifier_valeur_heure_courante+0x18c>)
 8003e3e:	601a      	str	r2, [r3, #0]
				break;
 8003e40:	e73e      	b.n	8003cc0 <modifier_valeur_heure_courante+0x8>
 8003e42:	bf00      	nop
 8003e44:	20004068 	.word	0x20004068
 8003e48:	20004054 	.word	0x20004054
 8003e4c:	20004070 	.word	0x20004070
 8003e50:	20004058 	.word	0x20004058
 8003e54:	08004828 	.word	0x08004828
 8003e58:	2000406c 	.word	0x2000406c
 8003e5c:	2000405c 	.word	0x2000405c
 8003e60:	20004060 	.word	0x20004060
 8003e64:	20004074 	.word	0x20004074
 8003e68:	20004064 	.word	0x20004064
 8003e6c:	20004050 	.word	0x20004050

08003e70 <mise_a_jour_rtc>:
 * @brief Met à jour le RTC .
 * @param valeur modifier par l'utilisateur
 * @param Prend en parametre "choix_info_a_modifier" qui correspond au buffer de la RTC à modifier
 *
 */
void mise_a_jour_rtc(int RxBuffer, int choix_info_a_modifier){
 8003e70:	b500      	push	{lr}
 8003e72:	b085      	sub	sp, #20

	uint8_t TxBuffer[2];

	TxBuffer[0] = choix_info_a_modifier;
 8003e74:	f88d 100c 	strb.w	r1, [sp, #12]
	TxBuffer[1] = RxBuffer;
 8003e78:	f88d 000d 	strb.w	r0, [sp, #13]

	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SLAVE_ADRESS, (uint8_t*)&TxBuffer, 2, MAX_DELAY);
 8003e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2302      	movs	r3, #2
 8003e84:	aa03      	add	r2, sp, #12
 8003e86:	21d0      	movs	r1, #208	; 0xd0
 8003e88:	4802      	ldr	r0, [pc, #8]	; (8003e94 <mise_a_jour_rtc+0x24>)
 8003e8a:	f7fd f9e9 	bl	8001260 <HAL_I2C_Master_Transmit>

}
 8003e8e:	b005      	add	sp, #20
 8003e90:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e94:	20004078 	.word	0x20004078

08003e98 <Change_Mode>:

/*
 * @Brief Permet de passer du mode Horloge au mode Réglages via la touche tactile n°4.
 */
int Change_Mode(void){
 8003e98:	b508      	push	{r3, lr}
	if(mode == HORLOGE){
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <Change_Mode+0x30>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d003      	beq.n	8003eaa <Change_Mode+0x12>
		printf("Mode Reglages\n");
		mode = REGLAGES;
	}
	else if(mode == REGLAGES){
 8003ea2:	b14b      	cbz	r3, 8003eb8 <Change_Mode+0x20>
		printf("Mode Horloge\n");
		mode = HORLOGE;
	}
	return mode;

}
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <Change_Mode+0x30>)
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	bd08      	pop	{r3, pc}
		printf("Mode Reglages\n");
 8003eaa:	4808      	ldr	r0, [pc, #32]	; (8003ecc <Change_Mode+0x34>)
 8003eac:	f000 fb0a 	bl	80044c4 <puts>
		mode = REGLAGES;
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <Change_Mode+0x30>)
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	e7f5      	b.n	8003ea4 <Change_Mode+0xc>
		printf("Mode Horloge\n");
 8003eb8:	4805      	ldr	r0, [pc, #20]	; (8003ed0 <Change_Mode+0x38>)
 8003eba:	f000 fb03 	bl	80044c4 <puts>
		mode = HORLOGE;
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4b01      	ldr	r3, [pc, #4]	; (8003ec8 <Change_Mode+0x30>)
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e7ee      	b.n	8003ea4 <Change_Mode+0xc>
 8003ec6:	bf00      	nop
 8003ec8:	20000014 	.word	0x20000014
 8003ecc:	08004884 	.word	0x08004884
 8003ed0:	08004894 	.word	0x08004894

08003ed4 <Choix_Champ>:
/*
 * @Brief Permet de changer l'heure courante (secondes,minutes,heures).
 */
int Choix_Champ(void){
 8003ed4:	b508      	push	{r3, lr}
	switch (champ){
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <Choix_Champ+0x40>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d013      	beq.n	8003f06 <Choix_Champ+0x32>
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d003      	beq.n	8003eea <Choix_Champ+0x16>
 8003ee2:	b14b      	cbz	r3, 8003ef8 <Choix_Champ+0x24>
		champ = HEURES;
		printf("Heures\n");
		break;
	}
	return champ;
}
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <Choix_Champ+0x40>)
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	bd08      	pop	{r3, pc}
		champ = SECONDES;
 8003eea:	2200      	movs	r2, #0
 8003eec:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <Choix_Champ+0x40>)
 8003eee:	601a      	str	r2, [r3, #0]
		printf("Secondes\n");
 8003ef0:	4809      	ldr	r0, [pc, #36]	; (8003f18 <Choix_Champ+0x44>)
 8003ef2:	f000 fae7 	bl	80044c4 <puts>
		break;
 8003ef6:	e7f5      	b.n	8003ee4 <Choix_Champ+0x10>
		champ = MINUTES;
 8003ef8:	2201      	movs	r2, #1
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <Choix_Champ+0x40>)
 8003efc:	601a      	str	r2, [r3, #0]
		printf("Minutes\n");
 8003efe:	4807      	ldr	r0, [pc, #28]	; (8003f1c <Choix_Champ+0x48>)
 8003f00:	f000 fae0 	bl	80044c4 <puts>
		break;
 8003f04:	e7ee      	b.n	8003ee4 <Choix_Champ+0x10>
		champ = HEURES;
 8003f06:	2202      	movs	r2, #2
 8003f08:	4b02      	ldr	r3, [pc, #8]	; (8003f14 <Choix_Champ+0x40>)
 8003f0a:	601a      	str	r2, [r3, #0]
		printf("Heures\n");
 8003f0c:	4804      	ldr	r0, [pc, #16]	; (8003f20 <Choix_Champ+0x4c>)
 8003f0e:	f000 fad9 	bl	80044c4 <puts>
		break;
 8003f12:	e7e7      	b.n	8003ee4 <Choix_Champ+0x10>
 8003f14:	20000010 	.word	0x20000010
 8003f18:	080048a4 	.word	0x080048a4
 8003f1c:	080048b0 	.word	0x080048b0
 8003f20:	080048b8 	.word	0x080048b8

08003f24 <Choix_Sens>:

/*
 * @Brief Permet de changer le sens du changement d'heure (- ou +)
 */
int Choix_Sens(void){
 8003f24:	b508      	push	{r3, lr}
	sens++;
 8003f26:	4a0f      	ldr	r2, [pc, #60]	; (8003f64 <Choix_Sens+0x40>)
 8003f28:	6813      	ldr	r3, [r2, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	6013      	str	r3, [r2, #0]
	if(sens%2 == UP){
 8003f2e:	f013 0f01 	tst.w	r3, #1
 8003f32:	d00e      	beq.n	8003f52 <Choix_Sens+0x2e>
		printf("Up\n");
	}
	else if(sens%2 == DOWN){
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	bfb8      	it	lt
 8003f3c:	425b      	neglt	r3, r3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d00b      	beq.n	8003f5a <Choix_Sens+0x36>
		printf("Down\n");
	}
	return sens%2;
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <Choix_Sens+0x40>)
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	2800      	cmp	r0, #0
 8003f48:	f000 0001 	and.w	r0, r0, #1

}
 8003f4c:	bfb8      	it	lt
 8003f4e:	4240      	neglt	r0, r0
 8003f50:	bd08      	pop	{r3, pc}
		printf("Up\n");
 8003f52:	4805      	ldr	r0, [pc, #20]	; (8003f68 <Choix_Sens+0x44>)
 8003f54:	f000 fab6 	bl	80044c4 <puts>
 8003f58:	e7f3      	b.n	8003f42 <Choix_Sens+0x1e>
		printf("Down\n");
 8003f5a:	4804      	ldr	r0, [pc, #16]	; (8003f6c <Choix_Sens+0x48>)
 8003f5c:	f000 fab2 	bl	80044c4 <puts>
 8003f60:	e7ef      	b.n	8003f42 <Choix_Sens+0x1e>
 8003f62:	bf00      	nop
 8003f64:	20003fd8 	.word	0x20003fd8
 8003f68:	080048c0 	.word	0x080048c0
 8003f6c:	080048c4 	.word	0x080048c4

08003f70 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003f70:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003f72:	4813      	ldr	r0, [pc, #76]	; (8003fc0 <MX_I2C1_Init+0x50>)
 8003f74:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <MX_I2C1_Init+0x54>)
 8003f76:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003f78:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <MX_I2C1_Init+0x58>)
 8003f7a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003f80:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f86:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f88:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003f8a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f8c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f8e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f90:	f7fd f896 	bl	80010c0 <HAL_I2C_Init>
 8003f94:	b950      	cbnz	r0, 8003fac <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003f96:	2100      	movs	r1, #0
 8003f98:	4809      	ldr	r0, [pc, #36]	; (8003fc0 <MX_I2C1_Init+0x50>)
 8003f9a:	f7fd fb89 	bl	80016b0 <HAL_I2CEx_ConfigAnalogFilter>
 8003f9e:	b940      	cbnz	r0, 8003fb2 <MX_I2C1_Init+0x42>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4807      	ldr	r0, [pc, #28]	; (8003fc0 <MX_I2C1_Init+0x50>)
 8003fa4:	f7fd fba6 	bl	80016f4 <HAL_I2CEx_ConfigDigitalFilter>
 8003fa8:	b930      	cbnz	r0, 8003fb8 <MX_I2C1_Init+0x48>
 8003faa:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003fac:	f000 f8d8 	bl	8004160 <Error_Handler>
 8003fb0:	e7f1      	b.n	8003f96 <MX_I2C1_Init+0x26>
    Error_Handler();
 8003fb2:	f000 f8d5 	bl	8004160 <Error_Handler>
 8003fb6:	e7f3      	b.n	8003fa0 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
 8003fb8:	f000 f8d2 	bl	8004160 <Error_Handler>
  }

}
 8003fbc:	e7f5      	b.n	8003faa <MX_I2C1_Init+0x3a>
 8003fbe:	bf00      	nop
 8003fc0:	20004078 	.word	0x20004078
 8003fc4:	40005400 	.word	0x40005400
 8003fc8:	000186a0 	.word	0x000186a0

08003fcc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003fcc:	b530      	push	{r4, r5, lr}
 8003fce:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	9303      	str	r3, [sp, #12]
 8003fd4:	9304      	str	r3, [sp, #16]
 8003fd6:	9305      	str	r3, [sp, #20]
 8003fd8:	9306      	str	r3, [sp, #24]
 8003fda:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8003fdc:	6802      	ldr	r2, [r0, #0]
 8003fde:	4b15      	ldr	r3, [pc, #84]	; (8004034 <HAL_I2C_MspInit+0x68>)
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003fe4:	b009      	add	sp, #36	; 0x24
 8003fe6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe8:	2500      	movs	r5, #0
 8003fea:	9501      	str	r5, [sp, #4]
 8003fec:	4c12      	ldr	r4, [pc, #72]	; (8004038 <HAL_I2C_MspInit+0x6c>)
 8003fee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ff0:	f043 0302 	orr.w	r3, r3, #2
 8003ff4:	6323      	str	r3, [r4, #48]	; 0x30
 8003ff6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004000:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004004:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004006:	2312      	movs	r3, #18
 8004008:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800400a:	2301      	movs	r3, #1
 800400c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400e:	2303      	movs	r3, #3
 8004010:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004012:	2304      	movs	r3, #4
 8004014:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004016:	a903      	add	r1, sp, #12
 8004018:	4808      	ldr	r0, [pc, #32]	; (800403c <HAL_I2C_MspInit+0x70>)
 800401a:	f7fc fd51 	bl	8000ac0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800401e:	9502      	str	r5, [sp, #8]
 8004020:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004022:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004026:	6423      	str	r3, [r4, #64]	; 0x40
 8004028:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800402a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800402e:	9302      	str	r3, [sp, #8]
 8004030:	9b02      	ldr	r3, [sp, #8]
}
 8004032:	e7d7      	b.n	8003fe4 <HAL_I2C_MspInit+0x18>
 8004034:	40005400 	.word	0x40005400
 8004038:	40023800 	.word	0x40023800
 800403c:	40020400 	.word	0x40020400

08004040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004040:	b530      	push	{r4, r5, lr}
 8004042:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004044:	2230      	movs	r2, #48	; 0x30
 8004046:	2100      	movs	r1, #0
 8004048:	a808      	add	r0, sp, #32
 800404a:	f000 fb59 	bl	8004700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800404e:	2400      	movs	r4, #0
 8004050:	9403      	str	r4, [sp, #12]
 8004052:	9404      	str	r4, [sp, #16]
 8004054:	9405      	str	r4, [sp, #20]
 8004056:	9406      	str	r4, [sp, #24]
 8004058:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800405a:	9401      	str	r4, [sp, #4]
 800405c:	4b1c      	ldr	r3, [pc, #112]	; (80040d0 <SystemClock_Config+0x90>)
 800405e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004060:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004070:	9402      	str	r4, [sp, #8]
 8004072:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <SystemClock_Config+0x94>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004082:	9302      	str	r3, [sp, #8]
 8004084:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004086:	2301      	movs	r3, #1
 8004088:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800408a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800408e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004090:	2502      	movs	r5, #2
 8004092:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004094:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004098:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800409a:	2304      	movs	r3, #4
 800409c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800409e:	23a8      	movs	r3, #168	; 0xa8
 80040a0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040a2:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80040a4:	2307      	movs	r3, #7
 80040a6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040a8:	a808      	add	r0, sp, #32
 80040aa:	f7fd fbd5 	bl	8001858 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040ae:	230f      	movs	r3, #15
 80040b0:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040b2:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040b4:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80040b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80040ba:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80040bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c0:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80040c2:	2105      	movs	r1, #5
 80040c4:	a803      	add	r0, sp, #12
 80040c6:	f7fd fdfd 	bl	8001cc4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80040ca:	b015      	add	sp, #84	; 0x54
 80040cc:	bd30      	pop	{r4, r5, pc}
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40007000 	.word	0x40007000

080040d8 <main>:
 {
 80040d8:	b508      	push	{r3, lr}
  HAL_Init();
 80040da:	f7fc fa19 	bl	8000510 <HAL_Init>
  SystemClock_Config();
 80040de:	f7ff ffaf 	bl	8004040 <SystemClock_Config>
  MX_GPIO_Init();
 80040e2:	f7ff fd3b 	bl	8003b5c <MX_GPIO_Init>
  MX_ETH_Init();
 80040e6:	f7ff fa8b 	bl	8003600 <MX_ETH_Init>
  MX_I2C1_Init();
 80040ea:	f7ff ff41 	bl	8003f70 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80040ee:	f000 fa05 	bl	80044fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80040f2:	f000 fa57 	bl	80045a4 <MX_USB_OTG_FS_PCD_Init>
  MX_FREERTOS_Init();
 80040f6:	f7ff fcc5 	bl	8003a84 <MX_FREERTOS_Init>
  osKernelStart();
 80040fa:	f7fe fb8d 	bl	8002818 <osKernelStart>
 80040fe:	e7fe      	b.n	80040fe <main+0x26>

08004100 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8004100:	b430      	push	{r4, r5}
	int i=0;
	for(i=0 ; i<len ; i++)
 8004102:	2400      	movs	r4, #0
 8004104:	e00a      	b.n	800411c <_write+0x1c>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8004106:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004108:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f9      	beq.n	8004106 <_write+0x6>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004112:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004116:	7019      	strb	r1, [r3, #0]
 8004118:	3401      	adds	r4, #1
		ITM_SendChar((*ptr++)); // out char to serial
 800411a:	4629      	mov	r1, r5
	for(i=0 ; i<len ; i++)
 800411c:	4294      	cmp	r4, r2
 800411e:	da10      	bge.n	8004142 <_write+0x42>
		ITM_SendChar((*ptr++)); // out char to serial
 8004120:	1c4d      	adds	r5, r1, #1
 8004122:	7809      	ldrb	r1, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004124:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004128:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800412c:	f013 0f01 	tst.w	r3, #1
 8004130:	d0f2      	beq.n	8004118 <_write+0x18>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004132:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004136:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800413a:	f013 0f01 	tst.w	r3, #1
 800413e:	d1e3      	bne.n	8004108 <_write+0x8>
 8004140:	e7ea      	b.n	8004118 <_write+0x18>
	return len;
}
 8004142:	4610      	mov	r0, r2
 8004144:	bc30      	pop	{r4, r5}
 8004146:	4770      	bx	lr

08004148 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004148:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 800414a:	6802      	ldr	r2, [r0, #0]
 800414c:	4b03      	ldr	r3, [pc, #12]	; (800415c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800414e:	429a      	cmp	r2, r3
 8004150:	d000      	beq.n	8004154 <HAL_TIM_PeriodElapsedCallback+0xc>
 8004152:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8004154:	f7fc f9f6 	bl	8000544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004158:	e7fb      	b.n	8004152 <HAL_TIM_PeriodElapsedCallback+0xa>
 800415a:	bf00      	nop
 800415c:	40010400 	.word	0x40010400

08004160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004160:	4770      	bx	lr

08004162 <malloc>:
https://www.freertos.org/FreeRTOS_Support_Forum_Archive/October_2009/freertos_malloc_function_in_FreeRTOS_3444349.html */

/* Defining malloc/free should overwrite the standard versions provided by the compiler. */

void *malloc (size_t size)
{
 8004162:	b508      	push	{r3, lr}
	/* Call the FreeRTOS version of malloc. */
	return pvPortMalloc( size );
 8004164:	f7fe fdd6 	bl	8002d14 <pvPortMalloc>
}
 8004168:	bd08      	pop	{r3, pc}

0800416a <free>:

	void * p= pvPortMalloc( size );
	return memset(p,0,size);
}

void free (void *ptr) { /* Call the FreeRTOS version of free.*/
 800416a:	b508      	push	{r3, lr}

	vPortFree( ptr );
 800416c:	f7fe fe56 	bl	8002e1c <vPortFree>
 8004170:	bd08      	pop	{r3, pc}
	...

08004174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004174:	b500      	push	{lr}
 8004176:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004178:	2200      	movs	r2, #0
 800417a:	9200      	str	r2, [sp, #0]
 800417c:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <HAL_MspInit+0x40>)
 800417e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004180:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004184:	6459      	str	r1, [r3, #68]	; 0x44
 8004186:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004188:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800418c:	9100      	str	r1, [sp, #0]
 800418e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004190:	9201      	str	r2, [sp, #4]
 8004192:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004194:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004198:	6419      	str	r1, [r3, #64]	; 0x40
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80041a4:	210f      	movs	r1, #15
 80041a6:	f06f 0001 	mvn.w	r0, #1
 80041aa:	f7fc fa03 	bl	80005b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ae:	b003      	add	sp, #12
 80041b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80041b4:	40023800 	.word	0x40023800

080041b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b8:	b510      	push	{r4, lr}
 80041ba:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0); 
 80041bc:	2200      	movs	r2, #0
 80041be:	4601      	mov	r1, r0
 80041c0:	202c      	movs	r0, #44	; 0x2c
 80041c2:	f7fc f9f7 	bl	80005b4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); 
 80041c6:	202c      	movs	r0, #44	; 0x2c
 80041c8:	f7fc fa26 	bl	8000618 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 80041cc:	2400      	movs	r4, #0
 80041ce:	9401      	str	r4, [sp, #4]
 80041d0:	4b14      	ldr	r3, [pc, #80]	; (8004224 <HAL_InitTick+0x6c>)
 80041d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d4:	f042 0202 	orr.w	r2, r2, #2
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80041e4:	a902      	add	r1, sp, #8
 80041e6:	a803      	add	r0, sp, #12
 80041e8:	f7fd fe3e 	bl	8001e68 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM8 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80041ec:	f7fd fe2c 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 80041f0:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80041f2:	480d      	ldr	r0, [pc, #52]	; (8004228 <HAL_InitTick+0x70>)
 80041f4:	fba0 2303 	umull	r2, r3, r0, r3
 80041f8:	0c9b      	lsrs	r3, r3, #18
 80041fa:	3b01      	subs	r3, #1
  
  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 80041fc:	480b      	ldr	r0, [pc, #44]	; (800422c <HAL_InitTick+0x74>)
 80041fe:	4a0c      	ldr	r2, [pc, #48]	; (8004230 <HAL_InitTick+0x78>)
 8004200:	6002      	str	r2, [r0, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000 / 1000) - 1;
 8004202:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004206:	60c2      	str	r2, [r0, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8004208:	6043      	str	r3, [r0, #4]
  htim8.Init.ClockDivision = 0;
 800420a:	6104      	str	r4, [r0, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800420c:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 800420e:	f7fd ff83 	bl	8002118 <HAL_TIM_Base_Init>
 8004212:	b110      	cbz	r0, 800421a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004214:	2001      	movs	r0, #1
}
 8004216:	b008      	add	sp, #32
 8004218:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim8);
 800421a:	4804      	ldr	r0, [pc, #16]	; (800422c <HAL_InitTick+0x74>)
 800421c:	f7fd fe43 	bl	8001ea6 <HAL_TIM_Base_Start_IT>
 8004220:	e7f9      	b.n	8004216 <HAL_InitTick+0x5e>
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800
 8004228:	431bde83 	.word	0x431bde83
 800422c:	200040cc 	.word	0x200040cc
 8004230:	40010400 	.word	0x40010400

08004234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004234:	4770      	bx	lr

08004236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004236:	e7fe      	b.n	8004236 <HardFault_Handler>

08004238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004238:	e7fe      	b.n	8004238 <MemManage_Handler>

0800423a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800423a:	e7fe      	b.n	800423a <BusFault_Handler>

0800423c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800423c:	e7fe      	b.n	800423c <UsageFault_Handler>

0800423e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800423e:	4770      	bx	lr

08004240 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004240:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004242:	4802      	ldr	r0, [pc, #8]	; (800424c <TIM8_UP_TIM13_IRQHandler+0xc>)
 8004244:	f7fd fe44 	bl	8001ed0 <HAL_TIM_IRQHandler>
 8004248:	bd08      	pop	{r3, pc}
 800424a:	bf00      	nop
 800424c:	200040cc 	.word	0x200040cc

08004250 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004250:	490f      	ldr	r1, [pc, #60]	; (8004290 <SystemInit+0x40>)
 8004252:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004256:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800425e:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <SystemInit+0x44>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004268:	2000      	movs	r0, #0
 800426a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004272:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004276:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004278:	4a07      	ldr	r2, [pc, #28]	; (8004298 <SystemInit+0x48>)
 800427a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004282:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004284:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004286:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800428a:	608b      	str	r3, [r1, #8]
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	e000ed00 	.word	0xe000ed00
 8004294:	40023800 	.word	0x40023800
 8004298:	24003010 	.word	0x24003010

0800429c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800429c:	b470      	push	{r4, r5, r6}
	int div = 1;
 800429e:	2301      	movs	r3, #1
	while (d/div >= base)
 80042a0:	e001      	b.n	80042a6 <ts_itoa+0xa>
		div *= base;
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
	while (d/div >= base)
 80042a6:	fbb1 f4f3 	udiv	r4, r1, r3
 80042aa:	4294      	cmp	r4, r2
 80042ac:	d2f9      	bcs.n	80042a2 <ts_itoa+0x6>
 80042ae:	e004      	b.n	80042ba <ts_itoa+0x1e>
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
 80042b0:	6805      	ldr	r5, [r0, #0]
 80042b2:	1c6e      	adds	r6, r5, #1
 80042b4:	6006      	str	r6, [r0, #0]
 80042b6:	3430      	adds	r4, #48	; 0x30
 80042b8:	702c      	strb	r4, [r5, #0]
	while (div != 0)
 80042ba:	b16b      	cbz	r3, 80042d8 <ts_itoa+0x3c>
		int num = d/div;
 80042bc:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d%div;
 80042c0:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 80042c4:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 80042c8:	2c09      	cmp	r4, #9
 80042ca:	ddf1      	ble.n	80042b0 <ts_itoa+0x14>
			*((*buf)++) = (num-10) + 'A';
 80042cc:	6805      	ldr	r5, [r0, #0]
 80042ce:	1c6e      	adds	r6, r5, #1
 80042d0:	6006      	str	r6, [r0, #0]
 80042d2:	3437      	adds	r4, #55	; 0x37
 80042d4:	702c      	strb	r4, [r5, #0]
 80042d6:	e7f0      	b.n	80042ba <ts_itoa+0x1e>
	}
}
 80042d8:	bc70      	pop	{r4, r5, r6}
 80042da:	4770      	bx	lr

080042dc <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80042dc:	b530      	push	{r4, r5, lr}
 80042de:	b083      	sub	sp, #12
 80042e0:	9001      	str	r0, [sp, #4]
 80042e2:	460c      	mov	r4, r1
 80042e4:	9200      	str	r2, [sp, #0]
	char *start_buf = buf;
 80042e6:	4605      	mov	r5, r0
	while(*fmt)
 80042e8:	e03e      	b.n	8004368 <ts_formatstring+0x8c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 80042ea:	7863      	ldrb	r3, [r4, #1]
 80042ec:	2b64      	cmp	r3, #100	; 0x64
 80042ee:	d01c      	beq.n	800432a <ts_formatstring+0x4e>
 80042f0:	d90d      	bls.n	800430e <ts_formatstring+0x32>
 80042f2:	2b73      	cmp	r3, #115	; 0x73
 80042f4:	d04a      	beq.n	800438c <ts_formatstring+0xb0>
 80042f6:	d916      	bls.n	8004326 <ts_formatstring+0x4a>
 80042f8:	2b75      	cmp	r3, #117	; 0x75
 80042fa:	d121      	bne.n	8004340 <ts_formatstring+0x64>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80042fc:	9b00      	ldr	r3, [sp, #0]
 80042fe:	1d1a      	adds	r2, r3, #4
 8004300:	9200      	str	r2, [sp, #0]
 8004302:	220a      	movs	r2, #10
 8004304:	6819      	ldr	r1, [r3, #0]
 8004306:	a801      	add	r0, sp, #4
 8004308:	f7ff ffc8 	bl	800429c <ts_itoa>
				break;
 800430c:	e02b      	b.n	8004366 <ts_formatstring+0x8a>
			switch (*(++fmt))
 800430e:	2b58      	cmp	r3, #88	; 0x58
 8004310:	d018      	beq.n	8004344 <ts_formatstring+0x68>
 8004312:	2b63      	cmp	r3, #99	; 0x63
 8004314:	d01f      	beq.n	8004356 <ts_formatstring+0x7a>
 8004316:	2b25      	cmp	r3, #37	; 0x25
 8004318:	d125      	bne.n	8004366 <ts_formatstring+0x8a>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 800431a:	9b01      	ldr	r3, [sp, #4]
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	9201      	str	r2, [sp, #4]
 8004320:	2225      	movs	r2, #37	; 0x25
 8004322:	701a      	strb	r2, [r3, #0]
				  break;
 8004324:	e01f      	b.n	8004366 <ts_formatstring+0x8a>
			switch (*(++fmt))
 8004326:	2b69      	cmp	r3, #105	; 0x69
 8004328:	d11d      	bne.n	8004366 <ts_formatstring+0x8a>
					signed int val = va_arg(va, signed int);
 800432a:	9b00      	ldr	r3, [sp, #0]
 800432c:	1d1a      	adds	r2, r3, #4
 800432e:	9200      	str	r2, [sp, #0]
 8004330:	6819      	ldr	r1, [r3, #0]
					if (val < 0)
 8004332:	2900      	cmp	r1, #0
 8004334:	db23      	blt.n	800437e <ts_formatstring+0xa2>
					ts_itoa(&buf, val, 10);
 8004336:	220a      	movs	r2, #10
 8004338:	a801      	add	r0, sp, #4
 800433a:	f7ff ffaf 	bl	800429c <ts_itoa>
				break;
 800433e:	e012      	b.n	8004366 <ts_formatstring+0x8a>
			switch (*(++fmt))
 8004340:	2b78      	cmp	r3, #120	; 0x78
 8004342:	d110      	bne.n	8004366 <ts_formatstring+0x8a>
					ts_itoa(&buf, va_arg(va, int), 16);
 8004344:	9b00      	ldr	r3, [sp, #0]
 8004346:	1d1a      	adds	r2, r3, #4
 8004348:	9200      	str	r2, [sp, #0]
 800434a:	2210      	movs	r2, #16
 800434c:	6819      	ldr	r1, [r3, #0]
 800434e:	a801      	add	r0, sp, #4
 8004350:	f7ff ffa4 	bl	800429c <ts_itoa>
				break;
 8004354:	e007      	b.n	8004366 <ts_formatstring+0x8a>
				*buf++ = va_arg(va, int);
 8004356:	9b01      	ldr	r3, [sp, #4]
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	9201      	str	r2, [sp, #4]
 800435c:	9a00      	ldr	r2, [sp, #0]
 800435e:	1d11      	adds	r1, r2, #4
 8004360:	9100      	str	r1, [sp, #0]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	701a      	strb	r2, [r3, #0]
			}
			fmt++;
 8004366:	3402      	adds	r4, #2
	while(*fmt)
 8004368:	7823      	ldrb	r3, [r4, #0]
 800436a:	b1f3      	cbz	r3, 80043aa <ts_formatstring+0xce>
		if (*fmt == '%')
 800436c:	2b25      	cmp	r3, #37	; 0x25
 800436e:	d0bc      	beq.n	80042ea <ts_formatstring+0xe>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004370:	9b01      	ldr	r3, [sp, #4]
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	9201      	str	r2, [sp, #4]
 8004376:	7822      	ldrb	r2, [r4, #0]
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	3401      	adds	r4, #1
 800437c:	e7f4      	b.n	8004368 <ts_formatstring+0x8c>
						val *= -1;
 800437e:	4249      	negs	r1, r1
						*buf++ = '-';
 8004380:	9b01      	ldr	r3, [sp, #4]
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	9201      	str	r2, [sp, #4]
 8004386:	222d      	movs	r2, #45	; 0x2d
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	e7d4      	b.n	8004336 <ts_formatstring+0x5a>
					char * arg = va_arg(va, char *);
 800438c:	9b00      	ldr	r3, [sp, #0]
 800438e:	1d1a      	adds	r2, r3, #4
 8004390:	9200      	str	r2, [sp, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 8004394:	e005      	b.n	80043a2 <ts_formatstring+0xc6>
						*buf++ = *arg++;
 8004396:	9a01      	ldr	r2, [sp, #4]
 8004398:	1c51      	adds	r1, r2, #1
 800439a:	9101      	str	r1, [sp, #4]
 800439c:	7819      	ldrb	r1, [r3, #0]
 800439e:	7011      	strb	r1, [r2, #0]
 80043a0:	3301      	adds	r3, #1
					while (*arg)
 80043a2:	781a      	ldrb	r2, [r3, #0]
 80043a4:	2a00      	cmp	r2, #0
 80043a6:	d1f6      	bne.n	8004396 <ts_formatstring+0xba>
 80043a8:	e7dd      	b.n	8004366 <ts_formatstring+0x8a>
		}
	}
	*buf = 0;
 80043aa:	2200      	movs	r2, #0
 80043ac:	9b01      	ldr	r3, [sp, #4]
 80043ae:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 80043b0:	9801      	ldr	r0, [sp, #4]
 80043b2:	1b40      	subs	r0, r0, r5
 80043b4:	b003      	add	sp, #12
 80043b6:	bd30      	pop	{r4, r5, pc}

080043b8 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80043b8:	b082      	sub	sp, #8
 80043ba:	4603      	mov	r3, r0
 80043bc:	9101      	str	r1, [sp, #4]
	int length = 0;
 80043be:	2000      	movs	r0, #0
	while (*fmt)
 80043c0:	e01d      	b.n	80043fe <ts_formatlength+0x46>
	{
		if (*fmt == '%')
		{
			++fmt;
 80043c2:	1c59      	adds	r1, r3, #1
			switch (*fmt)
 80043c4:	785b      	ldrb	r3, [r3, #1]
 80043c6:	3b58      	subs	r3, #88	; 0x58
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d837      	bhi.n	800443c <ts_formatlength+0x84>
 80043cc:	e8df f003 	tbb	[pc, r3]
 80043d0:	36363630 	.word	0x36363630
 80043d4:	36363636 	.word	0x36363636
 80043d8:	11363636 	.word	0x11363636
 80043dc:	3636361d 	.word	0x3636361d
 80043e0:	36361d36 	.word	0x36361d36
 80043e4:	36363636 	.word	0x36363636
 80043e8:	23363636 	.word	0x23363636
 80043ec:	36361d36 	.word	0x36361d36
 80043f0:	30          	.byte	0x30
 80043f1:	00          	.byte	0x00
			{
			  case 'c':
		  		  va_arg(va, int);
 80043f2:	9b01      	ldr	r3, [sp, #4]
 80043f4:	3304      	adds	r3, #4
 80043f6:	9301      	str	r3, [sp, #4]
				  ++length;
 80043f8:	3001      	adds	r0, #1
			++fmt;
 80043fa:	460b      	mov	r3, r1
		}
		else
		{
			++length;
		}
		++fmt;
 80043fc:	3301      	adds	r3, #1
	while (*fmt)
 80043fe:	781a      	ldrb	r2, [r3, #0]
 8004400:	b1fa      	cbz	r2, 8004442 <ts_formatlength+0x8a>
		if (*fmt == '%')
 8004402:	2a25      	cmp	r2, #37	; 0x25
 8004404:	d0dd      	beq.n	80043c2 <ts_formatlength+0xa>
			++length;
 8004406:	3001      	adds	r0, #1
 8004408:	e7f8      	b.n	80043fc <ts_formatlength+0x44>
				  length += 11;
 800440a:	300b      	adds	r0, #11
				  va_arg(va, int);
 800440c:	9b01      	ldr	r3, [sp, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	9301      	str	r3, [sp, #4]
			++fmt;
 8004412:	460b      	mov	r3, r1
 8004414:	e7f2      	b.n	80043fc <ts_formatlength+0x44>
			  		  char * str = va_arg(va, char *);
 8004416:	9b01      	ldr	r3, [sp, #4]
 8004418:	1d1a      	adds	r2, r3, #4
 800441a:	9201      	str	r2, [sp, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
			  		  while (*str++)
 800441e:	e001      	b.n	8004424 <ts_formatlength+0x6c>
			  			  ++length;
 8004420:	3001      	adds	r0, #1
			  		  while (*str++)
 8004422:	4613      	mov	r3, r2
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f9      	bne.n	8004420 <ts_formatlength+0x68>
			++fmt;
 800442c:	460b      	mov	r3, r1
 800442e:	e7e5      	b.n	80043fc <ts_formatlength+0x44>
				  length += 8;
 8004430:	3008      	adds	r0, #8
				  va_arg(va, unsigned int);
 8004432:	9b01      	ldr	r3, [sp, #4]
 8004434:	3304      	adds	r3, #4
 8004436:	9301      	str	r3, [sp, #4]
			++fmt;
 8004438:	460b      	mov	r3, r1
 800443a:	e7df      	b.n	80043fc <ts_formatlength+0x44>
				  ++length;
 800443c:	3001      	adds	r0, #1
			++fmt;
 800443e:	460b      	mov	r3, r1
				  break;
 8004440:	e7dc      	b.n	80043fc <ts_formatlength+0x44>
	}
	return length;
}
 8004442:	b002      	add	sp, #8
 8004444:	4770      	bx	lr

08004446 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8004446:	b40f      	push	{r0, r1, r2, r3}
 8004448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	f107 0120 	add.w	r1, r7, #32
 8004452:	f851 5b04 	ldr.w	r5, [r1], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 8004456:	6079      	str	r1, [r7, #4]
	length = ts_formatlength(fmt, va);
 8004458:	4628      	mov	r0, r5
 800445a:	f7ff ffad 	bl	80043b8 <ts_formatlength>
 800445e:	4604      	mov	r4, r0
	va_end(va);
	if (length < 50){ // ok only for small default configMINIMAL_STACK_SIZE (128)
 8004460:	2831      	cmp	r0, #49	; 0x31
 8004462:	dd19      	ble.n	8004498 <iprintf+0x52>
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
		length = _write(1, buf, length);
		va_end(va);
	} else {
		char * buf=malloc(length * sizeof(char));
 8004464:	f7ff fe7d 	bl	8004162 <malloc>
		if (buf) {
 8004468:	4606      	mov	r6, r0
 800446a:	b170      	cbz	r0, 800448a <iprintf+0x44>
			va_start(va, fmt);
 800446c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004470:	607a      	str	r2, [r7, #4]
			length = ts_formatstring(buf, fmt, va);
 8004472:	4629      	mov	r1, r5
 8004474:	f7ff ff32 	bl	80042dc <ts_formatstring>
			length = _write(1, buf, length);
 8004478:	4602      	mov	r2, r0
 800447a:	4631      	mov	r1, r6
 800447c:	2001      	movs	r0, #1
 800447e:	f7ff fe3f 	bl	8004100 <_write>
 8004482:	4604      	mov	r4, r0
			va_end(va);
			free(buf);
 8004484:	4630      	mov	r0, r6
 8004486:	f7ff fe70 	bl	800416a <free>
		}
	}
	return length;
}
 800448a:	4620      	mov	r0, r4
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004494:	b004      	add	sp, #16
 8004496:	4770      	bx	lr
	if (length < 50){ // ok only for small default configMINIMAL_STACK_SIZE (128)
 8004498:	466e      	mov	r6, sp
			char buf[length];
 800449a:	3407      	adds	r4, #7
 800449c:	f024 0407 	bic.w	r4, r4, #7
 80044a0:	ebad 0d04 	sub.w	sp, sp, r4
		va_start(va, fmt);
 80044a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80044a8:	607a      	str	r2, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 80044aa:	4629      	mov	r1, r5
 80044ac:	4668      	mov	r0, sp
 80044ae:	f7ff ff15 	bl	80042dc <ts_formatstring>
		length = _write(1, buf, length);
 80044b2:	4602      	mov	r2, r0
 80044b4:	4669      	mov	r1, sp
 80044b6:	2001      	movs	r0, #1
 80044b8:	f7ff fe22 	bl	8004100 <_write>
 80044bc:	4604      	mov	r4, r0
 80044be:	46b5      	mov	sp, r6
 80044c0:	e7e3      	b.n	800448a <iprintf+0x44>
	...

080044c4 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	4605      	mov	r5, r0
	int length = strlen(s);
 80044c8:	f7fb fe92 	bl	80001f0 <strlen>
 80044cc:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 80044ce:	4602      	mov	r2, r0
 80044d0:	4629      	mov	r1, r5
 80044d2:	2001      	movs	r0, #1
 80044d4:	f7ff fe14 	bl	8004100 <_write>
 80044d8:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 80044da:	2201      	movs	r2, #1
 80044dc:	4906      	ldr	r1, [pc, #24]	; (80044f8 <puts+0x34>)
 80044de:	4610      	mov	r0, r2
 80044e0:	f7ff fe0e 	bl	8004100 <_write>
 80044e4:	4428      	add	r0, r5

	if (numbytes == (length+1))
 80044e6:	3401      	adds	r4, #1
 80044e8:	42a0      	cmp	r0, r4
 80044ea:	d101      	bne.n	80044f0 <puts+0x2c>
	{
		res = 0;
 80044ec:	2000      	movs	r0, #0
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		res = EOF;
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return res;
}
 80044f4:	bd38      	pop	{r3, r4, r5, pc}
 80044f6:	bf00      	nop
 80044f8:	080048e4 	.word	0x080048e4

080044fc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80044fc:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80044fe:	480a      	ldr	r0, [pc, #40]	; (8004528 <MX_USART3_UART_Init+0x2c>)
 8004500:	4b0a      	ldr	r3, [pc, #40]	; (800452c <MX_USART3_UART_Init+0x30>)
 8004502:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8004504:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004508:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800450a:	2300      	movs	r3, #0
 800450c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800450e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004510:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004512:	220c      	movs	r2, #12
 8004514:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004516:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004518:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800451a:	f7fd ffbb 	bl	8002494 <HAL_UART_Init>
 800451e:	b900      	cbnz	r0, 8004522 <MX_USART3_UART_Init+0x26>
 8004520:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 8004522:	f7ff fe1d 	bl	8004160 <Error_Handler>
  }

}
 8004526:	e7fb      	b.n	8004520 <MX_USART3_UART_Init+0x24>
 8004528:	2000410c 	.word	0x2000410c
 800452c:	40004800 	.word	0x40004800

08004530 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004530:	b500      	push	{lr}
 8004532:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004534:	2300      	movs	r3, #0
 8004536:	9303      	str	r3, [sp, #12]
 8004538:	9304      	str	r3, [sp, #16]
 800453a:	9305      	str	r3, [sp, #20]
 800453c:	9306      	str	r3, [sp, #24]
 800453e:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 8004540:	6802      	ldr	r2, [r0, #0]
 8004542:	4b16      	ldr	r3, [pc, #88]	; (800459c <HAL_UART_MspInit+0x6c>)
 8004544:	429a      	cmp	r2, r3
 8004546:	d002      	beq.n	800454e <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004548:	b009      	add	sp, #36	; 0x24
 800454a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 800454e:	2100      	movs	r1, #0
 8004550:	9101      	str	r1, [sp, #4]
 8004552:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8004556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004558:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
 800455e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004560:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004564:	9201      	str	r2, [sp, #4]
 8004566:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004568:	9102      	str	r1, [sp, #8]
 800456a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800456c:	f042 0208 	orr.w	r2, r2, #8
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	9302      	str	r3, [sp, #8]
 800457a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800457c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004580:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004582:	2302      	movs	r3, #2
 8004584:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004586:	2301      	movs	r3, #1
 8004588:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800458a:	2303      	movs	r3, #3
 800458c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800458e:	2307      	movs	r3, #7
 8004590:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004592:	a903      	add	r1, sp, #12
 8004594:	4802      	ldr	r0, [pc, #8]	; (80045a0 <HAL_UART_MspInit+0x70>)
 8004596:	f7fc fa93 	bl	8000ac0 <HAL_GPIO_Init>
}
 800459a:	e7d5      	b.n	8004548 <HAL_UART_MspInit+0x18>
 800459c:	40004800 	.word	0x40004800
 80045a0:	40020c00 	.word	0x40020c00

080045a4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80045a4:	b508      	push	{r3, lr}

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80045a6:	480c      	ldr	r0, [pc, #48]	; (80045d8 <MX_USB_OTG_FS_PCD_Init+0x34>)
 80045a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045ac:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80045ae:	2304      	movs	r3, #4
 80045b0:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80045b2:	2202      	movs	r2, #2
 80045b4:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80045ba:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80045bc:	2201      	movs	r2, #1
 80045be:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80045c0:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80045c2:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80045c4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80045c6:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80045c8:	f7fd f8b5 	bl	8001736 <HAL_PCD_Init>
 80045cc:	b900      	cbnz	r0, 80045d0 <MX_USB_OTG_FS_PCD_Init+0x2c>
 80045ce:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 80045d0:	f7ff fdc6 	bl	8004160 <Error_Handler>
  }

}
 80045d4:	e7fb      	b.n	80045ce <MX_USB_OTG_FS_PCD_Init+0x2a>
 80045d6:	bf00      	nop
 80045d8:	2000414c 	.word	0x2000414c

080045dc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80045dc:	b570      	push	{r4, r5, r6, lr}
 80045de:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e0:	2300      	movs	r3, #0
 80045e2:	9303      	str	r3, [sp, #12]
 80045e4:	9304      	str	r3, [sp, #16]
 80045e6:	9305      	str	r3, [sp, #20]
 80045e8:	9306      	str	r3, [sp, #24]
 80045ea:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 80045ec:	6803      	ldr	r3, [r0, #0]
 80045ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f2:	d001      	beq.n	80045f8 <HAL_PCD_MspInit+0x1c>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80045f4:	b008      	add	sp, #32
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f8:	2500      	movs	r5, #0
 80045fa:	9501      	str	r5, [sp, #4]
 80045fc:	4c17      	ldr	r4, [pc, #92]	; (800465c <HAL_PCD_MspInit+0x80>)
 80045fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	6323      	str	r3, [r4, #48]	; 0x30
 8004606:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004610:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004614:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004616:	2302      	movs	r3, #2
 8004618:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461a:	2303      	movs	r3, #3
 800461c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800461e:	230a      	movs	r3, #10
 8004620:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004622:	4e0f      	ldr	r6, [pc, #60]	; (8004660 <HAL_PCD_MspInit+0x84>)
 8004624:	a903      	add	r1, sp, #12
 8004626:	4630      	mov	r0, r6
 8004628:	f7fc fa4a 	bl	8000ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800462c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004630:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004632:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004634:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004636:	a903      	add	r1, sp, #12
 8004638:	4630      	mov	r0, r6
 800463a:	f7fc fa41 	bl	8000ac0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800463e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004644:	6363      	str	r3, [r4, #52]	; 0x34
 8004646:	9502      	str	r5, [sp, #8]
 8004648:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800464a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800464e:	6463      	str	r3, [r4, #68]	; 0x44
 8004650:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004656:	9302      	str	r3, [sp, #8]
 8004658:	9b02      	ldr	r3, [sp, #8]
}
 800465a:	e7cb      	b.n	80045f4 <HAL_PCD_MspInit+0x18>
 800465c:	40023800 	.word	0x40023800
 8004660:	40020000 	.word	0x40020000

08004664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800469c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004668:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800466a:	e003      	b.n	8004674 <LoopCopyDataInit>

0800466c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800466e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004670:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004672:	3104      	adds	r1, #4

08004674 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004674:	480b      	ldr	r0, [pc, #44]	; (80046a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004676:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004678:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800467a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800467c:	d3f6      	bcc.n	800466c <CopyDataInit>
  ldr  r2, =_sbss
 800467e:	4a0b      	ldr	r2, [pc, #44]	; (80046ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004680:	e002      	b.n	8004688 <LoopFillZerobss>

08004682 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004682:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004684:	f842 3b04 	str.w	r3, [r2], #4

08004688 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004688:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800468a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800468c:	d3f9      	bcc.n	8004682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800468e:	f7ff fddf 	bl	8004250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004692:	f000 f811 	bl	80046b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004696:	f7ff fd1f 	bl	80040d8 <main>
  bx  lr    
 800469a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800469c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80046a0:	080048f8 	.word	0x080048f8
  ldr  r0, =_sdata
 80046a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80046a8:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 80046ac:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 80046b0:	20004554 	.word	0x20004554

080046b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046b4:	e7fe      	b.n	80046b4 <ADC_IRQHandler>
	...

080046b8 <__libc_init_array>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4e0d      	ldr	r6, [pc, #52]	; (80046f0 <__libc_init_array+0x38>)
 80046bc:	4c0d      	ldr	r4, [pc, #52]	; (80046f4 <__libc_init_array+0x3c>)
 80046be:	1ba4      	subs	r4, r4, r6
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	2500      	movs	r5, #0
 80046c4:	42a5      	cmp	r5, r4
 80046c6:	d109      	bne.n	80046dc <__libc_init_array+0x24>
 80046c8:	4e0b      	ldr	r6, [pc, #44]	; (80046f8 <__libc_init_array+0x40>)
 80046ca:	4c0c      	ldr	r4, [pc, #48]	; (80046fc <__libc_init_array+0x44>)
 80046cc:	f000 f820 	bl	8004710 <_init>
 80046d0:	1ba4      	subs	r4, r4, r6
 80046d2:	10a4      	asrs	r4, r4, #2
 80046d4:	2500      	movs	r5, #0
 80046d6:	42a5      	cmp	r5, r4
 80046d8:	d105      	bne.n	80046e6 <__libc_init_array+0x2e>
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046e0:	4798      	blx	r3
 80046e2:	3501      	adds	r5, #1
 80046e4:	e7ee      	b.n	80046c4 <__libc_init_array+0xc>
 80046e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046ea:	4798      	blx	r3
 80046ec:	3501      	adds	r5, #1
 80046ee:	e7f2      	b.n	80046d6 <__libc_init_array+0x1e>
 80046f0:	080048f0 	.word	0x080048f0
 80046f4:	080048f0 	.word	0x080048f0
 80046f8:	080048f0 	.word	0x080048f0
 80046fc:	080048f4 	.word	0x080048f4

08004700 <memset>:
 8004700:	4402      	add	r2, r0
 8004702:	4603      	mov	r3, r0
 8004704:	4293      	cmp	r3, r2
 8004706:	d100      	bne.n	800470a <memset+0xa>
 8004708:	4770      	bx	lr
 800470a:	f803 1b01 	strb.w	r1, [r3], #1
 800470e:	e7f9      	b.n	8004704 <memset+0x4>

08004710 <_init>:
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	bf00      	nop
 8004714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004716:	bc08      	pop	{r3}
 8004718:	469e      	mov	lr, r3
 800471a:	4770      	bx	lr

0800471c <_fini>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	bf00      	nop
 8004720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004722:	bc08      	pop	{r3}
 8004724:	469e      	mov	lr, r3
 8004726:	4770      	bx	lr
